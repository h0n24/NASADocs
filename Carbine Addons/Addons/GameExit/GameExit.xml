<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Forms>
    <Form Class="Window" LAnchorPoint="0" LAnchorOffset="-1" TAnchorPoint="0" TAnchorOffset="-1" RAnchorPoint="1" RAnchorOffset="1" BAnchorPoint="1" BAnchorOffset="1" RelativeToClient="0" Font="Default" Text="" Template="Default" TooltipType="OnCursor" Name="GameExitForm" Border="0" Picture="1" SwallowMouseClicks="1" Moveable="0" Escapable="1" Overlapped="1" BGColor="UI_AlphaPercent50" TextColor="white" TooltipColor="" Sprite="BlackFill" Tooltip="" NoClip="1">
        <Control Class="Window" LAnchorPoint="0.5" LAnchorOffset="-206" TAnchorPoint=".25" TAnchorOffset="-127" RAnchorPoint="0.5" RAnchorOffset="206" BAnchorPoint=".25" BAnchorOffset="127" RelativeToClient="1" Font="Default" Text="" Template="default" Name="GameExitPseudoForm" Border="0" Picture="1" SwallowMouseClicks="1" Moveable="0" Escapable="0" Overlapped="1" BGColor="white" TextColor="white" TextId="" TooltipColor="" Tooltip="" Sprite="BK3:sprHolo_Alert_Confirm">
            <Control Class="Window" LAnchorPoint="0" LAnchorOffset="50" TAnchorPoint="0.5" TAnchorOffset="-58" RAnchorPoint="1" RAnchorOffset="-50" BAnchorPoint="0.5" BAnchorOffset="34" RelativeToClient="1" Font="Default" Text="" Template="Default" TooltipType="OnCursor" Name="BG_Inset" BGColor="white" TextColor="white" TooltipColor="" Picture="1" IgnoreMouse="1" Sprite="BK3:UI_BK3_Holo_InsetHeaderThin" Tooltip=""/>
            <Control Class="Window" LAnchorPoint="0" LAnchorOffset="60" TAnchorPoint="0" TAnchorOffset="25" RAnchorPoint="1" RAnchorOffset="-60" BAnchorPoint="0" BAnchorOffset="55" RelativeToClient="1" Font="CRB_HeaderLarge" Template="Default" Name="Title" BGColor="white" TextColor="UI_WindowTitleYellow" DT_VCENTER="1" DT_CENTER="1" NewControlDepth="2" TextId="CRB_Camp" Text="" TooltipColor=""/>
            <Control Class="Button" Base="BK3:btnHolo_Red_Med" Font="CRB_Button" ButtonType="PushButton" RadioGroup="" LAnchorPoint="0" LAnchorOffset="136" TAnchorPoint="1" TAnchorOffset="-91" RAnchorPoint="0" RAnchorOffset="276" BAnchorPoint="1" BAnchorOffset="-18" DT_VCENTER="1" DT_CENTER="1" Name="CancelButton" BGColor="white" TextColor="white" NewControlDepth="2" WindowSoundTemplate="HoloButtonLarge" TextId="CRB_Cancel" Text="" TooltipColor="" NormalTextColor="UI_BtnTextRedNormal" PressedTextColor="UI_BtnTextRedPressed" FlybyTextColor="UI_BtnTextRedFlyby" PressedFlybyTextColor="UI_BtnTextRedPressedFlyby" DisabledTextColor="UI_BtnTextRedDisabled">
                <Event Name="ButtonSignal" Function="OnCancel"/>
            </Control>
            <Control Class="Button" Base="BK3:btnHolo_Blue_Med" Font="CRB_Button" ButtonType="PushButton" RadioGroup="" LAnchorPoint="0" LAnchorOffset="66" TAnchorPoint="1" TAnchorOffset="-91" RAnchorPoint=".5" RAnchorOffset="0" BAnchorPoint="1" BAnchorOffset="-18" DT_VCENTER="1" DT_CENTER="1" Name="LeaveNow" BGColor="white" TextColor="white" NewControlDepth="2" WindowSoundTemplate="HoloButtonLarge" TextId="GameExit_LeaveNow" Text="" TooltipColor="" NormalTextColor="UI_BtnTextBlueNormal" PressedTextColor="UI_BtnTextBluePressed" FlybyTextColor="UI_BtnTextBlueFlyby" PressedFlybyTextColor="UI_BtnTextBluePressedFlyby" DisabledTextColor="UI_BtnTextBlueDisabled" Tooltip="" HideInEditor="1">
                <Event Name="ButtonSignal" Function="OnLeaveNow"/>
            </Control>
            <Control Class="Button" Base="BK3:btnHolo_Close" Font="Thick" ButtonType="PushButton" RadioGroup="" LAnchorPoint="1" LAnchorOffset="-62" TAnchorPoint="0" TAnchorOffset="20" RAnchorPoint="1" RAnchorOffset="-20" BAnchorPoint="0" BAnchorOffset="64" DT_VCENTER="1" DT_CENTER="1" Name="CloseButton" BGColor="white" TextColor="white" NewControlDepth="2" WindowSoundTemplate="HoloButtonSmall" Text="" TextId="" TooltipColor="" NormalTextColor="white" PressedTextColor="white" FlybyTextColor="white" PressedFlybyTextColor="white" DisabledTextColor="white" TestAlpha="1">
                <Event Name="ButtonSignal" Function="OnCancel"/>
            </Control>
            <Control Class="Window" LAnchorPoint="0" LAnchorOffset="50" TAnchorPoint="0" TAnchorOffset="67" RAnchorPoint="1" RAnchorOffset="-50" BAnchorPoint="0.5" BAnchorOffset="-20" RelativeToClient="1" Font="CRB_InterfaceMedium" Text="" Template="Default" TooltipType="OnCursor" Name="Message" BGColor="white" TextColor="UI_TextHoloTitle" TooltipColor="" DT_CENTER="1" DT_VCENTER="1" TextId="" IgnoreMouse="1" AutoScaleText="1"/>
            <Control Class="Window" LAnchorPoint=".5" LAnchorOffset="-58" TAnchorPoint="0.5" TAnchorOffset="-15" RAnchorPoint=".5" RAnchorOffset="58" BAnchorPoint="0.5" BAnchorOffset="25" RelativeToClient="1" Font="CRB_HeaderGigantic" Text="" Template="Default" TooltipType="OnCursor" Name="Time" BGColor="white" TextColor="UI_TextHoloBodyHighlight" TooltipColor="" DT_CENTER="1" DT_VCENTER="1" TextId=""/>
        </Control>
        <Event Name="WindowClosed" Function="OnCancel"/>
    </Form>
</Forms>
therBar,tActionBar in pairs(self.tActionBarsVert) do
		if nOtherBar ~= nBar and tActionBar:IsShown() then
			local tOtherPosition = self:GetBarPosition(nOtherBar)

			if tOtherPosition and tOtherPosition.tCenter and tOtherPosition.tCenter.nX == tPosition.tCenter.nX then
				nRowHeight = nRowHeight + tOtherPosition.tSize.nHeight
				nRowY = (nRowY * #arRow + tOtherPosition.tCenter.nY) / (#arRow + 1)
				arRow[#arRow + 1] = self.tActionBarsVert[nOtherBar]
			end
		end
	end

	-- if there were any overlapping then rearrange all of them
	if #arRow > 1 then
		local kOverlap = 4

		local nTop = nRowY - nRowHeight / 2
		local tDisplay = Apollo.GetDisplaySize()
		if tDisplay and tDisplay.nWidth then
			if nTop + nRowHeight > tDisplay.nWidth / 2 then
				nTop = nRowHeight / -2
			end
		end
		nTop = nTop + kOverlap * #arRow

		for nIdx, nTmpBar in pairs(arRow) do
			local tTmpPosition = self:GetBarPosition(nTmpBar)
			self:SetBarPosition(nTmpBar, nil, { nY = nTop + tTmpPosition.tSize.nHeight / 2 } )
			nTop = nTop + tTmpPosition.tSize.nHeight - kOverlap
		end
	end
end

function ActionBarShortcut:ShowWindow(nBar, bIsVisible, nShortcuts)
    if self.tActionBarsHorz[nBar] == nil then
		return
	end
	
	self.tActionBarSettings[nBar] = {}
	self.tActionBarSettings[nBar].bIsVisible = bIsVisible
	self.tActionBarSettings[nBar].nShortcuts = nShortcuts

	if nShortcuts and bIsVisible then
		--self:ShowBarDocked(nBar, bIsVisible, nShortcuts)
		self:ShowBarFloatHorz(nBar, bIsVisible, nShortcuts)
		self:ShowBarFloatVert(nBar, bIsVisible, nShortcuts)
	end
	
	if not self.bTimerRunning then
		self.timerShorcutArt:Start()
		self.bTimerRunning = true
	end

	self.tActionBars[nBar]:Show(bIsVisible and self.bDocked, not bIsVisible)
	self.tActionBarsHorz[nBar]:Show(bIsVisible and not self.bDocked and self.bHorz, not bIsVisible)
	self.tActionBarsVert[nBar]:Show(bIsVisible and not self.bDocked and not self.bHorz, not bIsVisible)
end

function ActionBarShortcut:OnActionBarShortcutArtTimer()
	self.bTimerRunning = false
	local bBarVisible = false

	for nbar, tSettings in pairs(self.tActionBarSettings) do
		bBarVisible = bBarVisible or (tSettings.bIsVisible and self.bDocked)
	end
	
	Event_FireGenericEvent("ShowActionBarShortcutDocked", bBarVisible)
end

function ActionBarShortcut:OnDockBtn(wndControl, wndHandler)
	self.bDocked = not self.bDocked
	self.bHorz = true
	
	for nbar, tActionBar in pairs(self.tActionBars) do
		tActionBar:Show(self.tActionBarSettings[nbar].bIsVisible and self.bDocked)
		tActionBar:FindChild("DockBtn"):SetCheck(not self.bDocked)
		tActionBar:FindChild("OrientationBtn"):SetCheck(not self.bHorz)
	end
	
	for nbar, tActionBar in pairs(self.tActionBarsHorz) do
		tActionBar:Show(self.tActionBarSettings[nbar].bIsVisible and not self.bDocked and self.bHorz)
		tActionBar:FindChild("DockBtn"):SetCheck(not self.bDocked)
		tActionBar:FindChild("OrientationBtn"):SetCheck(not self.bHorz)
	end
	
	for nbar, tActionBar in pairs(self.tActionBarsVert) do
		tActionBar:Show(self.tActionBarSettings[nbar].bIsVisible and not self.bDocked and not self.bHorz)
		tActionBar:FindChild("DockBtn"):SetCheck(not self.bDocked