<html>
	<head>
	<link rel="stylesheet" type="text/css" href="../../style.css">
	</head>
	<body>
	<h1>
		Global	</h1>
<a name="Events"/><hr><a name="AbilitiesWindowClose"><h3>Event</h3><br><h2>AbilitiesWindowClose</h2>
<h3>Description</h3>
<p>Fires when the Limited Action Set Builder window closes.</p>
<h3>Params</h3>
<ul>
<li><b>bAtTrainer</b><b> (Boolean)</b> - Returns whether or not the player is at a training station when the window was closed.
</ul>
<hr><a name="AbilityBookChange"><h3>Event</h3><br><h2>AbilityBookChange</h2>
<h3>Description</h3>
<p>Fires when a change is made to the Action Set Builder.</p>
<hr><a name="AcceptProgressInput"><h3>Event</h3><br><h2>AcceptProgressInput</h2>
<h3>Description</h3>
<p>Fires when CSIs turn player input on and off.  This is only used for the "Memory" CSI.</p>
<h3>Params</h3>
<ul>
<li><b>bShouldAccept</b><b> (Boolean)</b> - Whether or not the CSI will accept user input.
</ul>
<hr><a name="AccountEntitlementUpdate"><h3>Event</h3><br><h2>AccountEntitlementUpdate</h2>
<h3>Description</h3>
<p>Fires when a change is made to the current account's entitlements.</p>
<h3>Usage/Example</h3>
<pre>function AccountInventory:OnAccountEntitlementUpdate()
	if not self.wndMain or not self.wndMain:IsValid() then
		return
	end
	self:RefreshEntitlements()
end</pre>
<hr><a name="AccountInventoryUpdate"><h3>Event</h3><br><h2>AccountInventoryUpdate</h2>
<h3>Description</h3>
<p>Fires when the Account Inventory for the current account has changed.</p>
<hr><a name="AccountOperationResults"><h3>Event</h3><br><h2>AccountOperationResults</h2>
<h3>Params</h3>
<ul>
<li><b>eOperation</b><b> (Integer)</b>
<li><b>eResult</b><b> (CREDDExchangeLib.CodeEnumAccountOperationResult)</b> - The result of the operation.
</ul>
<hr><a name="AccountPendingItemsUpdate"><h3>Event</h3><br><h2>AccountPendingItemsUpdate</h2>
<h3>Description</h3>
<p>Fires when items that are pending for the current player's account have changed states.</p>
<hr><a name="AccountSupportTicketResult"><h3>Event</h3><br><h2>AccountSupportTicketResult</h2>
<h3>Description</h3>
<p>Informs the player if the ticket that they submitted successfully made it to the server or not.</p>
<h3>Params</h3>
<ul>
<li><b>channelGM</b><b> (Channel)</b> - The chat channel where the message will be displayed.
<li><b>bSuccess</b><b> (Boolean)</b> - Whether or not the ticket was successfully sent.
</ul>
<h3>Usage/Example</h3>
<pre>function ChatLog:OnAccountSupportTicketResult( channelSource, bSuccess )
	if( bSuccess ) then
		ChatSystemLib.PostOnChannel(ChatSystemLib.ChatChannel_System, Apollo.GetString("PlayerTicket_TicketSent"), "")
	else
		ChatSystemLib.PostOnChannel(ChatSystemLib.ChatChannel_System, Apollo.GetString("PlayerTicket_TicketFailed"), "")
	end
end</pre>
<hr><a name="AchievementGranted"><h3>Event</h3><br><h2>AchievementGranted</h2>
<h3>Description</h3>
<p>Fires when an achievement is completed.</p>
<h3>Params</h3>
<ul>
<li><b>achComplete</b><b> (<a href="../Classes/Achievement.htm">Achievement</a>)</b> - The achievement that was completed.
</ul>
<hr><a name="AchievementUpdated"><h3>Event</h3><br><h2>AchievementUpdated</h2>
<h3>Description</h3>
<p>Fires when an progress is made towards an achievement's objective.</p>
<h3>Params</h3>
<ul>
<li><b>achUpdated</b><b> (<a href="../Classes/Achievement.htm">Achievement</a>)</b> - The achievement that has been updated.
</ul>
<h3>Usage/Example</h3>
<pre>function Achievements:OnAchievementUpdated(achUpdated)
	if not self.wndMain then
		return
	end

	if self.wndMain:FindChild("RightSummaryScreen"):IsShown() then
		self:LoadSummaryScreen()
	else
		local wndRightScroll = self.wndMain:FindChild("RightScroll")
		local nVScrollPos = wndRightScroll:GetVScrollPos()
		self:BuildRightPanel()
		wndRightScroll:SetVScrollPos(nVScrollPos)
	end
	self.wndMain:FindChild("BGLeft:HeaderPointsNumber"):SetText(AchievementsLib.GetAchievementPoints())
	self.wndMain:FindChild("BGLeft:HeaderPoints"):SetText(String_GetWeaselString(Apollo.GetString("Achievement_OverallPoints")))
end</pre>
<hr><a name="ActionBarDescriptionSpell"><h3>Event</h3><br><h2>ActionBarDescriptionSpell</h2>
<h3>Description</h3>
<p>Displays information for a spell on the actionbar.</p>
<h3>Params</h3>
<ul>
<li><b>splDisplayed</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell currently being displayed.
<li><b>tEffects</b><b> (Table)</b> - A table containing information about the spell.
<ul>
<li><b>sprite</b><b> (String)</b> - The name of the sprite for the spell
<li><b>textString</b><b> (String)</b> - The spell's description
<li><b>countString</b><b> (String)</b> - The number of charges for the spell
<li><b>globalCooldown</b><b> (Boolean)</b> - Whether or not the spell is affected by the Global Cooldown
<li><b>cooldownPercent</b><b> (Float)</b>
<li><b>cooldownTime</b><b> (Integer)</b> - The number of milliseconds in the spell's cooldown
<li><b>casting</b><b> (Boolean)</b> - Whether or not the spell is being cast
<li><b>radarSweep</b><b> (Boolean)</b>
<li><b>popIcon</b><b> (Boolean)</b>
<li><b>readyBlingSprite</b><b> (Boolean)</b>
<li><b>blur</b><b> (Boolean)</b>
<li><b>shake</b><b> (Boolean)</b>
<li><b>shatterSprite</b><b> (Boolean)</b>
<li><b>itemUnavailable</b><b> (Boolean)</b>
<li><b>textColor</b><b> (<a href="../Classes/CColor.htm">CColor</a>)</b> - The color of the description text
<li><b>diffuse</b><b> (<a href="../Classes/CColor.htm">CColor</a>)</b> - The spell's diffuse color
<li><b>saturation</b><b> (Float)</b>
<li><b>lightOverlay</b><b> (Boolean)</b>
<li><b>diffused</b><b> (Boolean)</b>
<li><b>indicatorSprite</b><b> (Boolean)</b>
</ul>
<li><b>tReasons</b><b> (Table)</b> - A list of flags that may be referenced by Lua.
</ul>
<hr><a name="ActionBarNonSpellShortcutAddFailed"><h3>Event</h3><br><h2>ActionBarNonSpellShortcutAddFailed</h2>
<h3>Description</h3>
<p>Fires when a non-spell fails to be placed on the action bar.</p>
<h3>Usage/Example</h3>
<pre>function FloatText:OnActionBarNonSpellShortcutAddFailed()
	local strMessage = Apollo.GetString("FloatText_ActionBarAddFail")
	self:OnSpellCastFailed( LuaEnumMessageType.GenericPlayerInvokedError, nil, GameLib.GetControlledUnit(), GameLib.GetControlledUnit(), strMessage )
end</pre>
<hr><a name="ActionSetError"><h3>Event</h3><br><h2>ActionSetError</h2>
<h3>Description</h3>
<p>Fires when the player attempts to save an invalid action set.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (ActionSetLib.CodeEnumLimitedActionSetResult)</b> - The message describing why there is an error in the current action set.
</ul>
<h3>Usage/Example</h3>
<pre>function Abilities:OnActionSetError(eResult)
	local strMessage = nil	
	if eResult == ActionSetLib.CodeEnumLimitedActionSetResult.InVoid then
		strMessage = Apollo.GetString("ActionSet_Error_InTheVoid")
	end

	if strMessage then		
		self:BuildWindow() -- This can happen after the set has "successfully" closed, so bring it back up if closed
		self:HelperShowError(strMessage)
	end
end</pre>
<hr><a name="ActivateCCStateStun"><h3>Event</h3><br><h2>ActivateCCStateStun</h2>
<h3>Description</h3>
<p>Fires when the player is stunned.</p>
<h3>Params</h3>
<ul>
<li><b>eChosenDirection</b><b> (Unit.CodeEnumCCStateStunVictimGameplay)</b> - The direction the player needs to press to get out of the CC State.
</ul>
<h3>Usage/Example</h3>
<pre>function CrowdControlGameplay:OnActivateCCStateStun(eChosenDirection)
	self.wndProgress = Apollo.LoadForm(self.xmlDoc, "ButtonHit_Progress", nil, self)
	self.wndProgress:Show(true) -- to get the animation
	self.wndProgress:FindChild("TimeRemainingContainer"):Show(false)

	local bLeft 	= eChosenDirection == Unit.CodeEnumCCStateStunVictimGameplay.Left
	local bUp 		= eChosenDirection == Unit.CodeEnumCCStateStunVictimGameplay.Forward
	local bRight 	= eChosenDirection == Unit.CodeEnumCCStateStunVictimGameplay.Right
	local bDown 	= eChosenDirection == Unit.CodeEnumCCStateStunVictimGameplay.Backward

	self.wndProgress:FindChild("ProgressButtonArtLeft"):SetText(GameLib.GetKeyBinding("StunBreakoutLeft"))
	self.wndProgress:FindChild("ProgressButtonArtUp"):SetText(GameLib.GetKeyBinding("StunBreakoutUp"))
	self.wndProgress:FindChild("ProgressButtonArtRight"):SetText(GameLib.GetKeyBinding("StunBreakoutRight"))
	self.wndProgress:FindChild("ProgressButtonArtDown"):SetText(GameLib.GetKeyBinding("StunBreakoutDown"))

	-- Disabled is invisible text, which will hide the button text
	self.wndProgress:FindChild("ProgressButtonArtLeft"):Enable(bLeft)
	self.wndProgress:FindChild("ProgressButtonArtUp"):Enable(bUp)
	self.wndProgress:FindChild("ProgressButtonArtRight"):Enable(bRight)
	self.wndProgress:FindChild("ProgressButtonArtDown"):Enable(bDown)

	if not bLeft and not bUp and not bRight and not bDown then -- Error Case
		self:OnRemoveCCStateStun()
		return
	end

	self:OnCalculateTimeRemaining()
end</pre>
<hr><a name="AddSpellShortcut"><h3>Event</h3><br><h2>AddSpellShortcut</h2>
<h3>Description</h3>
<p>Fires whenever a spell is granted to the player as part of a quest, challenge, public event, or path mission.</p>
<h3>Params</h3>
<ul>
<li><b>splDisplayed</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that is granted to the player.
<li><b>eReason</b><b> (Integer)</b> - The reason the spell was granted to the player.
<li><b>idSource</b><b> (Integer)</b> - The id of the quest, quest objective, challenge, public event, public event objective, or path mission that granted the spell to the player.
</ul>
<hr><a name="AlertMailInfo"><h3>Event</h3><br><h2>AlertMailInfo</h2>
<h3>Description</h3>
<p>Fires when the player gets new mail.</p>
<h3>Params</h3>
<ul>
<li><b>tMessageInfo</b><b> (Table)</b> - A table containing information about the new piece of mail.
<ul>
<li><b>strId</b><b> (String)</b> - A string with the mail's unique id, in string format.
<li><b>strSenderName</b><b> (String)</b> - The name of the player who sent the mail.
<li><b>strSubject</b><b> (String)</b> - The subject of the mail.
<li><b>strBody</b><b> (String)</b> - The body of the email.
<li><b>strBodyAML</b><b> (String)</b> - The body of the email, along with any formatting strings.  This element is not present on every mail message.
<li><b>fDeliveryTime</b><b> (Float)</b> - The number of seconds until the mail is received.
<li><b>fExpirationTime</b><b> (Float)</b> - The number of seconds until the mail expires.
<li><b>monCOD</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount of money that must be paid before any items can be retreived.
<li><b>monGift</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount of money sent to the recipient.
<li><b>bIsRead</b><b> (Boolean)</b> - Determines whether or not the piece of mail has been read.
<li><b>bIsSaved</b><b> (Boolean)</b> - Determines if the player has archived this piece of mail or not.
<li><b>bIsReturnable</b><b> (Boolean)</b> - Determines whether or not the player can return the piece of mail to the sender.  This will typically be false for NPCs or CSRs.
<li><b>eSenderType</b><b> (Integer)</b> - A number representing the source of the mail.  These values line up with the MailSystem.EmailType set of constants.
<li><b>arAttachments</b><b> (Array of Table)</b> - A table containing information on the items that are attached to the mail.
<ul>
<li><b>itemAttached</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item object that is attached to the piece of mail
<li><b>nStackCount</b><b> (Integer)</b> - The number of items in the stack
<li><b>nServerIndex</b><b> (Integer)</b> - The index of the attachment
</ul>
</ul>
</ul>
<hr><a name="AlternateTargetUnitChanged"><h3>Event</h3><br><h2>AlternateTargetUnitChanged</h2>
<h3>Description</h3>
<p>Fires when the player's focus target changes.</p>
<h3>Params</h3>
<ul>
<li><b>unitFocus</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player's new focus target.
</ul>
<h3>Usage/Example</h3>
<pre>function UnitFrames:OnAlternateTargetUnitChanged(unitTarget)
	self.luaFocusFrame:SetTarget(unitTarget)
end</pre>
<hr><a name="AppearanceChanged"><h3>Event</h3><br><h2>AppearanceChanged</h2>
<hr><a name="ApplicationWindowSizeChanged"><h3>Event</h3><br><h2>ApplicationWindowSizeChanged</h2>
<hr><a name="ApplyCCState"><h3>Event</h3><br><h2>ApplyCCState</h2>
<h3>Description</h3>
<p>Fires when a CC state is applied to a unit.</p>
<h3>Params</h3>
<ul>
<li><b>eState</b><b> (Unit.CodeEnumCCState)</b> - A number representing the CC applied to the player.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that is affected by the CC state.
</ul>
<hr><a name="AuctionWindowClose"><h3>Event</h3><br><h2>AuctionWindowClose</h2>
<h3>Description</h3>
<p>Fires whent he player moves out of range of an Auctioneer NPC.</p>
<h3>Usage/Example</h3>
<pre>function MarketplaceAuction:OnDocumentReady()
                Apollo.RegisterEventHandler("AuctionWindowClose", 			"OnDestroy", self)
end

function MarketplaceAuction:OnDestroy()
	if self.wndMain and self.wndMain:IsValid() then
		self:OnSearchClearBtn()
		self.wndMain:Destroy()
	end

	Event_CancelAuctionhouse()
end</pre>
<hr><a name="AvailableMail"><h3>Event</h3><br><h2>AvailableMail</h2>
<h3>Description</h3>
<p>Fires mail is added to the player's inbox.</p>
<h3>Params</h3>
<ul>
<li><b>arMail</b><b> (Integer)</b> - An array of mail IDs for the mail added to the player's inbox.
<li><b>bIsNewMail</b><b> (Boolean)</b> - Whether or not the messages added to the player's inbox are "new".
</ul>
<h3>Usage/Example</h3>
<pre>function Mail:OnAvailableMail(arItems, bNewMail)
	if not self.wndMain:IsVisible() then
		self:CalculateMailAlert()
		return
	end

	self:PopulateList()
end</pre>
<hr><a name="BankSlotPurchased"><h3>Event</h3><br><h2>BankSlotPurchased</h2>
<h3>Description</h3>
<p>Fires when the player successfully purchases a bank slot.</p>
<h3>Usage/Example</h3>
<pre>function BankViewer:OnBankSlotPurchased()
	self.wndMain:FindChild("BankTitleText"):SetText(Apollo.GetString("Bank_BuySuccess"))
	Apollo.CreateTimer("BankViewer_NewBagPurchasedAlert", 12, false)
	self:Build()
end</pre>
<hr><a name="Breath_FlashEvent"><h3>Event</h3><br><h2>Breath_FlashEvent</h2>
<h3>Description</h3>
<p>Fires when the player has run out of breath and starts taking damage.</p>
<h3>Params</h3>
<ul>
<li><b>fHealthPercentRemaining</b><b> (Float)</b> - The percentage of remaining health the player has.
</ul>
<h3>Usage/Example</h3>
<pre>function Hazards:OnDocumentReady()
                Apollo.RegisterEventHandler("Breath_FlashEvent", "OnFlash", self)
end

function Hazards:OnFlash( nHealthPercentage )
	self.wndSuffocatingProgress:SetSprite("sprNp_WhiteBarFlash")
end</pre>
<hr><a name="BreathChanged"><h3>Event</h3><br><h2>BreathChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's breath meter should change value.</p>
<h3>Params</h3>
<ul>
<li><b>nCurrentBreath</b><b> (Integer)</b> - The player's current breath.
<li><b>nMaxBreath</b><b> (Integer)</b> - The maximum amount of breath the character can have.
</ul>
<hr><a name="BuybackItemsUpdated"><h3>Event</h3><br><h2>BuybackItemsUpdated</h2>
<h3>Description</h3>
<p>Fires when there is a change in the list of Buyback items at a vendor.</p>
<hr><a name="CanVacuumChange"><h3>Event</h3><br><h2>CanVacuumChange</h2>
<h3>Description</h3>
<p>Fires when the player's ability to vacuum nearby loot has changed due to loot dropping, being vacuumed, or being removed from the world.</p>
<h3>Params</h3>
<ul>
<li><b>bCanVacuum</b><b> (Boolean)</b> - Whether or not the ability to vacuum is active.
</ul>
<h3>Usage/Example</h3>
<pre>function HUDAlerts:OnCanVacuumChanged(bCanVacuum)
	
local strKeybind = GameLib.GetKeyBinding("VacuumLoot")
	
self.wndLootAlert:FindChild("AlertItemKeybindText"):SetText(strKeybind)
	
self.wndLootAlert:FindChild("AlertItemKeybind"):Show(strKeybind ~= Apollo.GetString("HUDAlert_Unbound"))

	
if not self.wndLootAlert:IsShown() and bCanVacuum then
		
self.wndLootAlert:Show(bCanVacuum, true)
		
self.wndLootAlert:FindChild("AlertItemTransition"):SetSprite("sprAlert_SectionGlowRingFlash")
	
else
		
self.wndLootAlert:Show(bCanVacuum)

	
end

	
self:OnUpdateInventory() -- Check Full Bag Indicator

	
self.wndAlertContainer:ArrangeChildrenHorz(0)

end</pre>
<hr><a name="CasterResurrectedPlayer"><h3>Event</h3><br><h2>CasterResurrectedPlayer</h2>
<h3>Description</h3>
<p>Fires when the current player is revived by another player.</p>
<h3>Params</h3>
<ul>
<li><b>strCasterName</b><b> (String)</b> - The name of the player that resurrected the player.
</ul>
<hr><a name="ChallengeAreaRestriction"><h3>Event</h3><br><h2>ChallengeAreaRestriction</h2>
<h3>Description</h3>
<p>Fires when the player attempts to start/retry a challenge while they are outside of the challenge's starting area.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The ID number for the challenge.
<li><b>strHeader</b><b> (String)</b> - The challenge's title.
<li><b>strDescription</b><b> (String)</b> - The message that should be displayed so the player knows they are outside of the challenge area.
<li><b>fDuration</b><b> (Float)</b> - The length of time (in seconds) that the message is displayed.
</ul>
<hr><a name="ChallengeCompletedSound"><h3>Event</h3><br><h2>ChallengeCompletedSound</h2>
<h3>Description</h3>
<p>Fires whenever we should play the sound for a completed challenge.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge that was completed.
</ul>
<hr><a name="ChallengeCooldownActive"><h3>Event</h3><br><h2>ChallengeCooldownActive</h2>
<h3>Description</h3>
<p>Fires when the player attempts to start a challenge that is on cooldown.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge.
<li><b>strHeader</b><b> (String)</b> - The challenge's title.
<li><b>strErrorMsg</b><b> (String)</b> - The error message that should be shown for this event.
<li><b>nDuration</b><b> (Integer)</b> - The duration that the error message should be shown for (in milliseconds).
</ul>
<hr><a name="ChallengeFailArea"><h3>Event</h3><br><h2>ChallengeFailArea</h2>
<h3>Description</h3>
<p>Fires when a challenge fails because the player left the area.</p>
<h3>Params</h3>
<ul>
<li><b>chalFailed</b><b> (Challenge)</b> - The challenge that was failed.
<li><b>strHeader</b><b> (String)</b> - The header for the "Fail" notification.
<li><b>strDescription</b><b> (String)</b> - The body of the "Fail" notification.
<li><b>nDuration</b><b> (Integer)</b> - How long the "Fail" notification should be shown (in milliseconds).
</ul>
<hr><a name="ChallengeFailGeneric"><h3>Event</h3><br><h2>ChallengeFailGeneric</h2>
<h3>Description</h3>
<p>Fires if a player fails a challenge for reasons other than time or leaving the area.</p>
<h3>Params</h3>
<ul>
<li><b>chalFailed</b><b> (Challenge)</b> - The challenge that the player failed.
<li><b>strHeader</b><b> (String)</b> - The header for the "Fail" notification.
<li><b>strDescription</b><b> (String)</b> - The body of the "Fail" notification.
<li><b>nDuration</b><b> (Integer)</b> - How long the "Fail" notification should be shown (in milliseconds).
</ul>
<hr><a name="ChallengeFailSound"><h3>Event</h3><br><h2>ChallengeFailSound</h2>
<h3>Description</h3>
<p>Fires when the "Fail" sound should be played for a challenge.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number for the challenge that the sound is played for.
</ul>
<hr><a name="ChallengeFailTime"><h3>Event</h3><br><h2>ChallengeFailTime</h2>
<h3>Description</h3>
<p>Fires when the player fails a challenge due to time running out before any tiers were reached.</p>
<h3>Params</h3>
<ul>
<li><b>chalFailed</b><b> (Challenge)</b> - The challenge that was failed.
<li><b>strHeader</b><b> (String)</b> - The header for the "Fail" notification.
<li><b>strDescription</b><b> (String)</b> - The body of the "Fail" notification.
<li><b>nDuration</b><b> (Integer)</b> - How long the "Fail" notification should be displayed (in milliseconds).
</ul>
<hr><a name="ChallengeRewardListReady"><h3>Event</h3><br><h2>ChallengeRewardListReady</h2>
<h3>Description</h3>
<p>Fires when we have the information we need to populate the challenge's rewards.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The challenge that was completed.
<li><b>nRewardTier</b><b> (Integer)</b> - The challenge tier that the player completed.  1 is Bronze, 2 is Silver, 3 is Gold.
</ul>
<hr><a name="ChallengeRewardReady"><h3>Event</h3><br><h2>ChallengeRewardReady</h2>
<h3>Description</h3>
<p>Fires when the challenge's reward has been determined.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Challenge)</b> - The id number of the challenge that was completed.
<li><b>nReward</b><b> (Integer)</b> - The reward number that the player received from the challenge.
</ul>
<h3>Remarks</h3>
<p>This is used in the stock UI to show where the roulette wheel lands after completing a challenge.</p>
<hr><a name="ChallengeShared"><h3>Event</h3><br><h2>ChallengeShared</h2>
<h3>Description</h3>
<p>Fired when a challenge is shared with the player.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge being shared.
<li><b>idSharingPlayer</b><b> (Integer)</b> - The id number of the player who shared the challenge.
<li><b>nTimeToAccept</b><b> (Integer)</b> - The amount of time the player has to accept the challenge (in seconds).
</ul>
<hr><a name="ChallengeShareTimedOut"><h3>Event</h3><br><h2>ChallengeShareTimedOut</h2>
<h3>Description</h3>
<p>Fires when the player runs out of time to accept a shared challenge.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge that was shared.
</ul>
<hr><a name="ChallengeTierAchieved"><h3>Event</h3><br><h2>ChallengeTierAchieved</h2>
<h3>Description</h3>
<p>Fires whenever the player completes a challenge tier.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge.
<li><b>nTierCompleted</b><b> (Integer)</b> - The challenge tier that was completed.  1 = Bronze, 2 = Silver, 3 = Gold.
</ul>
<hr><a name="ChallengeUpdated"><h3>Event</h3><br><h2>ChallengeUpdated</h2>
<h3>Description</h3>
<p>Fires whenever progress is made on a challenge, when the player leaves and re-enters a challenge area, and whenever the player selects a challenge reward to receive their tier roll bonus.</p>
<h3>Params</h3>
<ul>
<li><b>idChallenge</b><b> (Integer)</b> - The id number of the challenge that was updated.
</ul>
<hr><a name="ChangeWorld"><h3>Event</h3><br><h2>ChangeWorld</h2>
<h3>Description</h3>
<p>Fires when the player is moved to a different zone or instance.</p>
<hr><a name="CharacterCreated"><h3>Event</h3><br><h2>CharacterCreated</h2>
<h3>Description</h3>
<p>Fires when the player's character is first placed in the world.</p>
<h3>Remarks</h3>
<p>Note: This is not fired if the UI is reloaded.<br>
<br>
Also Note: All of the character's information may not be populated in other systems when the character is created.  This is an important event, but extra checks, such as GameLib.IsCharacterLoaded() could prove useful here.</p>
<hr><a name="CharacterEldanAugmentationsReset"><h3>Event</h3><br><h2>CharacterEldanAugmentationsReset</h2>
<hr><a name="CharacterEldanAugmentationsUpdated"><h3>Event</h3><br><h2>CharacterEldanAugmentationsUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player selects an AMP or purchases an AMP reset.</p>
<hr><a name="CharacterEntitlementUpdate"><h3>Event</h3><br><h2>CharacterEntitlementUpdate</h2>
<hr><a name="CharacterFlagsUpdated"><h3>Event</h3><br><h2>CharacterFlagsUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the character's flags are updated, such as when the player chooses to ignore duel requests.</p>
<hr><a name="CharacterUnlockedInlaidEldanAugmentation"><h3>Event</h3><br><h2>CharacterUnlockedInlaidEldanAugmentation</h2>
<h3>Description</h3>
<p>Fires whenever the player unlocks a new AMP.</p>
<hr><a name="ChatAccountTellFailed"><h3>Event</h3><br><h2>ChatAccountTellFailed</h2>
<h3>Description</h3>
<p>Fires whenever the player tries to send an account whisper to an invalid player.</p>
<h3>Params</h3>
<ul>
<li><b>chanWhisper</b><b> (<a href="../Classes/ChatChannelLib.htm">ChatChannelLib</a>)</b> - The chat channel that the player tried to whisper from.  This should always be the "Account Whisper" channel.
<li><b>strName</b><b> (String)</b> - The name of the player who was intended to receive the account whisper.
</ul>
<hr><a name="ChatAction"><h3>Event</h3><br><h2>ChatAction</h2>
<h3>Description</h3>
<p>Fires whenever an action is taken on a custom chat channel.  These actions include passing the owner of the channel to another player, adding or removing the Moderator status from a player, muting and unmuting a player, kicking a player from the channel, and adding/removing a password to the channel.</p>
<h3>Params</h3>
<ul>
<li><b>channelSource</b><b> (<a href="../Classes/ChatChannelLib.htm">ChatChannelLib</a>)</b> - The channel that the action was applied to.
<li><b>eAction</b><b> (Integer)</b> - The action that fired the event.  This value lines up with the ChatSystemLib.ChatChannelAction set of constants.
<li><b>strActor</b><b> (String)</b> - The player who performed the action.
<li><b>strActedOn</b><b> (String)</b> - The target of the action.
</ul>
<hr><a name="ChatFlag"><h3>Event</h3><br><h2>ChatFlag</h2>
<hr><a name="ChatJoin"><h3>Event</h3><br><h2>ChatJoin</h2>
<h3>Description</h3>
<p>Fires when the player joins a chat channel.</p>
<h3>Params</h3>
<ul>
<li><b>chanJoined</b><b> (<a href="../Classes/ChatChannelLib.htm">ChatChannelLib</a>)</b> - The chat channel that the character just joined.
</ul>
<hr><a name="ChatJoinResult"><h3>Event</h3><br><h2>ChatJoinResult</h2>
<h3>Description</h3>
<p>Fires whenever the player fails to join a channel.</p>
<h3>Params</h3>
<ul>
<li><b>chanJoin</b><b> (<a href="../Classes/ChatChannelLib.htm">ChatChannelLib</a>)</b> - The channel that the player attempted to join.
<li><b>eResult</b><b> (Integer)</b> - The reason why the player failed to join the channel.  This value lines up with the ChatSystemLib.ChatChannelResult system of int constants.
</ul>
<hr><a name="ChatLeave"><h3>Event</h3><br><h2>ChatLeave</h2>
<h3>Description</h3>
<p>Fires when the player leaves or is kicked from a chat channel.</p>
<h3>Params</h3>
<ul>
<li><b>chanLeft</b><b> (<a href="../Classes/ChatChannelLib.htm">ChatChannelLib</a>)</b> - The channel that the player left.
<li><b>bKicked</b><b> (Boolean)</b> - Whether or not the player was kicked from the channel
<li><b>bBanned</b><b> (Boolean)</b> - Whether or not the player was banned from the channel.
</ul>
<hr><a name="ChatList"><h3>Event</h3><br><h2>ChatList</h2>
<h3>Description</h3>
<p>Fired in response to the ChatChannel:RequestMembers() function.  Passes the channel that was polled for its members.</p>
<h3>Params</h3>
<ul>
<li><b>channelSource</b><b> (ChatChannel)</b> - The channel that is being polled for its members.
</ul>
<hr><a name="ChatMessage"><h3>Event</h3><br><h2>ChatMessage</h2>
<h3>Description</h3>
<p>Fires when a message is sent on a chat channel</p>
<h3>Params</h3>
<ul>
<li><b>channelSource</b><b> (ChatChannel)</b> - The channel where the message should be displayed.
<li><b>tMessageInfo</b><b> (Table)</b> -  
<ul>
<li><b>bAutoResponse</b><b> (Boolean)</b> - Whether or not the message is an auto response (from messaging an afk player for example)
<li><b>bGM</b><b> (Boolean)</b> - Whether the message was sent by a GM or not.
<li><b>bSelf</b><b> (Boolean)</b> - Whether the message was sent by the player or not.
<li><b>strSender</b><b> (String)</b> - The name of the source of the message.
<li><b>strRealmName</b><b> (String)</b> - The name of the sender's home realm.
<li><b>nPresenceState</b><b> (Integer)</b> - The sender's status.  This value lines up with the FriendshipLib.AccountPresenceState set of constants.  Returns FriendshipLib.AccountPresenceStateAvailable if it is not a player.
<li><b>arMessageSegments</b><b> (Table)</b> - This is currently using the incorrect prefix.  It is a table with different types in it.
<ul>
<li><b>bAlien</b><b> (Boolean)</b> - Whether or not the text is flagged to show alien font.
<li><b>bProfanity</b><b> (Boolean)</b> - Whether or not the text contains profanity.
<li><b>bRoleplay</b><b> (Boolean)</b> - Whether or not the text is flagged as Role Play text.
<li><b>strText</b><b> (String)</b> - The text that is displayed.
</ul>
<li><b>unitSource</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that sent the message.  This variable does not exist for messages not sent by a unit, such as system messages.
<li><b>bShowChatBubble</b><b> (Boolean)</b> - Whether or not a chat bubble should be shown above the character.
<li><b>bCrossFaction</b><b> (Boolean)</b> - Whether or not the message came from a character of the other faction.
<li><b>nReportId</b><b> (Integer)</b> - The id that corresponds with the message.  This value is used for chat reporting purposes.
</ul>
</ul>
<hr><a name="ChatReply"><h3>Event</h3><br><h2>ChatReply</h2>
<h3>Description</h3>
<p>Fires when the player uses the ChatReply keybinding.</p>
<hr><a name="ChatResult"><h3>Event</h3><br><h2>ChatResult</h2>
<h3>Description</h3>
<p>Fires when there is an error with a chat message that the player tried to send.</p>
<h3>Params</h3>
<ul>
<li><b>channelSource</b><b> (ChatChannel)</b> - The channel where the original message was sent.
<li><b>eResult</b><b> (Integer)</b> - The error with the message that was sent.  This value lines up with the ChatSystemLib.ChatChannelResult constants.
</ul>
<hr><a name="ChatReWhisper"><h3>Event</h3><br><h2>ChatReWhisper</h2>
<h3>Description</h3>
<p>Fires when the Chat Re-Whisper keybinding is pressed.</p>
<hr><a name="ChatTellFailed"><h3>Event</h3><br><h2>ChatTellFailed</h2>
<h3>Description</h3>
<p>Fires whenever the player makes an unsuccessful tell</p>
<h3>Params</h3>
<ul>
<li><b>channelSource</b><b> (ChatChannel)</b> - The channel that the player attempted to use for the failed tell.  This is likely the Whisper channel.
<li><b>strName</b><b> (String)</b> - The name of the player you attempted to send a whisper to.
</ul>
<hr><a name="ChatZoneChange"><h3>Event</h3><br><h2>ChatZoneChange</h2>
<h3>Description</h3>
<p>Fires when the Zone channel changes, such as when a player moves from one zone to another.</p>
<h3>Params</h3>
<ul>
<li><b>strNewZone</b><b> (String)</b> - The name of the new zone that the player has moved into.
</ul>
<hr><a name="CinematicsCancel"><h3>Event</h3><br><h2>CinematicsCancel (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>nParam</b><b> (Integer)</b>
</ul>
<hr><a name="CinematicsNotify"><h3>Event</h3><br><h2>CinematicsNotify (Deprecated)</h2>
<h3>Description</h3>
<p>Notifies the player that a cinematic is starting</p>
<h3>Params</h3>
<ul>
<li><b>strMessage</b><b> (String)</b> - The notification message that should be displayed.
<li><b>idParam</b><b> (Integer)</b> - The message's id.
</ul>
<hr><a name="CityDirectionClear"><h3>Event</h3><br><h2>CityDirectionClear</h2>
<h3>Description</h3>
<p>Removes the specified direction marker from the map.</p>
<h3>Params</h3>
<ul>
<li><b>idDirection</b><b> (Integer)</b> - The ID number for the direction that should be cleared.
</ul>
<hr><a name="CityDirectionMarked"><h3>Event</h3><br><h2>CityDirectionMarked</h2>
<h3>Description</h3>
<p>Fires when a city direction marker is displayed on the map / minimap</p>
<h3>Params</h3>
<ul>
<li><b>tLocationInfo</b><b> (Table)</b>
<ul>
<li><b>idDestination</b><b> (Integer)</b> - The direction marker's ID.
<li><b>eType</b><b> (GameLib.CityDirectionType)</b> - The type of NPC that the player is being guided towards.
<li><b>strName</b><b> (String)</b> - The name of the direction marker's destination.
<li><b>tLoc</b><b> (Table)</b>
<ul>
<li><b>x</b><b> (Float)</b> - The x coordinate of the city direction's destination.
<li><b>y</b><b> (Float)</b> - The y coordinate of the city direction's destination.
<li><b>z</b><b> (Float)</b> - The z coordinate of the city direction's destination
</ul>
</ul>
</ul>
<hr><a name="CityDirectionsClose"><h3>Event</h3><br><h2>CityDirectionsClose</h2>
<h3>Description</h3>
<p>Fires when the City Directions UI closes.</p>
<hr><a name="CityDirectionsList"><h3>Event</h3><br><h2>CityDirectionsList</h2>
<h3>Description</h3>
<p>Fires when the player interacts with a guard in a capital city.</p>
<hr><a name="ClearSpellThreshold"><h3>Event</h3><br><h2>ClearSpellThreshold</h2>
<h3>Description</h3>
<p>Fires when the "Window of Opportunity" for spells with multiple uses (ex. Stalker's Nano Field, Esper's Psychic Frenzy) should close.  This can happen either because the timer ran out, the player used another ability, or the player activated the max number of times.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The id number of the spell whose threshold needs to close.
</ul>
<hr><a name="CloseCraftingWindow"><h3>Event</h3><br><h2>CloseCraftingWindow</h2>
<h3>Description</h3>
<p>Fired when the UI explicity calls the Event_CloseCraftingWindow() function.</p>
<hr><a name="CloseTradeskillTrainerWindow"><h3>Event</h3><br><h2>CloseTradeskillTrainerWindow</h2>
<h3>Description</h3>
<p>Fired if the player interacts with another unit while interacting with a tradeskill trainer.  It's also fired when the Event_CloseTradeskillTrainerWindow() function is called in Lua.</p>
<hr><a name="CloseVendorWindow"><h3>Event</h3><br><h2>CloseVendorWindow</h2>
<h3>Description</h3>
<p>Fired when the player interacts with another unit while the Vendor UI is up, moves out of range of a vendor while the Vendor UI is open, or the Event_CloseVendorWindow() function is explicitly called in Lua.</p>
<hr><a name="ColorChanged"><h3>Event</h3><br><h2>ColorChanged</h2>
<h3>Description</h3>
<p>Fired whent he player selects a color from the ColorPicker window</p>
<h3>Params</h3>
<ul>
<li><b>crNewColor</b><b> (<a href="../Classes/CColor.htm">CColor</a>)</b> - The color that was selected when this event was fired.
</ul>
<hr><a name="CombatFloaters_Configure"><h3>Event</h3><br><h2>CombatFloaters_Configure (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when the player uses the /cfconfig command in chat</p>
<hr><a name="CombatLogAbsorption"><h3>Event</h3><br><h2>CombatLogAbsorption</h2>
<h3>Description</h3>
<p>Fires whenever a unit is granted an absorb shield.</p>
<h3>Params</h3>
<ul>
<li><b>tCombatLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who used the ability.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who controls the caster.  This variable only exists if the caster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit affected by the ability.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who controls the target.  This only exists if the target is a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The effect of the abiility on the target.  This will most likely be Hit in this case.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was used.
<li><b>nAmount</b><b> (Integer)</b> - The amount of damage that the absorb shield will mitigate.
</ul>
</ul>
<hr><a name="CombatLogBuildSwitch"><h3>Event</h3><br><h2>CombatLogBuildSwitch</h2>
<h3>Description</h3>
<p>Fires when the player switches to a different action set.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who changed their build.  Since this event shold only be fired for the current player, this should always be them.
<li><b>nNewSpecIndex</b><b> (Integer)</b> - The index of player's new spec.
</ul>
</ul>
<hr><a name="CombatLogCCState"><h3>Event</h3><br><h2>CombatLogCCState</h2>
<h3>Description</h3>
<p>Fires whenever a player enters a crowd control state.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that cast the ability that applied the CC state.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns the unitCaster.  This variable will only exist if the unit that applied the state is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the CC state was applied to.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns the target of the ability.  This variable only exists if the target was a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - A number that represents the effect of the ability on the player.  This will most likely be either Hit or Avoid.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was used to apply the CC state on the player.
<li><b>eState</b><b> (Unit.CodeEnumCCState)</b> - The type of CC that the spell should cause.
<li><b>bRemoved</b><b> (Boolean)</b> - If this is true, then the crowd control state is removed from the player.  If not, then it is added to the player.
<li><b>strState</b><b> (String)</b> - The name of the CC state.
<li><b>strTriggerCapCategory</b><b> (String)</b> - The name of the CC category this effect falls under.<br>
<br>
Results can be:<br>
Stun<br>
Root<br>
Pacify<br>
Blind<br>
Taunt<br>
Knockdown<br>
Tether<br>
Disorient<br>
Subdue<br>
Pull<br>
Knockback<br>
Snare<br>
Position Switch<br>
Pushback<br>
<br>
Not every CC State has a dimminishing returns category.
<li><b>bHideFloater</b><b> (Boolean)</b> - Determines whether the floater for the state should be hidden.  This variable will only be set to true or nil.
<li><b>nInterruptArmorHit</b><b> (Integer)</b> - The amount of interrupt armor removed by the spell.
<li><b>eResult</b><b> (CombatFloaterLib.CodeEnumCCStateApplyRulesResult)</b> - The result of trying to apply the CC state to the unit.
</ul>
</ul>
<hr><a name="CombatLogCCStateBreak"><h3>Event</h3><br><h2>CombatLogCCStateBreak</h2>
<h3>Description</h3>
<p>Fires when the player breaks out of a CC state.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that broke out of their CC state.  This should always be the current player.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that controls the unit that broke their CC state.  This should only be returned if a pet broke out of its crowd control state.
<li><b>eState</b><b> (Unit.CodeEnumCCState)</b> - The type of CC that the unitCaster broke out of.
<li><b>strState</b><b> (String)</b> - The name of the CC state that the unit broke out of.
</ul>
</ul>
<hr><a name="CombatLogCrafting"><h3>Event</h3><br><h2>CombatLogCrafting</h2>
<h3>Description</h3>
<p>Fires when the player finishes crafting an item using a non-simple craft schematic.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who crafted the item.  This should always be the current player.
<li><b>itemCrafted</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player crafted.
</ul>
</ul>
<hr><a name="CombatLogDamage"><h3>Event</h3><br><h2>CombatLogDamage</h2>
<h3>Description</h3>
<p>Fires when a unit takes damage.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who used the spell that caused the damage.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player that owns the unit who dealt the damage.  This only applies if the  unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The target of the ability.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns the unitTarget.  This only exists if unitTarget is a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The effect of the ability on its target.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that caused the damage.
<li><b>nDamageAmount</b><b> (Integer)</b> - The amount of damage done by the spell.
<li><b>nRawDamage</b><b> (Integer)</b> - Damage amount that is directly related to ???
<li><b>eDamageType</b><b> (GameLib.CodeEnumDamageType)</b> - The type of damage that was done.
<li><b>nShield</b><b> (Integer)</b> - The amount of damage done to the unit's shield.
<li><b>nAbsorbtion</b><b> (Integer)</b> - The amount of damage done to the player's absorption shield.
<li><b>nOverkill</b><b> (Integer)</b> - The amount of damage done to the unit over their remaining HP.
<li><b>bTargetVulnerable</b><b> (Boolean)</b> - Whether or not the target is in the vulnerable state.
<li><b>bTargetKilled</b><b> (Boolean)</b> - Whether or not the unitTarget was killed by the attack.
<li><b>bPeriodic</b><b> (Boolean)</b> - Whether the damage was caused by an ability that does periodic damage.
<li><b>eEffectType</b><b> (Integer)</b> - The spell's effect type.  The values for this enum are not currently exposed in the Apollo API.
</ul>
</ul>
<hr><a name="CombatLogDatacube"><h3>Event</h3><br><h2>CombatLogDatacube</h2>
<h3>Description</h3>
<p>Fires when the player interacts with a datacube, journal, or TFBTF entry in the world.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that activated the datacube.  This will always be the current player.
<li><b>eDatacubeType</b><b> (Integer)</b> - The type of datacube.  This can be either DatacubeLib.DatacubeType_Datacube, DatacubeLib.DatacubeType_Chronicle (Tales from Beyond the Fringe), or DatacubeLib.DatacubeType_Journal.
<li><b>bHasPieces</b><b> (Boolean)</b> - Whether or not the datacube has multiple parts.  This should only be true for Tales from Beyond the Fringe. 
</ul>
</ul>
<hr><a name="CombatLogDeath"><h3>Event</h3><br><h2>CombatLogDeath</h2>
<h3>Description</h3>
<p>Fires when the player dies.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that died.  This will always be the current player.
</ul>
</ul>
<hr><a name="CombatLogDeflect"><h3>Event</h3><br><h2>CombatLogDeflect</h2>
<h3>Description</h3>
<p>Fires when a unit deflects an attack.</p>
<h3>Params</h3>
<ul>
<li><b>tLogInfo</b><b> (Table)</b>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that used the spell.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitCaster.  This variable only exists if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that deflected the spell.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitTarget.  This only exists if unitTarget is a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The result of the attack.  This should always be GameLib.CodeEnumCombatResult.Avoid
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The ability that was used in the attack.
</ul>
</ul>
<hr><a name="CombatLogDelayDeath"><h3>Event</h3><br><h2>CombatLogDelayDeath</h2>
<h3>Description</h3>
<p>Fires when death missed his bus?</p>
<hr><a name="CombatLogDispel"><h3>Event</h3><br><h2>CombatLogDispel (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when a buff or debuff is dispelled.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that used the spell that triggered the event.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who owns unitCaster.  This only applies if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the buff/debuff was dispelled from.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitTarget.  This only applies if unitTarget is a pet.
<li><b>bRemoveSingleInstance</b><b> (Boolean)</b> - Whether or not a single stack of the buff is removed.
<li><b>nInstancesRemoved</b><b> (Integer)</b> - The number of stacks of the buff that are removed from the unit.
<li><b>splRemovedSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was removed from the unit.
</ul>
<hr><a name="CombatLogDurabilityLoss"><h3>Event</h3><br><h2>CombatLogDurabilityLoss (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when a player's equipment loses a point of durability.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit wearing the equipment that lost durability.  This will always be the current player.
<li><b>nAmount</b><b> (Integer)</b> - The amount of durability that was lost.
</ul>
<hr><a name="CombatLogElderPointsLimitReached"><h3>Event</h3><br><h2>CombatLogElderPointsLimitReached</h2>
<h3>Description</h3>
<p>Fires when the player reaches the daily cap of elder points.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that reached their Elder Point Cap.  This should always be the current player.
</ul>
<hr><a name="CombatLogEndGameCurrencies"><h3>Event</h3><br><h2>CombatLogEndGameCurrencies</h2>
<h3>Description</h3>
<p>Fires whenever the player gains non-credit currencies.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that gained the currency.  This is always the current player.
<li><b>monLoot</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The currency that was gained.
</ul>
<hr><a name="CombatLogExperience"><h3>Event</h3><br><h2>CombatLogExperience</h2>
<h3>Description</h3>
<p>Fires whenever the player gaines experience or elder points.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that gained the experience or elder points.  This will always be the current player.
<li><b>nXP</b><b> (Integer)</b> - The base amount of experience gained.
<li><b>nRestXP</b><b> (Integer)</b> - The amount of experience gained from the player's rested bonus.
<li><b>nEP</b><b> (Integer)</b> - The amount of elder points the player gained.
<li><b>nRestEP</b><b> (Integer)</b> - The amount of elder points gained from the player's rested bonus.
</ul>
<hr><a name="CombatLogFallingDamage"><h3>Event</h3><br><h2>CombatLogFallingDamage</h2>
<h3>Description</h3>
<p>Fires whenever the player takes fall damage</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that took the falling damage.  This should always be the current player.
<li><b>nAmount</b><b> (Integer)</b> - The amount of damage the player took.
</ul>
<hr><a name="CombatLogHeal"><h3>Event</h3><br><h2>CombatLogHeal</h2>
<h3>Description</h3>
<p>Fires whenever a unit gets healed.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who used the spell that caused the heal.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The owner of unitCaster.  This only applies if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that received the heal.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitTarget.  This only applies if unitTarget is a pet.
<li><b>nHealAmount</b><b> (Integer)</b> - The amount missing health that was healed for the target.  This value does not include overheals.
<li><b>nOverheal</b><b> (Integer)</b> - The amount of overhealing done by the spell.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - A number representing any special things that went on with the spell, such as a critical hit.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was used for the heal.
<li><b>eEffectType</b><b> (Spell.CodeEnumSpellEffectType)</b> - The effect the spell has on the target.  
</ul>
<hr><a name="CombatLogImmunity"><h3>Event</h3><br><h2>CombatLogImmunity</h2>
<hr><a name="CombatLogInterrupted"><h3>Event</h3><br><h2>CombatLogInterrupted</h2>
<h3>Description</h3>
<p>Fires when a unit is interrupted by a spell.  This includes if the player interrupted their own spell cast.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that cast the spell that caused the interrupt.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The owner of unitCaster.  This only applies if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was interrupted.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The owner of unitTarget.  This only applies if unitTarget is a pet.
<li><b>eCombatResult</b><b> (Integer)</b> - The result the spell that was used.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was interrupted.
<li><b>splInterruptingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that caused the interrupt.
<li><b>eCastResult</b><b> (Spell.CodeEnumCastResult)</b> - Explains why the spell was interrupted.
<li><b>strCastResult</b><b> (String)</b> - A string explaining why the spell was interrupted.
</ul>
<hr><a name="CombatLogItemDestroy"><h3>Event</h3><br><h2>CombatLogItemDestroy</h2>
<h3>Description</h3>
<p>Fires when the player destroys an item.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that destroyed the item.
<li><b>itemDestroyed</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was destroyed.
</ul>
<h3>Remarks</h3>
<p>Note: This is not triggered by salvaging, selling, or turning an item in for a quest.</p>
<hr><a name="CombatLogKillPVP"><h3>Event</h3><br><h2>CombatLogKillPVP</h2>
<h3>Description</h3>
<p>Fires when a player assists in a PvP kill.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that assisted in the kill.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitCaster.  This only applies if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was killed in PvP.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitTarget.  This only applies if unitTarget was a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The result of using the ability.  
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that killed the player.
</ul>
<h3>Remarks</h3>
<p>Currently bugged.  This is being fired for a player when they die in PvP, not for when they get a kill assist.</p>
<hr><a name="CombatLogKillStreak"><h3>Event</h3><br><h2>CombatLogKillStreak</h2>
<h3>Description</h3>
<p>Fires when the player gets multiple kills in quick succession.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that got the kill streak.  This should either be the current player or one of their pets.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitCaster.  This only applies if unitCaster is a pet.
<li><b>eStatType</b><b> (CombatFloater.CodeEnumCombatMomentum)</b> - The type of streak the player is on.
<li><b>nStreakAmount</b><b> (Integer)</b> - The player's current streak count.
</ul>
<hr><a name="CombatLogLAS"><h3>Event</h3><br><h2>CombatLogLAS</h2>
<h3>Description</h3>
<p>Fires when a player changes their Limited Action Set.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that changed their Limited Action Set.  This should always be the current player.
</ul>
<hr><a name="CombatLogLifeSteal"><h3>Event</h3><br><h2>CombatLogLifeSteal</h2>
<hr><a name="CombatLogLoot"><h3>Event</h3><br><h2>CombatLogLoot</h2>
<h3>Description</h3>
<p>Fires whenever a player loots money or an item.  This will fire for each visible "item" looted in the world and each item distributed to the player via the group's looting system.  </p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that received the money or item.
<li><b>monLoot</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The money object for the money that was looted.  If there was no money looted, this will be nil.
<li><b>itemLoot</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was looted.  If no item was looted in this event, this will be nil.
<li><b>nItemAmount</b><b> (Integer)</b> - The stack size of itemLooted for this event.  If money was looted in this event and not an item, this value will be 0.
</ul>
<hr><a name="CombatLogModifying"><h3>Event</h3><br><h2>CombatLogModifying</h2>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that fired this event.
<li><b>itemHost</b><b> (<a href="../Classes/Item.htm">Item</a>)</b>
<li><b>itemRemoved</b><b> (<a href="../Classes/Item.htm">Item</a>)</b>
<li><b>itemAdded</b><b> (<a href="../Classes/Item.htm">Item</a>)</b>
</ul>
<hr><a name="CombatLogModifyInterruptArmor"><h3>Event</h3><br><h2>CombatLogModifyInterruptArmor</h2>
<h3>Description</h3>
<p>Fires whenever a player gains or loses interrupt armor.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who caused a player's interrupt armor to change
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The owner of unitCaster.  This is nil if unitCaster is not a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit whose interrupt armor was changed.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player who owns unitTarget.  This is nil if unitTarget is not a pet.
<li><b>nAmount</b><b> (Integer)</b> - The change in the unit's interrupt armor.
</ul>
<hr><a name="CombatLogMount"><h3>Event</h3><br><h2>CombatLogMount</h2>
<h3>Description</h3>
<p>Fires if the player mounts or dismounts.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player that mounted.
<li><b>bDismounted</b><b> (Boolean)</b> - Whether or not the player dismounted.
</ul>
<hr><a name="CombatLogPet"><h3>Event</h3><br><h2>CombatLogPet</h2>
<h3>Description</h3>
<p>Fires whenever a player summons or despawns a pet, or a pet dies.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who used the ability to summon, kill, or despawn the pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The pet that was spawned.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns the pet.  This is the current player.
<li><b>bDismissed</b><b> (Boolean)</b> - Whether or not the pet was despawned.
<li><b>bKilled</b><b> (Boolean)</b> - Whether or not the pet was killed.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The end result of the spell that was used.
</ul>
<hr><a name="CombatLogResurrect"><h3>Event</h3><br><h2>CombatLogResurrect</h2>
<h3>Description</h3>
<p>Fires whenever the player is rezzed.  This includes all methods of resurrection.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was resurrected.
</ul>
<hr><a name="CombatLogStealth"><h3>Event</h3><br><h2>CombatLogStealth</h2>
<h3>Description</h3>
<p>Fires whenever the player enters or leaves stealth.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit whose stealth state has changed.
<li><b>bExiting</b><b> (Boolean)</b> - Whether or not the player left stealth.
</ul>
<hr><a name="CombatLogString"><h3>Event</h3><br><h2>CombatLogString</h2>
<h3>Description</h3>
<p>Fires whenever a string is directly written in the combat log.  Instances where this is occurring include breaking CC, ....</p>
<h3>Params</h3>
<ul>
<li><b>strLogMessage</b><b> (String)</b> - The message printed to the combat log.
</ul>
<hr><a name="CombatLogTransference"><h3>Event</h3><br><h2>CombatLogTransference</h2>
<h3>Description</h3>
<p>Fires whenever a spell does damage and heals the user at the same time.</p>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who used the spell that triggered the event.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player that owns unitCaster.  This only applies if unitCaster was a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was affected by the spell that triggered this event.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who owns unitTarget.  This only applies if unitTarget is a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The effect of the spell that triggered the event.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that triggered the event.
<li><b>nDamageAmount</b><b> (Integer)</b> - The amount of damage done to unitTarget.
<li><b>eDamageType</b><b> (GameLib.CodeEnumDamageType)</b> - The type of damage done by the spell.
<li><b>nShield</b><b> (Integer)</b> - The amount of damage done to the target's shields.
<li><b>nAbsorption</b><b> (Integer)</b> - The amount of damage done to the target's absorption shield.
<li><b>nOverkill</b><b> (Integer)</b> - The amount of damage done over the target's max health.
<li><b>bTargetVulnerable</b><b> (Boolean)</b> - Whether or not the target is in a "Moment of Opportunity" state.
<li><b>tHealData</b><b> (Array of Table)</b>
<ul>
<li><b>nHealAmount</b><b> (Integer)</b> - The amount that the caster is healed for.
<li><b>eVitalType</b><b> (GameLib.CodeEnumVital)</b> - The stat that is increased after the spell is cast.
<li><b>nOverheal</b><b> (Integer)</b> - The amount of healing the caster received while they were at their maximum health.
</ul>
</ul>
<h3>Remarks</h3>
<p>A good example of a spell that fires this event is the Stalker ability "Nano Field".  It is different from Lifesteal in that it is build into the spell, whereas lifesteal is a stat that is granted to all of the player's spells.</p>
<hr><a name="CombatLogVitalModifier"><h3>Event</h3><br><h2>CombatLogVitalModifier (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>unitCaster</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that used the spell that caused the event to fire.
<li><b>unitCasterOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitCaster.  This only applies if unitCaster is a pet.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was the target of the spell.
<li><b>unitTargetOwner</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that owns unitTarget.  This only applies if unitTarget is a pet.
<li><b>eCombatResult</b><b> (GameLib.CodeEnumCombatResult)</b> - The spell's effect on the target.
<li><b>splCallingSpell</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that caused the event to fire.
<li><b>nAmount</b><b> (Integer)</b> - How much the specified vital is modified by.
<li><b>eVitalType</b><b> (GameLib.CodeEnumVital)</b> - The vital that is modified.
<li><b>bShowCombatLog</b><b> (Boolean)</b> - Whether or not this event should appear in the combat log.
</ul>
<hr><a name="CombatMomentum"><h3>Event</h3><br><h2>CombatMomentum</h2>
<h3>Description</h3>
<p>Fires whenever one of the player's "momentum" bonuses increases.</p>
<h3>Params</h3>
<ul>
<li><b>eType</b><b> (CombatFloater.CodeEnumCombatMomentum)</b> - The type of momentum bonus that was increased.
<li><b>nCount</b><b> (Integer)</b> - The current count for the momentum bonus.
<li><b>strMessage</b><b> (String)</b> - A string for displaying the event.
</ul>
<hr><a name="CommodityAuctionFilledPartial"><h3>Event</h3><br><h2>CommodityAuctionFilledPartial</h2>
<h3>Description</h3>
<p>Fires whenever a buy or sell order on the Commodities Exchange is partially filled by another player.</p>
<h3>Params</h3>
<ul>
<li><b>nFilledCount</b><b> (Integer)</b> - How many items in the order were actually bought or sold.
<li><b>orderFilled</b><b> (<a href="../Classes/CommodityOrder.htm">CommodityOrder</a>)</b> - The order that was partially filled.
</ul>
<hr><a name="CommodityAuctionRemoved"><h3>Event</h3><br><h2>CommodityAuctionRemoved</h2>
<h3>Description</h3>
<p>Fires whenever a buy or sell order is removed from the Commodities Exchange.</p>
<h3>Params</h3>
<ul>
<li><b>eReason</b><b> (MarketplaceLib.AuctionEventType)</b> - The reason the auction was removed from the Commodities Exchange.  This will either be Fill, Expire, or Cancel.
<li><b>orderRemoved</b><b> (<a href="../Classes/CommodityOrder.htm">CommodityOrder</a>)</b> - The order that was removed from the Commodities Exchange.
</ul>
<hr><a name="CommodityAuctionsDisabled"><h3>Event</h3><br><h2>CommodityAuctionsDisabled</h2>
<h3>Description</h3>
<p>Fired when the Commodity Exchange gets disabled or enabled.</p>
<h3>Params</h3>
<ul>
<li><b>bDisabled</b><b> (Boolean)</b> - Whether or not this event was fired because the Commodity Exchange is disabled.
</ul>
<h3>Remarks</h3>
<p>This is only for actions taken by GMs that enable and disable the Commodity Exchange for everyone on the server </p>
<hr><a name="CommodityInfoResults"><h3>Event</h3><br><h2>CommodityInfoResults</h2>
<h3>Description</h3>
<p>Fires for each item returned by MarketplaceLib.RequestCommodityInfo().  It contains information on all of the buy and sell orders out for the item.</p>
<h3>Params</h3>
<ul>
<li><b>idItem</b><b> (Integer)</b> - The id number for the item that the results are referencing.
<li><b>tStats</b><b> (Table)</b>
<ul>
<li><b>nBuyOrderCount</b><b> (Integer)</b> - The number of buy orders out for the item.
<li><b>nSellOrderCount</b><b> (Integer)</b> - The number of sell orders out for the item.
<li><b>arBuyOrderPrices</b><b> (Array of Table)</b>
<ul>
<li><b>monPrice</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount that the buy order is paying per item.
<li><b>nCount</b><b> (Integer)</b> - The number of items that the buy order will purchase before it is fulfilled.
</ul>
<li><b>arSellOrderPrices</b><b> (Array of Table)</b>
<ul>
<li><b>monPrice</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The sell order's price per item.
<li><b>nCount</b><b> (Integer)</b> - The number of items in the sell order.
</ul>
</ul>
<li><b>arOrders</b><b> (Array of <a href="../Classes/CommodityOrder.htm">CommodityOrder</a>)</b> - A listing of all of the buy and sell orders open for the item.
</ul>
<hr><a name="CraftingDiscoveryHotCold"><h3>Event</h3><br><h2>CraftingDiscoveryHotCold</h2>
<h3>Description</h3>
<p>Fires whenever the player completes a coordinate crafting session inside a discovery area.</p>
<h3>Params</h3>
<ul>
<li><b>eHotColdResult</b><b> (CraftingLib.CodeEnumCraftingDiscoveryHotCold)</b> - Returns how close the previous crafting attempt was to a discoverable recipe.
<li><b>eDirection</b><b> (CraftingLib.CodeEnumCraftingDirection)</b> - The direction of the discoverable schematic from the previous result.
</ul>
<hr><a name="CraftingExtractItem"><h3>Event</h3><br><h2>CraftingExtractItem (Deprecated)</h2>
<hr><a name="CraftingInterrupted"><h3>Event</h3><br><h2>CraftingInterrupted</h2>
<h3>Description</h3>
<p>Fires whenever a crafting attempt is interrupted by the player moving or other external source.</p>
<hr><a name="CraftingModItem"><h3>Event</h3><br><h2>CraftingModItem (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when the player is holding ALT and clicks on an item.  This fires when the mouse button is raised.</p>
<h3>Params</h3>
<ul>
<li><b>itemMod</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player is attempting to moddify.
</ul>
<hr><a name="CraftingSchematicComplete"><h3>Event</h3><br><h2>CraftingSchematicComplete</h2>
<h3>Description</h3>
<p>Fires when the player finishes crafting an item.</p>
<h3>Params</h3>
<ul>
<li><b>idSchematic</b><b> (Integer)</b> - The id number for the schematic that was completed.
<li><b>bSuccess</b><b> (Boolean)</b> - Whether or not the crafting attempt was successful.
<li><b>nXPGained</b><b> (Integer)</b> - The amount of XP gained from the crafting attempt.
<li><b>arMaterials</b><b> (Array of Integer)</b> - The id number of each material that is returned to the player.
<li><b>idResultSchematic</b><b> (Integer)</b> - The schematic id for the final item that is created.  This can be different from idSchematic when crafting a variant.
<li><b>idCraftedItem</b><b> (Integer)</b> - The item that was crafted from the schematic.
</ul>
<hr><a name="CraftingSchematicInfoReceived"><h3>Event</h3><br><h2>CraftingSchematicInfoReceived (Deprecated)</h2>
<hr><a name="CraftingSchematicLearned"><h3>Event</h3><br><h2>CraftingSchematicLearned</h2>
<h3>Description</h3>
<p>Fires when the player learns a new crafting schematic.</p>
<h3>Params</h3>
<ul>
<li><b>eTradeskill</b><b> (CraftingLib.CodeEnumTradeskill)</b> - The tradeskill associated with the schematic.
<li><b>idSchematic</b><b> (Integer)</b> - The id number for the schematic that the player learned.
</ul>
<hr><a name="CraftingSchematicList"><h3>Event</h3><br><h2>CraftingSchematicList (Deprecated)</h2>
<hr><a name="CraftingStationClose"><h3>Event</h3><br><h2>CraftingStationClose</h2>
<h3>Description</h3>
<p>Fired when the player stops interacting with or moves too far away from a crafting station.</p>
<hr><a name="CraftingUpdateCurrent"><h3>Event</h3><br><h2>CraftingUpdateCurrent</h2>
<h3>Description</h3>
<p>Fires whenever the current crafting schematic is updated.  This includes starting/resuming a schematic, adding additives and catalysts, adding/removing/modifying microchips, and completing the craft.</p>
<hr><a name="CREDDExchangeInfoResults"><h3>Event</h3><br><h2>CREDDExchangeInfoResults</h2>
<h3>Description</h3>
<p>Returns results for the CREDDExchangeLib.RequestExchangeInfo() call from the server.</p>
<h3>Params</h3>
<ul>
<li><b>tStats</b><b> (Table)</b>
<ul>
<li><b>nBuyOrderCount</b><b> (Integer)</b> - The number of CREDD buy orders that are open.
<li><b>nSellOrderCount</b><b> (Integer)</b> - The number of CREDD sell orders that are open.
<li><b>arBuyOrderPrices</b><b> (Array of Table)</b>
<ul>
<li><b>monPrice</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount that the buy order is paying for CREDD.
<li><b>nCount</b><b> (Integer)</b> - The number of CREDD that the buy order tries to buy before it is fulfilled.
</ul>
<li><b>arSellOrderPrices</b><b> (Array of Table)</b>
<ul>
<li><b>monPrice</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount of money the sell order is asking for each CREDD.
<li><b>nCount</b><b> (Integer)</b> - The number of CREDD available in the sell order.
</ul>
</ul>
<li><b>arOrders</b><b> (Array of <a href="../Classes/CREDDExchangeOrder.htm">CREDDExchangeOrder</a>)</b> - A table with all the CREDD buy and sell orders.
</ul>
<hr><a name="CREDDExchangeOperationResults"><h3>Event</h3><br><h2>CREDDExchangeOperationResults (Deprecated)</h2>
<hr><a name="CREDDExchangeWindowClose"><h3>Event</h3><br><h2>CREDDExchangeWindowClose</h2>
<h3>Description</h3>
<p>Fires when the player changes their interaction target from a CREDD Exchange to another NPC, when a player moves far enough away from a CREDD Exchange, or after Event_CancelCREDDExchange() is called.</p>
<hr><a name="CREDDOperationHistoryResults"><h3>Event</h3><br><h2>CREDDOperationHistoryResults</h2>
<h3>Description</h3>
<p>Returns the results of the CREDDExchangeLib.GetCREDDHistory() call.</p>
<h3>Params</h3>
<ul>
<li><b>tHistory</b><b> (Array of Table)</b>
<ul>
<li><b>eOperation</b><b> (CREDDExchangeLib.CodeEnumAccountOperation)</b> - The type of operation performed in entry.
<li><b>bInitiator</b><b> (Boolean)</b> - Whether or not the player set up the buy or sell order for this entry.
<li><b>monAmount</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount of money exchanged in this entry.
<li><b>nLogAge</b><b> (Float)</b> - How long ago the listed operation took place, in days.
<li><b>nFriendId</b><b> (Integer)</b> - The account friend id number of the other player involved in the transaction.  This only returns a value if an account friend was involved in the transaction.
</ul>
</ul>
<hr><a name="CREDDRedeemResult"><h3>Event</h3><br><h2>CREDDRedeemResult</h2>
<hr><a name="CSIKeyPressed"><h3>Event</h3><br><h2>CSIKeyPressed</h2>
<h3>Description</h3>
<p>When the client side interaction input key is pressed or released</p>
<h3>Params</h3>
<ul>
<li><b>bKeyDown</b><b> (Boolean)</b> - True when the key is down; false when the key is up.
</ul>
<hr><a name="DashCastFail"><h3>Event</h3><br><h2>DashCastFail</h2>
<h3>Description</h3>
<p>Fires when the player attempts to dash while they have no dash charges.</p>
<hr><a name="DashCastSuccess"><h3>Event</h3><br><h2>DashCastSuccess</h2>
<h3>Description</h3>
<p>Fires when the player successfully dashes.</p>
<hr><a name="DatacubePlaybackEnded"><h3>Event</h3><br><h2>DatacubePlaybackEnded</h2>
<h3>Description</h3>
<p>Fires when a datacube's VO ends or is forced to end.</p>
<hr><a name="DatacubeUpdated"><h3>Event</h3><br><h2>DatacubeUpdated</h2>
<h3>Description</h3>
<p>Fires when the player unlocks with a new datacube, journal entry, or Tales From Beyond the Fringe.</p>
<h3>Params</h3>
<ul>
<li><b>idEntry</b><b> (Integer)</b> - The id number for the entry.
<li><b>bIsVolume</b><b> (Boolean)</b> - Whether or not the entry was unlocked by entering a trigger volume.
</ul>
<hr><a name="DebugPrerequisite"><h3>Event</h3><br><h2>DebugPrerequisite (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when certain dev commands are used.  Displays the debug string for prereqs.</p>
<h3>Params</h3>
<ul>
<li><b>outputStr</b><b> (String)</b>
</ul>
<hr><a name="DecorPreviewClose"><h3>Event</h3><br><h2>DecorPreviewClose</h2>
<h3>Description</h3>
<p>Fires whenever a decor or plug preview window closes.</p>
<hr><a name="DecorPreviewOpen"><h3>Event</h3><br><h2>DecorPreviewOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player opens the decor or plug preview window.</p>
<h3>Params</h3>
<ul>
<li><b>idItemDisplayed</b><b> (Integer)</b> - The id number for the plug or decor being previewed.
</ul>
<hr><a name="Dialog_Close"><h3>Event</h3><br><h2>Dialog_Close</h2>
<h3>Description</h3>
<p>Fires whenever the player picks a dialog option that should close the dialog window.</p>
<hr><a name="Dialog_QuestShare"><h3>Event</h3><br><h2>Dialog_QuestShare</h2>
<h3>Description</h3>
<p>Fires whenever a group member attempts to share a quest that the player does not have yet.</p>
<h3>Params</h3>
<ul>
<li><b>queShared</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest that the player is attempting to share.
<li><b>unitSharingPlayer</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that shared the quest.
</ul>
<hr><a name="Dialog_ResponseText"><h3>Event</h3><br><h2>Dialog_ResponseText</h2>
<h3>Description</h3>
<p>Fires whenever the player selects an option in the dialog text.</p>
<h3>Params</h3>
<ul>
<li><b>strText</b><b> (String)</b> - The option that the player selected in the dialog tree.
</ul>
<hr><a name="Dialog_ShowState"><h3>Event</h3><br><h2>Dialog_ShowState</h2>
<h3>Description</h3>
<p>Updates and displays the Dialog's contents and responses based on the provided Ids.</p>
<h3>Params</h3>
<ul>
<li><b>nStateId</b><b> (Integer)</b> - The id of the state, such as DialogState_TopicChoice or DialogState_QuestAccept or DialogState_QuestComplete or more.
<li><b>queDialog</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest associated with the dialog tree.
</ul>
<hr><a name="Dialog_ViewIntro"><h3>Event</h3><br><h2>Dialog_ViewIntro (Deprecated)</h2>
<hr><a name="DialogClosing"><h3>Event</h3><br><h2>DialogClosing (Deprecated)</h2>
<hr><a name="DuelAccepted"><h3>Event</h3><br><h2>DuelAccepted</h2>
<h3>Description</h3>
<p>Fires whenever a player accepts a duel request.</p>
<h3>Params</h3>
<ul>
<li><b>fCountdownTimer</b><b> (Float)</b> - The countdown timer before the duel starts (in seconds).
</ul>
<hr><a name="DuelCancelWarning"><h3>Event</h3><br><h2>DuelCancelWarning</h2>
<h3>Description</h3>
<p>Fires whenever a player re-enters the dueling area while the "Left Area" warning is displayed.</p>
<hr><a name="DuelLeftArea"><h3>Event</h3><br><h2>DuelLeftArea</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves the dueling area.</p>
<h3>Params</h3>
<ul>
<li><b>fWarningTime</b><b> (Float)</b> - The amount of time (in seconds) that the player has to re-enter the dueling area before they forfiet.
</ul>
<hr><a name="DuelStateChanged"><h3>Event</h3><br><h2>DuelStateChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's duel state changes.</p>
<h3>Params</h3>
<ul>
<li><b>unitDueling</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player's duel opponent.
<li><b>eDuelState</b><b> (GameLib.CodeEnumDuelState)</b> - The duel state that the player has entered.
</ul>
<hr><a name="DyeLearned"><h3>Event</h3><br><h2>DyeLearned</h2>
<h3>Description</h3>
<p>Fires whenever the player learns a new dye color.</p>
<h3>Params</h3>
<ul>
<li><b>idDye</b><b> (Integer)</b> - The id number of the dye.
<li><b>arDyeInfo</b><b> (Array of Integer)</b> - A list of ids for each dye the player has learned.
</ul>
<hr><a name="ElderPointsGained"><h3>Event</h3><br><h2>ElderPointsGained</h2>
<h3>Description</h3>
<p>Fires whenever the player gains elder points.</p>
<h3>Params</h3>
<ul>
<li><b>nAmount</b><b> (Integer)</b> - The base number of elder points the player gained.
<li><b>nRested</b><b> (Integer)</b> - The number of elder points granted by the player's rested bonus.
</ul>
<hr><a name="ElderPointsLimitReached"><h3>Event</h3><br><h2>ElderPointsLimitReached</h2>
<h3>Description</h3>
<p>Fires whenever the player reaches their daily elder point cap.</p>
<hr><a name="EpisodeStateChanged"><h3>Event</h3><br><h2>EpisodeStateChanged</h2>
<h3>Description</h3>
<p>Fires whenever the episode becomes active or is completed.</p>
<h3>Params</h3>
<ul>
<li><b>idEpisode</b><b> (Integer)</b> - The id number for the episode whose state changed.
<li><b>eOldState</b><b> (Integer)</b> - The episode's previous state.  This lines up with the Episode.EpisodeState set of int constants.
<li><b>eNewState</b><b> (Integer)</b> - The episode's new state.  This lines up with the Episode.EpisodeState set of int constants.
</ul>
<hr><a name="FactionFloater"><h3>Event</h3><br><h2>FactionFloater</h2>
<h3>Description</h3>
<p>Fires whenever the player gains reputation with a faction and float text should be shown.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who gained the reputation.  This should always be the current player.
<li><b>strMessage</b><b> (String)</b> - The string that should be displayed in the floating text.
<li><b>nAmount</b><b> (Integer)</b> - The amount of reputation gained.
<li><b>strFactionName</b><b> (String)</b> - The name of the faction that the player gained reputation with.
<li><b>idFaction</b><b> (Integer)</b> - The id number of the faction that the player gained reputation with.
</ul>
<hr><a name="FlightPathUpdate"><h3>Event</h3><br><h2>FlightPathUpdate</h2>
<h3>Description</h3>
<p>Fires whenever the player learns a new flight path, a settler builds a flight path improvement, or a settler built flight path expires.</p>
<hr><a name="ForceResurrect"><h3>Event</h3><br><h2>ForceResurrect</h2>
<h3>Description</h3>
<p>Fires when the player's automatic release timer runs out while they are dead.</p>
<hr><a name="FriendshipAccountCharacterLevelUpdate"><h3>Event</h3><br><h2>FriendshipAccountCharacterLevelUpdate</h2>
<h3>Description</h3>
<p>Fires whenever an account friend's character gains a level.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the player that gained a level.
</ul>
<hr><a name="FriendshipAccountDataUpdate"><h3>Event</h3><br><h2>FriendshipAccountDataUpdate</h2>
<h3>Description</h3>
<p>Fires whenever an account friend's nickname, presence, public note, or online/offline status changes.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The account friend ID of the player.
</ul>
<hr><a name="FriendshipAccountFriendRemoved"><h3>Event</h3><br><h2>FriendshipAccountFriendRemoved</h2>
<h3>Description</h3>
<p>Fires whenever one person on either side of an account friendship removes the other as an account friend.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the account friend that was removed.
</ul>
<hr><a name="FriendshipAccountFriendsRecieved"><h3>Event</h3><br><h2>FriendshipAccountFriendsRecieved</h2>
<h3>Description</h3>
<p>Fires whenever a player accepts an account friend invite that was sent to them, when another player accepts an account friend invite that they sent, or when the player logs in.</p>
<h3>Params</h3>
<ul>
<li><b>arFriendInfo</b><b> (Array of Table)</b>
<ul>
<li><b>nId</b><b> (Integer)</b> - The new friend id.
<li><b>strPublicNote</b><b> (String)</b> - The new friend's public note.
<li><b>strPrivateNote</b><b> (String)</b> - The new friend's private note.
<li><b>strCharacterName</b><b> (String)</b> - The name of the character that the account friend is currently on.
<li><b>nPresenceState</b><b> (Integer)</b> - The player's current presence state.  This lines up with the FriendshipLib.AccountPresenceState set of contants.
<li><b>fLastOnline</b><b> (Float)</b> - The amount of time since the player was last online (in days).  If this value is 0, then the player is online.
</ul>
</ul>
<hr><a name="FriendshipAccountInviteRemoved"><h3>Event</h3><br><h2>FriendshipAccountInviteRemoved</h2>
<h3>Description</h3>
<p>Fires whenever the player declines an account friend invite from another player.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The id number for the invite that was sent.
</ul>
<hr><a name="FriendshipAccountInvitesRecieved"><h3>Event</h3><br><h2>FriendshipAccountInvitesRecieved</h2>
<h3>Description</h3>
<p>Fired whenever the player receives an account friend invite from another player or when the player logs in.</p>
<h3>Params</h3>
<ul>
<li><b>arInviteInfo</b><b> (Array of Table)</b>
<ul>
<li><b>nId</b><b> (Integer)</b> - The friendship id for the invite.
<li><b>strInviteType</b><b> (Integer)</b> - The type of invite that was received.  This value lines up with the FriendshipLib.CharacterFriendshipType set of int constants.
<li><b>strNote</b><b> (String)</b> - The note that was sent along with the invite.
<li><b>strDisplayName</b><b> (string)</b> - The display name of the player who sent the invite.  This should be the name of the character that they're currently on @ the realm that that player is on.
<li><b>bIsNew</b><b> (Boolean)</b> - Whether the invite has been seen by the player before or not.
</ul>
</ul>
<hr><a name="FriendshipAccountPersonalStatusUpdate"><h3>Event</h3><br><h2>FriendshipAccountPersonalStatusUpdate</h2>
<h3>Description</h3>
<p>Fires if an account friend logs on or off, updates their presence, or updates their public note.</p>
<hr><a name="FriendshipAdd"><h3>Event</h3><br><h2>FriendshipAdd</h2>
<h3>Description</h3>
<p>Fires whenever a new friend is added to the friends list.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id for the new friend.
</ul>
<hr><a name="FriendshipInviteRemoved"><h3>Event</h3><br><h2>FriendshipInviteRemoved</h2>
<h3>Description</h3>
<p>Fires whenever a player declines a friend invite from another player.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the invite that was removed.
</ul>
<hr><a name="FriendshipInvitesRecieved"><h3>Event</h3><br><h2>FriendshipInvitesRecieved</h2>
<h3>Description</h3>
<p>Fires whenever the player receives a new friend invite.</p>
<h3>Params</h3>
<ul>
<li><b>arInviteInfo</b><b> (Array of Table)</b>
<ul>
<li><b>nId</b><b> (Integer)</b> - The friend id associated with the invite.
<li><b>strCharacterName</b><b> (String)</b> - The name of the character that sent the invite.
<li><b>nClassId</b><b> (GameLib.CodeEnumClass)</b> - The inviting character's class.
<li><b>nPathId</b><b> (Integer)</b> - This lines up with the PlayerPathLib.PlayerPathType set of constants.
<li><b>nLevel</b><b> (Integer)</b> - The invitor's current level.
<li><b>bIsNew</b><b> (Boolean)</b> - Whether or the player has seen the invite before or not.
<li><b>strNote</b><b> (String)</b> - The note that was sent along with the invite.
<li><b>fDaysUntilExpired</b><b> (Float)</b> - The number of days before the invite automatically expires.
</ul>
</ul>
<hr><a name="FriendshipLoaded"><h3>Event</h3><br><h2>FriendshipLoaded</h2>
<h3>Description</h3>
<p>Fires when the FriendshipLib has loaded.  This only occurrs when a character is logged in, not when reloading the UI.</p>
<hr><a name="FriendshipLocation"><h3>Event</h3><br><h2>FriendshipLocation</h2>
<h3>Description</h3>
<p>Fired in response to FriendshipLib.GetLocations(). Returns all the necessary data to see the name of the zone that the player is in.</p>
<h3>Params</h3>
<ul>
<li><b>arLocationInfo</b><b> (Array of Table)</b>
<ul>
<li><b>nId</b><b> (Integer)</b> - The friend id associated with this location.
<li><b>strWorldZone</b><b> (String)</b> - The name of the zone where the player is.
</ul>
</ul>
<hr><a name="FriendshipPostRemove"><h3>Event</h3><br><h2>FriendshipPostRemove</h2>
<hr><a name="FriendshipRemove"><h3>Event</h3><br><h2>FriendshipRemove</h2>
<h3>Description</h3>
<p>Fired whenever a friend is removed from the player's friends list.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the player that was removed from the friends list.
</ul>
<hr><a name="FriendshipResult"><h3>Event</h3><br><h2>FriendshipResult</h2>
<h3>Description</h3>
<p>Fires whenever an error is encountered when working with FriendsLib functionality.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - This value is always 0.
<li><b>eResult</b><b> (Integer)</b> - The type of error that was fired.  This lines up with the values in FriendshipLib.FriendshipResult.
</ul>
<hr><a name="FriendshipSuggestedAdd"><h3>Event</h3><br><h2>FriendshipSuggestedAdd</h2>
<h3>Description</h3>
<p>Fired whenever a suggested player is added to the friends list.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id that was added to the friends list from the suggested list.
</ul>
<hr><a name="FriendshipSuggestedRemove"><h3>Event</h3><br><h2>FriendshipSuggestedRemove</h2>
<h3>Description</h3>
<p>Fires whenever a player is removed from the Suggested Friends list.  This includes when players on the Suggested list are removed due to going over the maximum number of friends on that list.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the player that was removed from the friends list.
</ul>
<hr><a name="FriendshipSuggestedUpdate"><h3>Event</h3><br><h2>FriendshipSuggestedUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a suggested friend's information updates. This is usually due to level changes.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The id number of the suggested friend that was updated.
</ul>
<hr><a name="FriendshipUpdate"><h3>Event</h3><br><h2>FriendshipUpdate</h2>
<h3>Description</h3>
<p>Fired whenever a friend's character gets updated, such as when their level changes.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the player who was updated.
</ul>
<hr><a name="FriendshipUpdateOnline"><h3>Event</h3><br><h2>FriendshipUpdateOnline</h2>
<h3>Description</h3>
<p>Fired whenever the player comes online or goes offline.</p>
<h3>Params</h3>
<ul>
<li><b>idFriend</b><b> (Integer)</b> - The friend id of the player whose online/offline state changed.
</ul>
<hr><a name="GalacticArchiveArticleAdded"><h3>Event</h3><br><h2>GalacticArchiveArticleAdded</h2>
<h3>Description</h3>
<p>Fires whenever the player unlocks the first entry of a particular Galactic Archive Article.</p>
<h3>Params</h3>
<ul>
<li><b>artNewArticle</b><b> (<a href="../Classes/GalacticArchiveArticle.htm">GalacticArchiveArticle</a>)</b> - The article that was just unlocked.
</ul>
<hr><a name="GalacticArchiveEntryAdded"><h3>Event</h3><br><h2>GalacticArchiveEntryAdded</h2>
<h3>Description</h3>
<p>Fires whenever a new entry is unlocked for an already known Galactic Archive Article.</p>
<h3>Params</h3>
<ul>
<li><b>artParent</b><b> (<a href="../Classes/GalacticArchiveArticle.htm">GalacticArchiveArticle</a>)</b> - The article that this entry belongs to.
<li><b>entUnlocked</b><b> (<a href="../Classes/GalacticArchiveEntry.htm">GalacticArchiveEntry</a>)</b> - The newly unlocked entry.
</ul>
<hr><a name="GalacticArchiveLinkClick"><h3>Event</h3><br><h2>GalacticArchiveLinkClick (Deprecated)</h2>
<h3>Description</h3>
<p>Fired whenever a player clicks a link in a Galactic Archive article.</p>
<h3>Params</h3>
<ul>
<li><b>artLinkTarget</b><b> (<a href="../Classes/GalacticArchiveArticle.htm">GalacticArchiveArticle</a>)</b> - The target of the link that was clicked.
</ul>
<hr><a name="GalacticArchiveRefresh"><h3>Event</h3><br><h2>GalacticArchiveRefresh</h2>
<h3>Description</h3>
<p>Fires whenever the Galactic Archive refreshes.  This is generally when the player changes zones.</p>
<hr><a name="GameClickProp"><h3>Event</h3><br><h2>GameClickProp</h2>
<h3>Description</h3>
<p>Fires whenever the player left clicks on a non-interactive object in the world.</p>
<h3>Params</h3>
<ul>
<li><b>idProp</b><b> (Integer)</b> - The id number of the prop that the player selected.
</ul>
<hr><a name="GameClickSky"><h3>Event</h3><br><h2>GameClickSky</h2>
<h3>Description</h3>
<p>Fires when the player left clicks on the sky.</p>
<hr><a name="GameClickUnit"><h3>Event</h3><br><h2>GameClickUnit</h2>
<h3>Description</h3>
<p>Fires whenever the player left clicks on a unit in game.</p>
<h3>Params</h3>
<ul>
<li><b>unitSelected</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was clicked on.
</ul>
<hr><a name="GameClickWorld"><h3>Event</h3><br><h2>GameClickWorld</h2>
<h3>Description</h3>
<p>Fires whenever the player left clicks a location in the world.</p>
<h3>Params</h3>
<ul>
<li><b>vec3Location</b><b> (<a href="../Classes/Vector3.htm">Vector3</a>)</b> - The location where the player clicked in the world.
</ul>
<hr><a name="GenericError"><h3>Event</h3><br><h2>GenericError</h2>
<h3>Description</h3>
<p>Fires whenever the player causes a generic error that is flashed on the screen.</p>
<h3>Params</h3>
<ul>
<li><b>eError</b><b> (GameLib.CodeEnumGenericError)</b> - The error that was fired.
<li><b>strMessage</b><b> (String)</b> - The string that should be shown when the error is thrown.
</ul>
<hr><a name="GenericEvent_PlayerCampStart"><h3>Event</h3><br><h2>GenericEvent_PlayerCampStart (Deprecated)</h2>
<h3>Description</h3>
<p>Fired whenever the player starts to log off.</p>
<hr><a name="GenericEvent_PlayerExitCancel"><h3>Event</h3><br><h2>GenericEvent_PlayerExitCancel (Deprecated)</h2>
<h3>Description</h3>
<p>Fires when the player cancels the log off timer.</p>
<hr><a name="GenericMapNodeDisabled"><h3>Event</h3><br><h2>GenericMapNodeDisabled</h2>
<h3>Description</h3>
<p>Fires whenever a GenericMapNode is disabled and hidden on the GenericMap.</p>
<h3>Params</h3>
<ul>
<li><b>mapDisabled</b><b> (<a href="../Classes/GenericMapNode.htm">GenericMapNode</a>)</b> - The GenericMapNode that was disabled.
</ul>
<hr><a name="GenericMapNodeEnabled"><h3>Event</h3><br><h2>GenericMapNodeEnabled</h2>
<h3>Description</h3>
<p>Fires whenever a GenericMapNode becomes active and is shown on the GenericMap.</p>
<h3>Params</h3>
<ul>
<li><b>mapEnabled</b><b> (<a href="../Classes/GenericMapNode.htm">GenericMapNode</a>)</b> - The GenericMapNode that was enabled.
</ul>
<hr><a name="GenericMapShow"><h3>Event</h3><br><h2>GenericMapShow</h2>
<h3>Description</h3>
<p>Fires when the generic map should be shown to the player.</p>
<h3>Params</h3>
<ul>
<li><b>idZoneMap</b><b> (Integer)</b> - The zone map id that should be shown.
<li><b>arGenericMapNodeInfo</b><b> (Array of Table)</b>
<ul>
<li><b>bEnabled</b><b> (Boolean)</b> - Whether or not the map node is enabled when the map is shown.
<li><b>oNode</b><b> (<a href="../Classes/GenericMapNode.htm">GenericMapNode</a>)</b> - A GenericMapNode that should be placed on the map.
</ul>
</ul>
<hr><a name="GMChatTellFailed"><h3>Event</h3><br><h2>GMChatTellFailed</h2>
<hr><a name="Group_Add"><h3>Event</h3><br><h2>Group_Add</h2>
<h3>Description</h3>
<p>Fires whenever another player is added to a group that the current player is already part of.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player that was added to the group.
</ul>
<hr><a name="Group_FlagsChanged"><h3>Event</h3><br><h2>Group_FlagsChanged</h2>
<hr><a name="Group_Join"><h3>Event</h3><br><h2>Group_Join</h2>
<h3>Description</h3>
<p>Fires whenever the current player first joins a group.</p>
<hr><a name="Group_JoinRequest"><h3>Event</h3><br><h2>Group_JoinRequest</h2>
<h3>Description</h3>
<p>Fires whenever a player sends a request to join an existing party.</p>
<h3>Params</h3>
<ul>
<li><b>strRequesterName</b><b> (String)</b> - The name of the player requesting to join the group.
</ul>
<hr><a name="Group_Left"><h3>Event</h3><br><h2>Group_Left</h2>
<h3>Description</h3>
<p>Fires whenever the player is no longer in the group.  This only fires for the current player.</p>
<h3>Params</h3>
<ul>
<li><b>eReason</b><b> (GroupLib.RemoveReason)</b> - The method used to remove the player from the group.
</ul>
<hr><a name="Group_LootRulesChanged"><h3>Event</h3><br><h2>Group_LootRulesChanged</h2>
<hr><a name="Group_MemberFlagsChanged"><h3>Event</h3><br><h2>Group_MemberFlagsChanged</h2>
<h3>Params</h3>
<ul>
<li><b>nMemberIdx</b><b> (Integer)</b> - The member index of the character whose permissions changed.
<li><b>bIsFromPromotion</b><b> (boolean)</b> - Whether or not the change in permissions is due to the character being promoted.
<li><b>tFlags</b><b> (Table)</b>
<ul>
<li><b>bCanInvite</b><b> (Boolean)</b> - Whether or not the player can send invites to other players.
<li><b>bCanKick</b><b> (Boolean)</b> - Whether or not the player can kick members from the group.
<li><b>bDisconnected</b><b> (Boolean)</b> - Whether or not the character has disconnected from the game.
<li><b>bPending</b><b> (Boolean)</b>
<li><b>bTank</b><b> (Boolean)</b> - Whether or not the player has been marked as a tank.
<li><b>bHealer</b><b> (Boolean)</b> - Whether or not the player has been marked as a Healer.
<li><b>bDPS</b><b> (Boolean)</b> - Whether or not the player has been marked as DPS.
<li><b>bMainTank</b><b> (Boolean)</b> - Whether or not the player is marked as a raid's Main Tank.
<li><b>bMainAssist</b><b> (Boolean)</b> - Whether or not the player is flagged as one of the raid's Main Assists.
<li><b>bRaidAssistant</b><b> (Boolean)</b> - Whether or not the group member is flagged as a Raid Assistant.
<li><b>bReady</b><b> (Boolean)</b> - Whether or not the player has responded positively to a ready check.
<li><b>bRoleLock</b><b> (Boolean)</b> - Whether or not the Role Lock has been turned on.
<li><b>bCanMark</b><b> (Boolean)</b> - Whether or not the player can place target markers on units.
<li><b>bHasSetReady</b><b> (Boolean)</b>
</ul>
</ul>
<hr><a name="Group_MemberOrderChanged"><h3>Event</h3><br><h2>Group_MemberOrderChanged (Deprecated)</h2>
<h3>Description</h3>
<p>Fires whenever the group's order has changed.</p>
<h3>Usage/Example</h3>
<pre>Note, this functionality is not currently implemented, so this event will never fire.</pre>
<hr><a name="Group_MemberPromoted"><h3>Event</h3><br><h2>Group_MemberPromoted</h2>
<h3>Description</h3>
<p>Fires whenever a group member is promoted to group leader</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player who was promoted to leader.
<li><b>bSelf</b><b> (Boolean)</b> - Whether the current player was promoted.
</ul>
<hr><a name="Group_Mentor"><h3>Event</h3><br><h2>Group_Mentor</h2>
<h3>Description</h3>
<p>Fired whenever the player should be given the option to mentor another character and whenever they stop mentoring someone.</p>
<h3>Params</h3>
<ul>
<li><b>arMentorTargets</b><b> (Table)</b>
<ul>
<li><b>unitMentee</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that can be mentored.
<li><b>tMemberInfo</b><b> (Table)</b>
<ul>
<li><b>nMemberIdx</b><b> (Integer)</b> - The member's index in the group.
<li><b>nOrder</b><b> (Integer)</b>
<li><b>eRaceId</b><b> (GameLib.CodeEnumRace)</b> - The player's race.
<li><b>eClassId</b><b> (GameLib.CodeEnumClass)</b> - The player's class.
<li><b>strCharacterName</b><b> (String)</b> - The player's name.
<li><b>strRaceName</b><b> (String)</b> - The name of the player's race.
<li><b>strClassName</b><b> (String)</b> - The name of the player's class.
<li><b>ePathType</b><b> (Integer)</b> - The player's path.  This lines up with the PlayerPathLib.PlayerPathType set of constants.
<li><b>bIsLeader</b><b> (Boolean)</b> - Whether or not the player is the group leader.
<li><b>bIsOnline</b><b> (Boolean)</b> - Whether or not the player is online.
<li><b>nLevel</b><b> (Integer)</b> - The player's level.
<li><b>nEffectiveLevel</b><b> (Integer)</b> - The player's effective level, after mentoring or rallying modifications.
<li><b>nHealth</b><b> (Integer)</b> - The player's current health.
<li><b>nHealthMax</b><b> (Integer)</b> - The player's maximum health.
<li><b>nShield</b><b> (Integer)</b> - The amount of shield strength the player currently has.
<li><b>nShieldMax</b><b> (Integer)</b> - The maximum amount of shield the player can have.
<li><b>nInterruptArmor</b><b> (Integer)</b> - The player's current Interrupt Armor.
<li><b>nInterruptArmorMax</b><b> (Integer)</b> - The maximum amount of interrupt armor a player can have.
<li><b>nAbsorption</b><b> (Integer)</b> - The amount of absorption shield the player currently has.
<li><b>nAbsorptionMax</b><b> (Integer)</b> - The maximum amount of absorption shield the player can have.
<li><b>nMana</b><b> (Integer)</b> - The amount of focus the player currently has.
<li><b>nManaMax</b><b> (Integer)</b> - The maximum amount of focus the player can have.
<li><b>nMarkerId</b><b> (Integer)</b> - The target marker assigned to the player.
<li><b>nMenteeIdx</b><b> (Integer)</b> - The index of the player in the list of potential units to mentor.
<li><b>bIsMentoring</b><b> (Boolean)</b> - Whether or not the player is currently mentoring another player.
<li><b>bIsMentored</b><b> (Boolean)</b> - Whether or not another player is already being mentored by another player.
<li><b>tMentoredBy</b><b> (Array of Integer)</b> - The indices of players within the group that are mentoring the player.
<li><b>tFlags</b><b> (Table)</b>
<ul>
<li><b>bCanInvite</b><b> (Boolean)</b> - Whether or not the player can invite other players to the group.
<li><b>bCanKick</b><b> (Boolean)</b> - Whether or not the player can kick other members from the group.
<li><b>bDisconnected</b><b> (Boolean)</b> - Whether or not the player is currently disconnected from the game.
<li><b>bPending</b><b> (Boolean)</b>
<li><b>bTank</b><b> (Boolean)</b> - Whether or not this player has been marked as a tank.
<li><b>bHealer</b><b> (Boolean)</b> - Whether or not this player has been marked as a healer.
<li><b>bDPS</b><b> (Boolean)</b> - Whether or not this player has been flagged as DPS.
<li><b>bMainTank</b><b> (Boolean)</b> - Whether or not the player has been marked as a raid's Main Tank.
<li><b>bMainAssist</b><b> (Boolean)</b> - Whether or not the player has been marked as a raid's Main Assist.
<li><b>bRaidAssistant</b><b> (Boolean)</b> - Whether or not the player has been marked as a raid's Raid Assistant.
<li><b>bReady</b><b> (Boolean)</b> - Whether or not the player has responded positively to a ready check.
<li><b>bRoleLocked</b><b> (Boolean)</b> - Whether or not the raid's roles are locked.
<li><b>bCanMark</b><b> (Boolean)</b> - Whether or not the player can place target markers on units.
<li><b>bHasSetReady</b><b> (Boolean)</b>
</ul>
</ul>
</ul>
</ul>
<hr><a name="Group_MentorLeftAOI"><h3>Event</h3><br><h2>Group_MentorLeftAOI</h2>
<h3>Description</h3>
<p>Fired whenever a pair of players using mentoring get too far apart, when the players move within range again, and when the timer to move within range runs out.</p>
<h3>Params</h3>
<ul>
<li><b>nTimeUntilCanceled</b><b> (Integer)</b> - How long the players have (in seconds) to return to eachother's Area of Interest before the Mentoring status is canceled.
<li><b>bTimerStop</b><b> (Boolean)</b> - Whether or not the countdown timer has stopped.  This can be because the players have moved within range of eachother or the timer has expired.
</ul>
<hr><a name="Group_MentorRelationship"><h3>Event</h3><br><h2>Group_MentorRelationship</h2>
<h3>Description</h3>
<p>Fires whenever a player begins mentoring another player.  This event is passed to every member in the group.</p>
<h3>Params</h3>
<ul>
<li><b>unitMentor</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that is mentoring the other member.
<li><b>unitMentee</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit being mentored.
</ul>
<hr><a name="Group_Operation_Result"><h3>Event</h3><br><h2>Group_Operation_Result</h2>
<h3>Description</h3>
<p>Fires whenever an error occurs when attempting a group related action.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player that the operation was attempted on.
<li><b>eResult</b><b> (GroupLib.ActionResult)</b> - The reason why the operation failed.
</ul>
<hr><a name="Group_ReadyCheck"><h3>Event</h3><br><h2>Group_ReadyCheck</h2>
<h3>Description</h3>
<p>Fires whenever a ready check is started.</p>
<h3>Params</h3>
<ul>
<li><b>nMemberIdx</b><b> (Integer)</b> - The group index of the player who started the ready check.
<li><b>strMessage</b><b> (String)</b> - The message sent out with the ready check.
</ul>
<hr><a name="Group_ReadyCheckCooldownExpired"><h3>Event</h3><br><h2>Group_ReadyCheckCooldownExpired</h2>
<hr><a name="Group_Referral"><h3>Event</h3><br><h2>Group_Referral</h2>
<h3>Description</h3>
<p>Fires whenever a group member referrs another player for an invitation to the group.</p>
<h3>Params</h3>
<ul>
<li><b>nMemberIdx</b><b> (Integer)</b> - The group index of the member who sent the referral.
<li><b>strTargetName</b><b> (String)</b> - The name of the player that was referred to the group.
</ul>
<hr><a name="Group_Remove"><h3>Event</h3><br><h2>Group_Remove</h2>
<h3>Description</h3>
<p>Fired whenever a player is removed from the group</p>
<h3>Params</h3>
<ul>
<li><b>strMemberName</b><b> (String)</b> - The name of the player that was removed from the group.
<li><b>eReason</b><b> (GroupLib.RemoveReason)</b> - The method used to remove the player from the group.
</ul>
<hr><a name="Group_Request_Result"><h3>Event</h3><br><h2>Group_Request_Result</h2>
<h3>Description</h3>
<p>Fires whenever actions related to joining an existing group processed by the server.</p>
<h3>Params</h3>
<ul>
<li><b>strPlayerName</b><b> (String)</b> - The name of the player whose group the player is attempting to join.
<li><b>eResult</b><b> (GroupLib.Result)</b> - The type of action that was processed.
<li><b>bIsJoin</b><b> (Boolean)</b> - Whether the message is an attempt to join the group or not.
</ul>
<hr><a name="Group_SetMark"><h3>Event</h3><br><h2>Group_SetMark</h2>
<h3>Description</h3>
<p>Fires whenever a group member sets a target marker on a unit.</p>
<h3>Params</h3>
<ul>
<li><b>idMarker</b><b> (Integer)</b> - The id number of the target marker that was placed on the unit.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit the marker was placed on.
</ul>
<hr><a name="Group_Updated"><h3>Event</h3><br><h2>Group_Updated</h2>
<h3>Description</h3>
<p>Fires whenever the the number of players in a group change, the instance difficulty is changed, </p>
<hr><a name="Group_UpdatePosition"><h3>Event</h3><br><h2>Group_UpdatePosition</h2>
<h3>Description</h3>
<p>Fires at regular, 1 second intervals with updates to the player's positions in the world.</p>
<h3>Params</h3>
<ul>
<li><b>arMemberPosInfo</b><b> (Array of Table)</b>
<ul>
<li><b>nIndex</b><b> (Integer)</b> - The member index of the player that this position information belongs to.
<li><b>idWorld</b><b> (Integer)</b> - The id of the world that the player is on.
<li><b>bInCombatPvp</b><b> (Boolean)</b> - Whether or not the player is in combat with another player.
<li><b>bInCombatPve</b><b> (Boolean)</b> - Whether or not the player is in combat with an NPC.
<li><b>bInCombat</b><b> (Boolean)</b> - Whether or not the player is in combat.
<li><b>tZoneMap</b><b> (Table)</b>
<ul>
<li><b>strFolder</b><b> (string)</b> - The folder that the zone is found in.  This is usually the zone name, without any spaces or punctuation.
<li><b>strName</b><b> (String)</b> - The name of the zone that the player is in.
<li><b>id</b><b> (Integer)</b> - The id number of the zone that the player is in.
<li><b>fNorth</b><b> (Float)</b> - The northern coordinate boundry of the zone.
<li><b>fSouth</b><b> (Float)</b> - The southern coordinate boundry of the zone.
<li><b>fEast</b><b> (Float)</b> - The eastern coordinate boundry of the zone.
<li><b>fWest</b><b> (Float)</b> - The western coordinate boundry of the zone.
<li><b>continentId</b><b> (Integer)</b> - The id number for the continent that the zone is on.
<li><b>parentZoneId</b><b> (Integer)</b> - The id number for the parent zone of the current zone.  If the zone has no parent, this will be 0.
</ul>
<li><b>tWorldLoc</b><b> (Table)</b> - The player's coordinates in the world.
<ul>
<li><b>x</b><b> (Float)</b>
<li><b>y</b><b> (Float)</b>
<li><b>z</b><b> (Float)</b>
</ul>
</ul>
</ul>
<hr><a name="GroupBag_Changed"><h3>Event</h3><br><h2>GroupBag_Changed (Deprecated)</h2>
<hr><a name="GroupBag_ItemDistributed"><h3>Event</h3><br><h2>GroupBag_ItemDistributed (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>idItem</b><b> (Integer)</b>
<li><b>idWinner</b><b> (Integer)</b>
</ul>
<hr><a name="GroupLeaderPhaseChanged"><h3>Event</h3><br><h2>GroupLeaderPhaseChanged</h2>
<h3>Description</h3>
<p>Fires whenever the group leader moves in another phase.</p>
<h3>Params</h3>
<ul>
<li><b>bJoinAllowed</b><b> (Boolean)</b> - Whether or not the player is allowed to join the group leader's phase.
<li><b>nReferenceType</b><b> (Integer)</b>
<li><b>nReferenceId</b><b> (Integer)</b>
</ul>
<hr><a name="GuildBankerClose"><h3>Event</h3><br><h2>GuildBankerClose</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with another target or moves away from a guild bank while interacting with it.</p>
<hr><a name="GuildBankerOpen"><h3>Event</h3><br><h2>GuildBankerOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a guild bank.</p>
<h3>Params</h3>
<ul>
<li><b>unitBank</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the player interacted with to open the guild bank.
</ul>
<hr><a name="GuildBankItem"><h3>Event</h3><br><h2>GuildBankItem</h2>
<h3>Description</h3>
<p>Fires whenever an item is added or removed from the guild bank, or moved to a different slot within the bank.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild that owns the bank.
<li><b>eGuildType</b><b> (Integer)</b> - The type of guild that owns the bank.  This should always be GuildLib.GuildType_Guild.
<li><b>nSlotIndex</b><b> (Integer)</b> - The bank slot where the item is placed.
<li><b>bRemoved</b><b> (Boolean)</b> - Whether the item was removed from the bank or not.
</ul>
<hr><a name="GuildBankLog"><h3>Event</h3><br><h2>GuildBankLog</h2>
<h3>Description</h3>
<p>Returns the results from Guild:RequestBankLogs(), Guild:RequestMoneyLogs(), and Guild:RequestRepairLogs().</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild that owns the bank that the logs belong to.
<li><b>arLogs</b><b> (Array of Table)</b> - Each log entry contains the name of the player who performed the action and the time since the action occurred.  All other variables depend on the type of log entry.  The different combinations are:<br>
<br>
uMoneyDeposit<br>
<br>
uMoneyWithdraw<br>
<br>
uRepairWithdraw<br>
<br>
nTab<br>
uItemDeposit<br>
nStack<br>
<br>
nTab<br>
uItemWithdraw<br>
nStack
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player that performed the action in the log.
<li><b>fOccuredAgoDays</b><b> (Float)</b> - The amount of time since the action was created (in days).
<li><b>uMoneyDeposit</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The money that was deposited in the bank.
<li><b>uMoneyWithdraw</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The money that was withdrawn from the bank.
<li><b>uRepairWithdraw</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The money that was spent on a guild repair.
<li><b>nTab</b><b> (Integer)</b> - The tab that an item was added or removed from.
<li><b>nStack</b><b> (Integer)</b> - The number of items in the stack that was added or removed from the guild bank.
<li><b>uItemDeposit</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was deposited in the guild bank.
<li><b>uItemWithdraw</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was withdrawn from the guild bank.
</ul>
</ul>
<hr><a name="GuildBankTab"><h3>Event</h3><br><h2>GuildBankTab</h2>
<h3>Description</h3>
<p>Fires in response to Guild:OpenBankTab(), verifying that the tab was successfully opened.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild who owns the bank that the player is interacting with.
<li><b>nTab</b><b> (Integer)</b> - The index of the tab that was opened.
</ul>
<hr><a name="GuildBankTabCount"><h3>Event</h3><br><h2>GuildBankTabCount</h2>
<h3>Description</h3>
<p>Fires whenever a Bank Tab perk is purchased for the guild.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild who owns the bank that the tab was added to.
</ul>
<hr><a name="GuildBankTabRename"><h3>Event</h3><br><h2>GuildBankTabRename</h2>
<h3>Description</h3>
<p>Fires whenever the player successfully renames a guild bank tab.  To actually get the new tab names, Guild:GetBankTabName() will have to be called for each tab.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild who owns the bank that contains the renamed tab.
</ul>
<hr><a name="GuildBankWithdraw"><h3>Event</h3><br><h2>GuildBankWithdraw</h2>
<h3>Description</h3>
<p>Fires whenever a player successfully withdraws money or items from the guild bank.  This only fires for the player who performed the withdraw action.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild who owns the bank that the player withdrew from.
</ul>
<hr><a name="GuildChange"><h3>Event</h3><br><h2>GuildChange</h2>
<h3>Description</h3>
<p>Fired whenever the player is added to or removed from a guild, circle, arena team, or warparty.</p>
<hr><a name="GuildEmblem"><h3>Event</h3><br><h2>GuildEmblem (Deprecated)</h2>
<hr><a name="GuildEventLogChange"><h3>Event</h3><br><h2>GuildEventLogChange</h2>
<h3>Description</h3>
<p>Fires whenever a player joins the guild, a player leaves the guild, the guild unlocks a perk, activates a perk, or calls Guild:RequestEventLogList()</p>
<h3>Params</h3>
<ul>
<li><b>guildSource</b><b> (Guild)</b> - The guild whose logs have changed.
</ul>
<hr><a name="GuildFlags"><h3>Event</h3><br><h2>GuildFlags</h2>
<h3>Description</h3>
<p>Fires whenever the guild turns taxes or recruitment on or off.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose flags have been updated.
</ul>
<hr><a name="GuildInfluenceAndMoney"><h3>Event</h3><br><h2>GuildInfluenceAndMoney</h2>
<h3>Description</h3>
<p>Fires whenever a guild's credits or influence are gained, withdrawn, or spent.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose influence or credits were updated.
<li><b>nInfluence</b><b> (Integer)</b> - The amount of influence the guild has after the update.
<li><b>monUpdated</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The amount of money the guild has after the update.
<li><b>nBonusInfluenceRemaining</b><b> (Integer)</b> - The amount of bonus influence remaining after the update.
</ul>
<hr><a name="GuildInfoMessage"><h3>Event</h3><br><h2>GuildInfoMessage</h2>
<h3>Description</h3>
<p>Fires whenever a guild's Info Message is updated.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild whose Info Message has changed.
</ul>
<hr><a name="GuildInvite"><h3>Event</h3><br><h2>GuildInvite</h2>
<h3>Description</h3>
<p>Fired whenever the player receives an invitation to a guild.</p>
<h3>Params</h3>
<ul>
<li><b>strGuildName</b><b> (String)</b> - The name of the guild that the player is invited to join.
<li><b>strInvitorName</b><b> (String)</b> - The player who sent the invite.
<li><b>eGuildType</b><b> (Integer)</b> - An integer representing the type of guild that the player is invited to join.  This lines up with the GuildLib.GuildType set of constants.
<li><b>tFlags</b><b> (Table)</b>
<ul>
<li><b>bTax</b><b> (Boolean)</b> - Whether or not guild taxes are enabled for the guild that sent the invite.
<li><b>bRecruiting</b><b> (Boolean)</b> - Whether or not the guild has flagged itself as "Recruiting"
</ul>
</ul>
<hr><a name="GuildMemberChange"><h3>Event</h3><br><h2>GuildMemberChange</h2>
<h3>Description</h3>
<p>Fires whenever information about a guild member has changed.  This includes coming online, going offline, leveling up, having their guild rank changed, joining or leaving the guild, or changing their guild note.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose member's info changed.
</ul>
<hr><a name="GuildMessageOfTheDay"><h3>Event</h3><br><h2>GuildMessageOfTheDay</h2>
<h3>Description</h3>
<p>Fires whenever the guild's Message of the Day has been updated and when the player logs in on a character.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild that the Message of the Day belongs to.
</ul>
<h3>Remarks</h3>
<p>There is currently a bug where the GuildMessageOfTheDay event fires long before the chat log is loaded, so players are not seeing the message of the day.</p>
<hr><a name="GuildName"><h3>Event</h3><br><h2>GuildName</h2>
<h3>Description</h3>
<p>Fires whenever the guild's name is changed.  This is only done when a player or GM sets up a new guild name after a forced name change.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose name was updated.
</ul>
<hr><a name="GuildNameplateChange"><h3>Event</h3><br><h2>GuildNameplateChange</h2>
<h3>Description</h3>
<p>Fires whenever a player changes the guild name on their nameplate.  This event only fires for the character that changed the nameplate.</p>
<h3>Params</h3>
<ul>
<li><b>guildShown</b><b> (Guild)</b> - The guild that the player selected to show on their nameplate.
</ul>
<hr><a name="GuildPerkActivated"><h3>Event</h3><br><h2>GuildPerkActivated</h2>
<h3>Description</h3>
<p>Fires whenever a limited duration guild perk has been activated.</p>
<h3>Params</h3>
<ul>
<li><b>guildActivated</b><b> (Guild)</b> - The guild that the perk was activated for.
<li><b>idGuildPerk</b><b> (Integer)</b> - The id number of the guild perk that was activated.
</ul>
<hr><a name="GuildPerkDeactivated"><h3>Event</h3><br><h2>GuildPerkDeactivated</h2>
<h3>Description</h3>
<p>Fires whenever a guild perk is turned off or runs out of time.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose perk was turned off.
</ul>
<hr><a name="GuildPerkUnlocked"><h3>Event</h3><br><h2>GuildPerkUnlocked</h2>
<hr><a name="GuildPvp"><h3>Event</h3><br><h2>GuildPvp</h2>
<h3>Description</h3>
<p>Fires whenever an Arena Team's or Warparty's win/loss record or rating has updated.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b>
</ul>
<hr><a name="GuildQueueStateChanged"><h3>Event</h3><br><h2>GuildQueueStateChanged</h2>
<h3>Description</h3>
<p>Fires whenever the arena team's or warparty's enters a queue, leaves a queue, enters a match, or leaves a match.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild who's queue state has updated.
<li><b>eOldState</b><b> (Integer)</b> - The guild's previous queue state.  This lines up with the GuildLib.GuildQueueState set of constants.
<li><b>eNewState</b><b> (Integer)</b> - The guild's new queue state.  This lines up with the GuildLib.GuildQueueState set of constants.
</ul>
<h3>Remarks</h3>
<p>Possible values for the different states are:<br>
GuildLib.GuildQueueState_Normal<br>
GuildLib.GuildQueueState_Queuing<br>
GuildLib.GuildQueueState_Queued<br>
GuildLib.GuildQueueState_InBattle</p>
<hr><a name="GuildRankChange"><h3>Event</h3><br><h2>GuildRankChange</h2>
<h3>Description</h3>
<p>Fires whenever a guild, circle, or warparty adds a rank, removes a rank, renames a rank, or changes a rank's permissions.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The guild whose rank was updated.
</ul>
<hr><a name="GuildRegistrarClose"><h3>Event</h3><br><h2>GuildRegistrarClose</h2>
<h3>Description</h3>
<p>Fires whenever the player was interacting with a Guild Registrar and either interacts with another NPC or moves too far from the Registrar</p>
<hr><a name="GuildRegistrarOpen"><h3>Event</h3><br><h2>GuildRegistrarOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a Guild Registrar NPC.</p>
<hr><a name="GuildResult"><h3>Event</h3><br><h2>GuildResult</h2>
<h3>Description</h3>
<p>Fires the result of various guild operations.  These can be error messages, operation types, or success messages</p>
<h3>Params</h3>
<ul>
<li><b>guildSource</b><b> (Guild)</b> - The guild that the operation was performed on.
<li><b>strTarget</b><b> (String)</b> - The name of the target of the operation.  This can be a character name or rank name.
<li><b>nRank</b><b> (Integer)</b> - If the operation was a rank update, then this value is the index of the rank that was updated.  Otherwise, this can be 1 or 0.
<li><b>eResult</b><b> (Integer)</b> - The result of the operation.  This value is pulled from the GuildLib.GuildResult set of constants.
</ul>
<hr><a name="GuildRoster"><h3>Event</h3><br><h2>GuildRoster</h2>
<h3>Description</h3>
<p>Fires in response to Guild:RequestMembers().  This returns a list of the guild's members.</p>
<h3>Params</h3>
<ul>
<li><b>arMembers</b><b> (Array of Table)</b>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the guild member.
<li><b>nRank</b><b> (Integer)</b> - The member's guild rank.
<li><b>strClass</b><b> (String)</b> - The member's class, in string form.
<li><b>eClass</b><b> (GameLib.CodeEnumClass)</b> - The member's class, as an enum.
<li><b>ePathType</b><b> (Integer)</b> - The member's path type.  This lines up with the PlayerPathLib.PlayerPathType set of constants.
<li><b>nLevel</b><b> (Integer)</b> - The member's level.
<li><b>fLastOnline</b><b> (Float)</b> - The amount of time since the player was last online, in days.
<li><b>nPvPWins</b><b> (Integer)</b> - The number of PvP wins that the player has participated in with the guild.  This value is only relevant for Arena Teams and Warparties.
<li><b>nPvPLosses</b><b> (Integer)</b> - The number of PvP losses that the player participated in with the guild. This only applies for Arena Teams and Warparties.
<li><b>nPvPDraws</b><b> (Integer)</b> - The number of PvP draws the player was involved in with the guild. This only applies for Arena Teams and Warparties.
<li><b>strNote</b><b> (String)</b> - The note set by the player.
</ul>
<li><b>guildSource</b><b> (Guild)</b> - The guild that is returning its member roster.
</ul>
<hr><a name="GuildStandard"><h3>Event</h3><br><h2>GuildStandard</h2>
<h3>Description</h3>
<p>Fires whenever the guild's holomark is updated.</p>
<h3>Params</h3>
<ul>
<li><b>guildOwner</b><b> (Guild)</b> - The guild that owns the holomark.
</ul>
<hr><a name="GuildWarCoinsChanged"><h3>Event</h3><br><h2>GuildWarCoinsChanged</h2>
<h3>Description</h3>
<p>Fires whenever the Warparty gains or spends warcoins.</p>
<h3>Params</h3>
<ul>
<li><b>guildUpdated</b><b> (Guild)</b> - The Warparty whose warcoins were updated.
<li><b>nWarcoinsDelta</b><b> (Integer)</b> - The change in the number of warcoins that the guild has.
</ul>
<hr><a name="HarvestItemsSentToOwner"><h3>Event</h3><br><h2>HarvestItemsSentToOwner</h2>
<h3>Description</h3>
<p>Fires whenever the player harvests resources on a neighbor's housing plot while the plot's Resource Sharing returns more than 0% to the owner.</p>
<h3>Params</h3>
<ul>
<li><b>arItemsSent</b><b> (Table)</b>
<ul>
<li><b>item</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that is sent to the plug's owner.
<li><b>nCount</b><b> (Integer)</b> - The stack count of the item that is sent to the plug's owner.
</ul>
</ul>
<hr><a name="HazardEnabled"><h3>Event</h3><br><h2>HazardEnabled</h2>
<h3>Description</h3>
<p>Fires whenever a hazard is activated for the player.  This can be triggered by entering a hazard area or by a quest/event starting a hazard for the player.</p>
<h3>Params</h3>
<ul>
<li><b>idHazard</b><b> (Integer)</b> - The hazard's id number.
<li><b>strDisplayText</b><b> (String)</b> - The string associated with the hazard.  This is displayed next to the hazard bar in the base UI.
</ul>
<hr><a name="HazardRemoved"><h3>Event</h3><br><h2>HazardRemoved</h2>
<h3>Description</h3>
<p>Fires whenever a the conditions for a hazard are removed from the player.</p>
<h3>Params</h3>
<ul>
<li><b>idHazard</b><b> (Integer)</b> - The hazard's id number.
</ul>
<hr><a name="HazardRemoveMinimapUnit"><h3>Event</h3><br><h2>HazardRemoveMinimapUnit</h2>
<h3>Description</h3>
<p>Fires whenever a hazard that is currently shown on the Minimap should be removed.</p>
<h3>Params</h3>
<ul>
<li><b>idHazard</b><b> (Integer)</b> - The id number for the hazard that should be removed.
<li><b>unitRemoved</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit used to represent the hazard on the minimap.
</ul>
<hr><a name="HazardShowMinimapUnit"><h3>Event</h3><br><h2>HazardShowMinimapUnit</h2>
<h3>Description</h3>
<p>Fires whenever a hazard should be displayed on the minimap.</p>
<h3>Params</h3>
<ul>
<li><b>idHazard</b><b> (Integer)</b> - The hazard's id number.
<li><b>unitMarker</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit used to mark the hazard on the minimap.
<li><b>bBeneficial</b><b> (Boolean)</b> - Whether or not the hazard is helpful to the player.
</ul>
<hr><a name="HazardUpdated"><h3>Event</h3><br><h2>HazardUpdated</h2>
<h3>Description</h3>
<p>Fires whenever information about the hazard has been updated.</p>
<hr><a name="HideBank"><h3>Event</h3><br><h2>HideBank</h2>
<h3>Description</h3>
<p>Fires whenever the player is interacting with a Bank NPC and either interacts with another unit or moves too far from the NPC.</p>
<hr><a name="HideDye"><h3>Event</h3><br><h2>HideDye</h2>
<h3>Description</h3>
<p>Fires whenever the player is interacting with a Stylist NPC and either interacts with another unit or moves too far from the NPC.</p>
<hr><a name="HideInstanceGameModeDialog"><h3>Event</h3><br><h2>HideInstanceGameModeDialog</h2>
<h3>Description</h3>
<p>Fires whenever the the player moves away from an instance portal or teleporter after receiving a ShowInstanceGameModeDialog event.</p>
<h3>Params</h3>
<ul>
<li><b>bNeedToNotifyServer</b><b> (Boolean)</b> - Whether or not the server needs to be notified of the window closing.  This should be passed into GameLib.OnClosedInstanceSettings().
</ul>
<hr><a name="HideQuestLog"><h3>Event</h3><br><h2>HideQuestLog</h2>
<h3>Description</h3>
<p>Fires in response to the Event_HideQuestLog() function that can be called from Lua.  </p>
<hr><a name="HighlightProgressOption"><h3>Event</h3><br><h2>HighlightProgressOption</h2>
<h3>Description</h3>
<p>Fires whenever a button flashes during Memory CSIs.</p>
<h3>Params</h3>
<ul>
<li><b>nButton</b><b> (Integer)</b> - The button that should be highlighted.
</ul>
<hr><a name="HintArrowDistanceUpdate"><h3>Event</h3><br><h2>HintArrowDistanceUpdate</h2>
<hr><a name="HousingBasicsUpdated"><h3>Event</h3><br><h2>HousingBasicsUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player changes the visitor rules for their housing plot.</p>
<hr><a name="HousingBuildComplete"><h3>Event</h3><br><h2>HousingBuildComplete</h2>
<h3>Description</h3>
<p>Fires whenever a housing plug starts building.</p>
<h3>Params</h3>
<ul>
<li><b>nSocketUpdated</b><b> (Integer)</b> - The socket that was updated.
</ul>
<hr><a name="HousingBuildStarted"><h3>Event</h3><br><h2>HousingBuildStarted</h2>
<h3>Description</h3>
<p>Fires whenever the player starts to build a plug on a housing plot.</p>
<h3>Params</h3>
<ul>
<li><b>nSocket</b><b> (Integer)</b> - The socket number where the plug is being built.
</ul>
<hr><a name="HousingButtonCrate"><h3>Event</h3><br><h2>HousingButtonCrate</h2>
<hr><a name="HousingButtonLandscape"><h3>Event</h3><br><h2>HousingButtonLandscape</h2>
<hr><a name="HousingButtonList"><h3>Event</h3><br><h2>HousingButtonList</h2>
<hr><a name="HousingButtonRemodel"><h3>Event</h3><br><h2>HousingButtonRemodel</h2>
<hr><a name="HousingButtonVendor"><h3>Event</h3><br><h2>HousingButtonVendor</h2>
<hr><a name="HousingExitEditMode"><h3>Event</h3><br><h2>HousingExitEditMode</h2>
<hr><a name="HousingMannequinClose"><h3>Event</h3><br><h2>HousingMannequinClose</h2>
<h3>Description</h3>
<p>Fires when the player is interacting with a mannequin and either interacts with another NPC or moves too far away from the mannequin.</p>
<hr><a name="HousingMannequinOpen"><h3>Event</h3><br><h2>HousingMannequinOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a Mannequin.</p>
<hr><a name="HousingNamePropertyOpen"><h3>Event</h3><br><h2>HousingNamePropertyOpen</h2>
<h3>Description</h3>
<p>Fires when a player enters their housing plot when it does not have a name.  It is meant to inform the UI that the player needs to name their home.</p>
<hr><a name="HousingNeighborInviteAccepted"><h3>Event</h3><br><h2>HousingNeighborInviteAccepted</h2>
<h3>Description</h3>
<p>Fires whenever a player is added to the Neighbors list.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The new neighbor's name.
</ul>
<hr><a name="HousingNeighborInviteDeclined"><h3>Event</h3><br><h2>HousingNeighborInviteDeclined</h2>
<h3>Description</h3>
<p>Fired whenever a player declines a neighbor invite that they received.  This event is sent to both the person who sent the invite and the person who declined the invite.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player who declined the invite.
</ul>
<hr><a name="HousingNeighborInviteRecieved"><h3>Event</h3><br><h2>HousingNeighborInviteRecieved</h2>
<h3>Description</h3>
<p>Fires whenever a player is sent an invite from another player.</p>
<h3>Params</h3>
<ul>
<li><b>strInvitorName</b><b> (String)</b> - The name of the player that sent the neighbor invite.
</ul>
<hr><a name="HousingNeighborsLoaded"><h3>Event</h3><br><h2>HousingNeighborsLoaded</h2>
<h3>Description</h3>
<p>Fires whenever a player is removed from the Neighbors list.</p>
<hr><a name="HousingNeighborUpdate"><h3>Event</h3><br><h2>HousingNeighborUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a player is added as a neighbor, a neighbor goes offline or comes online, or a player is set as a roommate.</p>
<h3>Params</h3>
<ul>
<li><b>idNeighbor</b><b> (Integer)</b> - The neighbor id of the player that was updated.
</ul>
<hr><a name="HousingPrivacyUpdated"><h3>Event</h3><br><h2>HousingPrivacyUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a player changes their housing plot's visiter rules to or from Private.</p>
<h3>Params</h3>
<ul>
<li><b>bIsPrivate</b><b> (Boolean)</b> - Determines whether or not the building is private.
</ul>
<hr><a name="HousingRandomResidenceListRecieved"><h3>Event</h3><br><h2>HousingRandomResidenceListRecieved</h2>
<h3>Description</h3>
<p>Fires in response to HousingLib.RequestRandomResidenceList().  </p>
<h3>Usage/Example</h3>
<pre>Note, this event does not contain the resdence list.  It only informs the player that the list is ready to be obtained via the HousingLib.GetRandomResidenceList.</pre>
<hr><a name="HousingRealtorOpen"><h3>Event</h3><br><h2>HousingRealtorOpen (Deprecated)</h2>
<hr><a name="HousingResult"><h3>Event</h3><br><h2>HousingResult</h2>
<h3>Description</h3>
<p>Fires whenever an error is thrown due to a housing operation.</p>
<h3>Params</h3>
<ul>
<li><b>strName</b><b> (String)</b> - The name of the player who caused the error.
<li><b>eResult</b><b> (Integer)</b> - The error message sent.  These are found in the HousingLib.HousingResult set of constants.
</ul>
<hr><a name="Inspect"><h3>Event</h3><br><h2>Inspect</h2>
<h3>Description</h3>
<p>Fires whenever the server returns information from the Unit:Inspect() function.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the inspect function was called on.
<li><b>arItems</b><b> (Array of <a href="../Classes/Item.htm">Item</a>)</b> - The items that unitTarget currently has equipped.
</ul>
<hr><a name="InstanceSetBusy"><h3>Event</h3><br><h2>InstanceSetBusy (Deprecated)</h2>
<hr><a name="Interaction"><h3>Event</h3><br><h2>Interaction (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>title</b><b> (String)</b>
<li><b>type</b><b> (Integer)</b>
<li><b>speed</b><b> (Integer)</b>
<li><b>sweetspot</b><b> (Integer)</b>
<li><b>width1</b><b> (Integer)</b>
<li><b>width2</b><b> (Integer)</b>
</ul>
<hr><a name="InterfaceMenu_ToggleLoreWindow"><h3>Event</h3><br><h2>InterfaceMenu_ToggleLoreWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to the Lore window.</p>
<hr><a name="InvokeCraftingWindow"><h3>Event</h3><br><h2>InvokeCraftingWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a crafting station.</p>
<hr><a name="InvokeEscapeMenu"><h3>Event</h3><br><h2>InvokeEscapeMenu (Deprecated)</h2>
<hr><a name="InvokeFriendsList"><h3>Event</h3><br><h2>InvokeFriendsList (Deprecated)</h2>
<hr><a name="InvokeOptionsDialog"><h3>Event</h3><br><h2>InvokeOptionsDialog (Deprecated)</h2>
<hr><a name="InvokeScientistExperimentation"><h3>Event</h3><br><h2>InvokeScientistExperimentation</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with an object or NPC that starts a Scientist Experimentation minigame.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that the experimentation minigame belongs to.
</ul>
<hr><a name="InvokeSettlerBuild"><h3>Event</h3><br><h2>InvokeSettlerBuild</h2>
<h3>Description</h3>
<p>Fires whenever a settler interacts with a settler depot.</p>
<h3>Params</h3>
<ul>
<li><b>unitHub</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The settler hub that the player is interacting with.
<li><b>arImprovements</b><b> (Array of <a href="../Classes/SettlerImprovement.htm">SettlerImprovement</a>)</b> - An array of settler improvements that can be built at this hub.
</ul>
<hr><a name="InvokeShuttlePrompt"><h3>Event</h3><br><h2>InvokeShuttlePrompt (Deprecated)</h2>
<hr><a name="InvokeSoldierBuild"><h3>Event</h3><br><h2>InvokeSoldierBuild (Deprecated)</h2>
<hr><a name="InvokeTaxiWindow"><h3>Event</h3><br><h2>InvokeTaxiWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a taxi vendor.</p>
<h3>Params</h3>
<ul>
<li><b>unitTaxi</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The taxi station that the player interacted with.
<li><b>bIsSettlerTaxi</b><b> (Boolean)</b> - Whether or not this taxi station was created as a settler improvement.
</ul>
<hr><a name="InvokeTradeskillTrainerWindow"><h3>Event</h3><br><h2>InvokeTradeskillTrainerWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a tradeskill trainer.</p>
<h3>Params</h3>
<ul>
<li><b>unitTrainer</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The tradeskill trainer NPC that the player interacted with.
</ul>
<hr><a name="InvokeVendorWindow"><h3>Event</h3><br><h2>InvokeVendorWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a vendor NPC.</p>
<h3>Params</h3>
<ul>
<li><b>unitVendor</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The vendor that the player interacted with.
</ul>
<hr><a name="ItemAdded"><h3>Event</h3><br><h2>ItemAdded</h2>
<h3>Description</h3>
<p>Fires whenever an item is placed in a player's inventory by a method other than looting.</p>
<h3>Params</h3>
<ul>
<li><b>itemBase</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The base version of the item that was added, before random stats, glyphs, or microchips are factored in.
<li><b>nCount</b><b> (Integer)</b> - How many stacks of the item were added to the player's inventory.
<li><b>eUpdateReason</b><b> (Item.CodeEnumItemUpdateReason)</b> - A value that represents the method that was used to obtain the item.
<li><b>itemInstance</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The specific instance of the item.  This is the version of the item that the player sees in their inventory.
</ul>
<h3>Remarks</h3>
<p>Examples of actions that would trigger this event include salvaging items, taking an item from the account inventory, crafting an item, and purchasing an item from a vendor.</p>
<hr><a name="ItemAuctionBidPosted"><h3>Event</h3><br><h2>ItemAuctionBidPosted</h2>
<h3>Description</h3>
<p>Fires whenever someone places a bid on an item that the player has posted on the Auction House.  This does not apply for items where the person who bought the item selected the "Buy Now" option</p>
<h3>Params</h3>
<ul>
<li><b>auctBidOn</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that was bid on.
</ul>
<hr><a name="ItemAuctionBidResult"><h3>Event</h3><br><h2>ItemAuctionBidResult</h2>
<h3>Description</h3>
<p>Fires whenever the player places a bid or selects the "Buy Now" option for an item on the auction house.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (GameLib.CodeEnumGenericError)</b> - The result of the player's attempt to place a bid on the auction.  A result of Ok means the bid was successful.
<li><b>auctBidOn</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that the player bid on or bought.
</ul>
<hr><a name="ItemAuctionExpired"><h3>Event</h3><br><h2>ItemAuctionExpired</h2>
<h3>Description</h3>
<p>Fires whenever an auction's listing expires.</p>
<h3>Params</h3>
<ul>
<li><b>auctExpired</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that expired.
</ul>
<hr><a name="ItemAuctionOutbid"><h3>Event</h3><br><h2>ItemAuctionOutbid</h2>
<h3>Description</h3>
<p>Fires whenever someone else places a higher bid or buys an auction that the player had bid on.</p>
<h3>Params</h3>
<ul>
<li><b>auctBidOn</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The item that the player was outbid on.
</ul>
<hr><a name="ItemAuctionsDisabled"><h3>Event</h3><br><h2>ItemAuctionsDisabled</h2>
<h3>Description</h3>
<p>Fires if the Auction House is disabled or re-enabled by the server.</p>
<h3>Params</h3>
<ul>
<li><b>bDisabled</b><b> (Boolean)</b> - Whether or not the Auction House is disabled.
</ul>
<hr><a name="ItemAuctionSearchResults"><h3>Event</h3><br><h2>ItemAuctionSearchResults</h2>
<h3>Description</h3>
<p>Returns results from the the MarketplaceLib.SearchAuctionableItems() function.</p>
<h3>Params</h3>
<ul>
<li><b>nPage</b><b> (Integer)</b> - The page that the player is currently viewing.
<li><b>nTotalResults</b><b> (Integer)</b> - The total number of search results that the player has received.
<li><b>arAuctions</b><b> (Array of <a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - An array containing all of the auctions returned in the search results.
</ul>
<hr><a name="ItemAuctionWon"><h3>Event</h3><br><h2>ItemAuctionWon</h2>
<h3>Description</h3>
<p>Fires whenever the player wins an auction.</p>
<h3>Params</h3>
<ul>
<li><b>auctWon</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that the player won.
</ul>
<hr><a name="ItemCancelResult"><h3>Event</h3><br><h2>ItemCancelResult</h2>
<h3>Description</h3>
<p>Fires whenever the player tries to cancel one of their auctions.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (GameLib.CodeEnumGenericError)</b> - The result of the player's attempt to cancel the auction.  If it was successful, this value will be Ok.
<li><b>auctCanceled</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that the player attempted to cancel.
</ul>
<hr><a name="ItemDurabilityUpdate"><h3>Event</h3><br><h2>ItemDurabilityUpdate</h2>
<h3>Description</h3>
<p>Fires whenever one of the player's items loses some durability or gets repaired.</p>
<h3>Params</h3>
<ul>
<li><b>itemUpdated</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item whose durability changed.
<li><b>nPreviousDurability</b><b> (Integer)</b> - The item's durability before the update.
</ul>
<hr><a name="ItemLink"><h3>Event</h3><br><h2>ItemLink</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to add an item link to the chat window.</p>
<h3>Params</h3>
<ul>
<li><b>itemLinked</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was linked in chat.
</ul>
<hr><a name="ItemModified"><h3>Event</h3><br><h2>ItemModified</h2>
<h3>Description</h3>
<p>Fires whenever the player makes a change to an item.  These changes include adding runes, removing runes, and unlocking additional rune slots.</p>
<h3>Params</h3>
<ul>
<li><b>itemModified</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player modified.
</ul>
<hr><a name="ItemRemoved"><h3>Event</h3><br><h2>ItemRemoved</h2>
<h3>Description</h3>
<p>Fires whenever an item is removed from the player's inventory.  This can be caused by destroying the item, turning in a quest that auto-removes the item, salvaging the item, or selling the item at a vendor. </p>
<h3>Params</h3>
<ul>
<li><b>itemRemoved</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was removed from the player's inventory.
<li><b>nCount</b><b> (Integer)</b> - The stack size of the item that was deleted.
<li><b>eReason</b><b> (Item.CodeEnumItemUpdateReason)</b> - The reason the item was updated.
</ul>
<hr><a name="ItemSentToCrate"><h3>Event</h3><br><h2>ItemSentToCrate</h2>
<h3>Description</h3>
<p>Fires whenever the player sends a decor item from their inventory to the crate.</p>
<h3>Params</h3>
<ul>
<li><b>itemMoved</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The decor item that the player placed in their crate.
<li><b>nCount</b><b> (Integer)</b> - The stack size of the item that was sent to the crate.
<li><b>eReason</b><b> (Item.CodeEnumItemUpdateReason)</b> - The method the player used to send the item to the crate.
</ul>
<hr><a name="KeyBindingKeyChanged"><h3>Event</h3><br><h2>KeyBindingKeyChanged</h2>
<h3>Description</h3>
<p>Fires whenever a player saves changes to their keybindings.  The event is fired once for each keybinding that was changed.</p>
<h3>Params</h3>
<ul>
<li><b>strKeybinding</b><b> (String)</b> - The name of the keybinding that was changed.
</ul>
<hr><a name="LoginError"><h3>Event</h3><br><h2>LoginError</h2>
<h3>Description</h3>
<p>Fires whenever an error is thrown while the player attempts to log in.</p>
<h3>Params</h3>
<ul>
<li><b>strErrorMessage</b><b> (String)</b> - The error message that should be shown to the player.
<li><b>bHandled</b><b> (Boolean)</b> - Whether or not the error was handled before it affected the player.
</ul>
<hr><a name="LogOut"><h3>Event</h3><br><h2>LogOut</h2>
<h3>Description</h3>
<p>Fires whenever the player finishes logging out with their character.</p>
<hr><a name="LootAssigned"><h3>Event</h3><br><h2>LootAssigned</h2>
<h3>Description</h3>
<p>Fires whenever a master looter assigns loot to a party or raid member.  This event is seen by everyone in the party or raid.</p>
<h3>Params</h3>
<ul>
<li><b>itemAssigned</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was assigned to the player.
<li><b>strWinnerName</b><b> (String)</b> - The name of the player that the item was assigned to.
</ul>
<hr><a name="LootBindcheck"><h3>Event</h3><br><h2>LootBindcheck</h2>
<hr><a name="LootRoll"><h3>Event</h3><br><h2>LootRoll</h2>
<h3>Description</h3>
<p>Fires whenever a playerrolls on an item in the Need vs. Greed looting system.  This only fires after every member has selected need, greed, or pass on the item and is sent to every member in the group.</p>
<h3>Params</h3>
<ul>
<li><b>itemLoot</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the players are rolling for.
<li><b>strPlayerName</b><b> (String)</b> - The player that rolled for the item.
<li><b>bNeed</b><b> (Boolean)</b> - Whether or not the player chose "Need" for the item.
</ul>
<hr><a name="LootRollAllPassed"><h3>Event</h3><br><h2>LootRollAllPassed</h2>
<h3>Description</h3>
<p>Fires when everyone in the group passes on an item under the Need vs. Greed system.</p>
<h3>Params</h3>
<ul>
<li><b>itemPassed</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that all of the players passed on.
</ul>
<hr><a name="LootRollPassed"><h3>Event</h3><br><h2>LootRollPassed</h2>
<h3>Description</h3>
<p>Fires whenever a player passes on an item or does not select an option within the time limit under the Need vs. Greed system.</p>
<h3>Params</h3>
<ul>
<li><b>itemPassed</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player passed on.
<li><b>strPlayerName</b><b> (String)</b> - The name of the player that passed on the item.
</ul>
<hr><a name="LootRollSelected"><h3>Event</h3><br><h2>LootRollSelected</h2>
<h3>Description</h3>
<p>Fires whenever a player selects Need or Greed under the Need vs. Greed loot system.<br>
<br>
</p>
<h3>Params</h3>
<ul>
<li><b>itemRolling</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player chose to roll for.
<li><b>strPlayerName</b><b> (String)</b> - The name of the player that chose to roll.
<li><b>bNeed</b><b> (Boolean)</b> - Whether or not the player chose to roll Need on the item.
</ul>
<hr><a name="LootRollUpdate"><h3>Event</h3><br><h2>LootRollUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a new item is added or removed from the list of items that the player can roll for.  </p>
<hr><a name="LootRollWon"><h3>Event</h3><br><h2>LootRollWon</h2>
<h3>Description</h3>
<p>Fires whenever a player wins a piece of loot under the Need vs. Greed system.</p>
<h3>Params</h3>
<ul>
<li><b>itemWon</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player won.
<li><b>strWinnerName</b><b> (String)</b> - The name of the player who won the roll.
<li><b>bNeed</b><b> (Boolean)</b> - Whether or not the player chose "Need" on the item.
</ul>
<hr><a name="LootTakenBy"><h3>Event</h3><br><h2>LootTakenBy</h2>
<hr><a name="MailAddAttachment"><h3>Event</h3><br><h2>MailAddAttachment</h2>
<h3>Description</h3>
<p>Fires whenever the player right clicks an item in their inventory to attach it to a mail message.</p>
<h3>Params</h3>
<ul>
<li><b>nLocationId</b><b> (Integer)</b> - An id number that represents the item's location in the player's inventory.
</ul>
<h3>Usage/Example</h3>
<pre>The value from this function can be passed into functions such as Unit:LockInventorySlot().</pre>
<hr><a name="MailBoxActivate"><h3>Event</h3><br><h2>MailBoxActivate</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a mailbox.</p>
<hr><a name="MailBoxDeactivate"><h3>Event</h3><br><h2>MailBoxDeactivate</h2>
<h3>Description</h3>
<p>Fires whenever the player is interacting with a mailbox and interacts with another targets or moves far enough away from the mailbox.</p>
<hr><a name="MailRead"><h3>Event</h3><br><h2>MailRead</h2>
<h3>Description</h3>
<p>Fires whenever the player opens a piece of mail that was previously unread.</p>
<h3>Params</h3>
<ul>
<li><b>strMailId</b><b> (String)</b> - The identifier for the mail that was read.
</ul>
<hr><a name="MailResult"><h3>Event</h3><br><h2>MailResult</h2>
<h3>Description</h3>
<p>Fires whenever an error is thrown when the player attempts to perform a mail action</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (GameLib.CodeEnumGenericError)</b> - The reason the operation failed.
</ul>
<hr><a name="MannequinWindowClose"><h3>Event</h3><br><h2>MannequinWindowClose (Deprecated)</h2>
<hr><a name="MannequinWindowOpen"><h3>Event</h3><br><h2>MannequinWindowOpen (Deprecated)</h2>
<hr><a name="MapHexesRevealed"><h3>Event</h3><br><h2>MapHexesRevealed (Deprecated)</h2>
<hr><a name="MapTrackedUnitDisable"><h3>Event</h3><br><h2>MapTrackedUnitDisable (Deprecated)</h2>
<hr><a name="MapTrackedUnitUpdate"><h3>Event</h3><br><h2>MapTrackedUnitUpdate (Deprecated)</h2>
<hr><a name="MarketplaceWindowClose"><h3>Event</h3><br><h2>MarketplaceWindowClose</h2>
<h3>Description</h3>
<p>Fires whenever the player is interacting with the Commodities Exchange NPC, then interacts with another NPC or moves too far from the Commodities Exchange NPC.</p>
<hr><a name="MasterLootUpdate"><h3>Event</h3><br><h2>MasterLootUpdate</h2>
<h3>Description</h3>
<p>Fires whenever the items available to be assigned by the master looter change.  This is fired for everyone in the party or raid.</p>
<hr><a name="MatchEntered"><h3>Event</h3><br><h2>MatchEntered</h2>
<h3>Description</h3>
<p>Fired whenever the player enters a PvP Match.  </p>
<hr><a name="MatchExited"><h3>Event</h3><br><h2>MatchExited</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves a PvP Match.</p>
<hr><a name="MatchFinished"><h3>Event</h3><br><h2>MatchFinished</h2>
<h3>Description</h3>
<p>Fires when the PvP Match ends.</p>
<hr><a name="MatchingAverageWaitTimeUpdated"><h3>Event</h3><br><h2>MatchingAverageWaitTimeUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the server recognizes a change in the average wait time for the Match the player is queued for.</p>
<hr><a name="MatchingCancelPendingGame"><h3>Event</h3><br><h2>MatchingCancelPendingGame</h2>
<h3>Description</h3>
<p>Fires whenever a player fails to respond to a pending Match notification before it times out or a member of the group declines to join the pending game.</p>
<hr><a name="MatchingEligibilityChanged"><h3>Event</h3><br><h2>MatchingEligibilityChanged</h2>
<h3>Description</h3>
<p>Fires whenever a group member's eligibility for the dungeon that the group is queued for changes.  </p>
<hr><a name="MatchingGamePendingUpdate"><h3>Event</h3><br><h2>MatchingGamePendingUpdate</h2>
<h3>Description</h3>
<p>Fires whenever players that were sent the pending game notification accept or decline to join the match.</p>
<hr><a name="MatchingGameReady"><h3>Event</h3><br><h2>MatchingGameReady</h2>
<h3>Description</h3>
<p>Fires whenever the player is able to join a matching game.</p>
<h3>Params</h3>
<ul>
<li><b>bInProgress</b><b> (Boolean)</b> - Whether the match that the player has already started or not.
</ul>
<hr><a name="MatchingJoinQueue"><h3>Event</h3><br><h2>MatchingJoinQueue</h2>
<h3>Description</h3>
<p>Fires whenever the player successfully joins a matching queue.</p>
<hr><a name="MatchingLeaveQueue"><h3>Event</h3><br><h2>MatchingLeaveQueue</h2>
<h3>Description</h3>
<p>Fires whenever the player successfully leaves a matching queue, declines to join a pending match, or allows a pending match notification to time out.</p>
<hr><a name="MatchingPvpInactivityAlert"><h3>Event</h3><br><h2>MatchingPvpInactivityAlert</h2>
<h3>Description</h3>
<p>Fires at regular intervals if the player is AFK in a PvP match.  This is triggered when the player has 2 minutes, 1 minute, 30 seconds, and 5 second intervals before they are removed from a match.</p>
<h3>Params</h3>
<ul>
<li><b>nRemainingTimeMs</b><b> (Integer)</b> - The amount of time before the player is removed from the match, in Milliseconds.
</ul>
<hr><a name="MatchingRoleCheckCanceled"><h3>Event</h3><br><h2>MatchingRoleCheckCanceled</h2>
<hr><a name="MatchingRoleCheckHidden"><h3>Event</h3><br><h2>MatchingRoleCheckHidden</h2>
<h3>Description</h3>
<p>Fires if the player is the one who joined the queue for a dungeon or adventure.  If the player is part of a group that joined the queue together but is not the leader of that group, they will not receive this event.</p>
<hr><a name="MatchingRoleCheckStarted"><h3>Event</h3><br><h2>MatchingRoleCheckStarted</h2>
<h3>Description</h3>
<p>Fires when a group queues for a dungeon or adventure or when they look for new members from the queue.</p>
<hr><a name="MatchJoined"><h3>Event</h3><br><h2>MatchJoined</h2>
<h3>Description</h3>
<p>Fires when the player initially joins a match.</p>
<hr><a name="MatchLeft"><h3>Event</h3><br><h2>MatchLeft</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves the matching game.</p>
<hr><a name="MatchLookingForReplacements"><h3>Event</h3><br><h2>MatchLookingForReplacements</h2>
<h3>Description</h3>
<p>Fires when an existing group starts looking for replacements.  This event is the result of the MatchingGame:LookForReplacements() function successfully processing.</p>
<hr><a name="MatchStoppedLookingForReplacements"><h3>Event</h3><br><h2>MatchStoppedLookingForReplacements</h2>
<h3>Description</h3>
<p>Fires whenever a group that is looking for replacements fills or in response to MatchingGame:StopLookingForReplacements()</p>
<hr><a name="MatchVoteKickBegin"><h3>Event</h3><br><h2>MatchVoteKickBegin</h2>
<h3>Description</h3>
<p>Fires in response to someone in the group starting a vote to kick another player from the group using the MatchingGame:InitiateVoteToKick() function.</p>
<h3>Params</h3>
<ul>
<li><b>unitMember</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The member that will be kicked if the vote is successful.
</ul>
<hr><a name="MatchVoteKickEnd"><h3>Event</h3><br><h2>MatchVoteKickEnd</h2>
<h3>Description</h3>
<p>Fires when the server determines that a vote to kick a player has finished or was canceled.</p>
<hr><a name="MatchVoteSurrenderBegin"><h3>Event</h3><br><h2>MatchVoteSurrenderBegin</h2>
<h3>Description</h3>
<p>Fires whenever a call to MatchingGame:InitiateVoteToSurrender() is successfully called by someone on the player's team during a PvP match.</p>
<hr><a name="MatchVoteSurrenderEnd"><h3>Event</h3><br><h2>MatchVoteSurrenderEnd</h2>
<h3>Description</h3>
<p>Fires when the server determines that a vote to surrender a PvP match has finished or was canceled.</p>
<hr><a name="MessageFinished"><h3>Event</h3><br><h2>MessageFinished</h2>
<h3>Description</h3>
<p>Fires whenever a floating text message is destroyed.</p>
<h3>Params</h3>
<ul>
<li><b>uMessage</b><b> (Userdata)</b> - The floating text object that was destroyed.
</ul>
<hr><a name="MountUnlocked"><h3>Event</h3><br><h2>MountUnlocked</h2>
<h3>Description</h3>
<p>Fires whenever the player unlocks a new mount.</p>
<h3>Params</h3>
<ul>
<li><b>nMountId</b><b> (Integer)</b> - The id number of the mount that was unlocked.
</ul>
<hr><a name="MouseOverUnitChanged"><h3>Event</h3><br><h2>MouseOverUnitChanged</h2>
<h3>Description</h3>
<p>Fires whenever the mouse is moved over a unit or off of a unit.</p>
<h3>Params</h3>
<ul>
<li><b>unitMouseOver</b><b> (unit)</b> - The unit that the mouse is currently over.  This value is nil if the mouse moves off of a unit.
</ul>
<hr><a name="NewCustomerSurveyRequest"><h3>Event</h3><br><h2>NewCustomerSurveyRequest</h2>
<h3>Description</h3>
<p>Fires whenever the player is asked to fill out a customer survey.</p>
<h3>Params</h3>
<ul>
<li><b>nSurveyCount</b><b> (Integer)</b> - The number of customer surveys the player has queued.
</ul>
<hr><a name="NextFrame"><h3>Event</h3><br><h2>NextFrame</h2>
<h3>Description</h3>
<p>Fires once every frame.</p>
<hr><a name="OnInstanceResetResult"><h3>Event</h3><br><h2>OnInstanceResetResult</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to reset an instance of a dungeon or adventure.</p>
<h3>Params</h3>
<ul>
<li><b>bSuccessful</b><b> (Boolean)</b> - Whether or not the instance was able to reset.
</ul>
<hr><a name="OwnedCommodityOrders"><h3>Event</h3><br><h2>OwnedCommodityOrders</h2>
<h3>Description</h3>
<p>Fires in response to MarketplaceLib.RequestOwnedCommodityOrders().</p>
<h3>Params</h3>
<ul>
<li><b>arOrders</b><b> (Array of <a href="../Classes/CommodityOrder.htm">CommodityOrder</a>)</b> - An array that contains the player's open buy and sell orders on the commodity exchange.
</ul>
<hr><a name="OwnedItemAuctions"><h3>Event</h3><br><h2>OwnedItemAuctions</h2>
<h3>Description</h3>
<p>Fires in response to the MarketplaceLib.RequestOwnedItemAuctions() function.</p>
<h3>Params</h3>
<ul>
<li><b>arAuctions</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - An array of the player's open bids and listed items on the auction house.
</ul>
<hr><a name="P2PTradeCommit"><h3>Event</h3><br><h2>P2PTradeCommit</h2>
<h3>Description</h3>
<p>Fired whenever the player commits to a trade using a TradeCommitButton or an ActionConfirmButton whose data is set to GameLib.CodeEnumConfirmButtonType.CommitTrade.</p>
<hr><a name="PartyBagItemAdded"><h3>Event</h3><br><h2>PartyBagItemAdded (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemAwarded"><h3>Event</h3><br><h2>PartyBagItemAwarded (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemRemoved"><h3>Event</h3><br><h2>PartyBagItemRemoved (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemTimerStarted"><h3>Event</h3><br><h2>PartyBagItemTimerStarted</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemTimerStopped"><h3>Event</h3><br><h2>PartyBagItemTimerStopped (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemTimerTick"><h3>Event</h3><br><h2>PartyBagItemTimerTick (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>msTimeRemaining</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagItemUpdated"><h3>Event</h3><br><h2>PartyBagItemUpdated (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>guid</b><b> (Integer)</b>
</ul>
<hr><a name="PartyBagSharedItemsChanged"><h3>Event</h3><br><h2>PartyBagSharedItemsChanged (Deprecated)</h2>
<hr><a name="PathLevelUp"><h3>Event</h3><br><h2>PathLevelUp</h2>
<h3>Description</h3>
<p>Fires whenever the player gains a path level.</p>
<h3>Params</h3>
<ul>
<li><b>nLevel</b><b> (Integer)</b> - The player's new path level.
<li><b>strMessage</b><b> (String)</b> - The message that is shown in chat when the event is fired.
</ul>
<hr><a name="PendingLootInteract"><h3>Event</h3><br><h2>PendingLootInteract</h2>
<hr><a name="PendingWorldRemovalCancel"><h3>Event</h3><br><h2>PendingWorldRemovalCancel</h2>
<hr><a name="PendingWorldRemovalWarning"><h3>Event</h3><br><h2>PendingWorldRemovalWarning</h2>
<hr><a name="PersonaUpdateCharacterStats"><h3>Event</h3><br><h2>PersonaUpdateCharacterStats</h2>
<h3>Description</h3>
<p>Fires whenever the player moves an item from one inventory slot to another, the player gains a new item, or the player's stats change (via a buff, debuff, or new equipment).</p>
<hr><a name="PetCustomizationFailed"><h3>Event</h3><br><h2>PetCustomizationFailed</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to customize their pet or scanbot and the attempt is not successful.</p>
<h3>Params</h3>
<ul>
<li><b>tInfo</b><b> (Table)</b>
<ul>
<li><b>ePetType</b><b> (PetCustomizationLib.PetType)</b> - The type of pet that the player tried to customize.
<li><b>idPet</b><b> (Integer)</b> - The id number of the pet.
<li><b>nFlairSlotIndex</b><b> (Integer)</b> - The flair slot that the player tried to modify.
<li><b>pcFlair</b><b> (<a href="../Classes/PetFlair.htm">PetFlair</a>)</b> - The piece of flair that the player tried to set to nFlairSlotIndex.
</ul>
<li><b>eResult</b><b> (PetCustomizationLib.PetCustomizeResult)</b> - The reason why the customization attempt failed.
</ul>
<hr><a name="PetCustomizationUpdated"><h3>Event</h3><br><h2>PetCustomizationUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player successfully update's a pet or scanbot's customization options.</p>
<h3>Params</h3>
<ul>
<li><b>pcCustomization</b><b> (<a href="../Classes/PetCustomization.htm">PetCustomization</a>)</b> - The pet's new customization info.
</ul>
<hr><a name="PetFlairCleared"><h3>Event</h3><br><h2>PetFlairCleared</h2>
<hr><a name="PetFlairUnlocked"><h3>Event</h3><br><h2>PetFlairUnlocked</h2>
<h3>Description</h3>
<p>Fires whenever the player unlocks a new piece of flair for their pet or scanbot.</p>
<h3>Params</h3>
<ul>
<li><b>idFlair</b><b> (Integer)</b> - The id number of the pet flair that was unlocked.
</ul>
<hr><a name="PlayedTime"><h3>Event</h3><br><h2>PlayedTime</h2>
<h3>Description</h3>
<p>Fires whenever the player types /played in chat.</p>
<h3>Params</h3>
<ul>
<li><b>strCreationMessage</b><b> (String)</b> - A string describing when the character was created.
<li><b>strPlayedTotal</b><b> (String)</b> - A string describing the amount of time the player has played the game.
<li><b>strPlayedThisLevel</b><b> (String)</b> - A string describing how much time the player has spent in game since gaining a level.
<li><b>strPlayedThisSession</b><b> (String)</b> - A string describing how long the player has played since logging in this session.
<li><b>strCreationDate</b><b> (String)</b> - A string that contains the character's creation date and time.
<li><b>nTimePlayedTotal</b><b> (Integer)</b> - The amount of time that the player has played this character, in seconds.
<li><b>nTimePlayedLevel</b><b> (Integer)</b> - The amount of time that the player has played since the character last leveled up, in seconds.
<li><b>nTimePlayedSession</b><b> (Integer)</b> - The amount of time the player has played since logging in, in seconds.
</ul>
<hr><a name="PlayerChanged"><h3>Event</h3><br><h2>PlayerChanged</h2>
<h3>Description</h3>
<p>Fires when the player first logs in, indicating that it has loaded.</p>
<hr><a name="PlayerCurrencyChanged"><h3>Event</h3><br><h2>PlayerCurrencyChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player earns or spends any form of currency.</p>
<hr><a name="PlayerEnteredWorld"><h3>Event</h3><br><h2>PlayerEnteredWorld</h2>
<hr><a name="PlayerEquippedItemChanged"><h3>Event</h3><br><h2>PlayerEquippedItemChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player equips or removes a piece of equipment.</p>
<h3>Params</h3>
<ul>
<li><b>eSlot</b><b> (GameLib.CodeEnumEquippedItems)</b> - The equipment slot that was updated.
<li><b>itemNew</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was placed in the slot after the update.  If no item was added, then this value will be nil.
<li><b>itemOld</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that was in the slot before the update.  If the slot was empty, this value will be nil.
</ul>
<hr><a name="PlayerLevelChange"><h3>Event</h3><br><h2>PlayerLevelChange</h2>
<h3>Description</h3>
<p>Fires whenever the player gains a level.  This is not effected by changes in effective level caused by mentoring or rallying.</p>
<h3>Params</h3>
<ul>
<li><b>nLevel</b><b> (Integer)</b> - The player's new level.
<li><b>nAttributePoints</b><b> (Integer)</b> - The number of attribute points that the player has available at the new level.  This should always be 0.
<li><b>nAbilityPoints</b><b> (Integer)</b> - The number of ability points granted to the character at the new level.
</ul>
<hr><a name="PlayerPathAdd"><h3>Event</h3><br><h2>PlayerPathAdd</h2>
<hr><a name="PlayerPathExplorerPowerMapEntered"><h3>Event</h3><br><h2>PlayerPathExplorerPowerMapEntered</h2>
<h3>Description</h3>
<p>Fires whenever the player enters an area where a Tracking mission can be started</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The Tracking mission that can be started at this location.
</ul>
<hr><a name="PlayerPathExplorerPowerMapExited"><h3>Event</h3><br><h2>PlayerPathExplorerPowerMapExited</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves a location where a power map mission can be started.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that could have been started from the location that the player left.
</ul>
<hr><a name="PlayerPathExplorerPowerMapFailed"><h3>Event</h3><br><h2>PlayerPathExplorerPowerMapFailed</h2>
<h3>Description</h3>
<p>Fires whenever the player fails a Tracking mission.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that the player failed.
</ul>
<hr><a name="PlayerPathExplorerPowerMapStarted"><h3>Event</h3><br><h2>PlayerPathExplorerPowerMapStarted</h2>
<h3>Description</h3>
<p>Fires whenever the player successfully starts a Tracking mission.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The Tracking mission that the player started.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the player is supposed to follow for the mission.
</ul>
<hr><a name="PlayerPathExplorerPowerMapWaiting"><h3>Event</h3><br><h2>PlayerPathExplorerPowerMapWaiting</h2>
<h3>Description</h3>
<p>Fires when the unit that is being tracked in a Tracking mission reaches its destination before the player.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The Tracking mission that the player is on.
<li><b>nVictoryDelay</b><b> (Integer)</b> - The amount of time the player has to reach the destination before the mission fails.
</ul>
<hr><a name="PlayerPathExplorerScavengerHuntStarted"><h3>Event</h3><br><h2>PlayerPathExplorerScavengerHuntStarted</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with the NPC that starts a Scavenger Hunt mission.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The Scavenger Hunt mission that was started.
</ul>
<hr><a name="PlayerPathMissionAdvanced"><h3>Event</h3><br><h2>PlayerPathMissionAdvanced</h2>
<h3>Description</h3>
<p>Fires whenever progress is made on a multi-step path mission.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that was advanced.
</ul>
<hr><a name="PlayerPathMissionComplete"><h3>Event</h3><br><h2>PlayerPathMissionComplete</h2>
<h3>Description</h3>
<p>Fires whenever the player completes a path mission.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that the player just completed.
</ul>
<hr><a name="PlayerPathMissionCompleteSound"><h3>Event</h3><br><h2>PlayerPathMissionCompleteSound (Deprecated)</h2>
<hr><a name="PlayerPathMissionUnlocked"><h3>Event</h3><br><h2>PlayerPathMissionUnlocked</h2>
<h3>Description</h3>
<p>Fires whenever the player unlocks a new path mission.  If multiple missions are unlocked at once, an event will be fired for each of them.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The mission that was unlocked.
</ul>
<hr><a name="PlayerPathMissionUnlockedSound"><h3>Event</h3><br><h2>PlayerPathMissionUnlockedSound</h2>
<h3>Description</h3>
<p>Fires whenever a path mission is unlocked.</p>
<hr><a name="PlayerPathMissionUpdate"><h3>Event</h3><br><h2>PlayerPathMissionUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a path mission is unlocked, advanced, completed, or failed.</p>
<h3>Params</h3>
<ul>
<li><b>pmMission</b><b> (<a href="../Classes/PathMission.htm">PathMission</a>)</b> - The path mission that was updated.
</ul>
<hr><a name="PlayerPathRefresh"><h3>Event</h3><br><h2>PlayerPathRefresh</h2>
<h3>Description</h3>
<p>Fires whenever the player needs to redraw their path information, such as on reloadui or changing zones.</p>
<hr><a name="PlayerPathRewardAvailable"><h3>Event</h3><br><h2>PlayerPathRewardAvailable</h2>
<h3>Description</h3>
<p>Fires whenever the player completes all of the path missions in an episode.</p>
<h3>Params</h3>
<ul>
<li><b>peCompleted</b><b> (<a href="../Classes/PathEpisode.htm">PathEpisode</a>)</b> - The path episode that the player completed.
</ul>
<hr><a name="PlayerPathScientistScanBotCooldown"><h3>Event</h3><br><h2>PlayerPathScientistScanBotCooldown</h2>
<h3>Description</h3>
<p>Fires when the player's ability to summon their scanbot is on cooldown, such as after the player despawns their scanbot or their scanbot is destroyed.</p>
<h3>Params</h3>
<ul>
<li><b>fCooldown</b><b> (Float)</b> - The number of seconds before the player can summon their scanbot.
</ul>
<hr><a name="PlayerPathScientistScanBotDeployed"><h3>Event</h3><br><h2>PlayerPathScientistScanBotDeployed</h2>
<h3>Description</h3>
<p>Fires whenever the player summons their scanbot.</p>
<hr><a name="PlayerPathScientistScanBotDespawned"><h3>Event</h3><br><h2>PlayerPathScientistScanBotDespawned</h2>
<h3>Description</h3>
<p>Fires whenever the player manually despawns their scanbot or their scanbot runs out of HP.</p>
<hr><a name="PlayerPathSoldierNewWhackAMoleBurrows"><h3>Event</h3><br><h2>PlayerPathSoldierNewWhackAMoleBurrows (Deprecated)</h2>
<hr><a name="PlayerPortraitMessage"><h3>Event</h3><br><h2>PlayerPortraitMessage (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>text</b><b> (String)</b>
<li><b>crText</b><b> (Color)</b>
</ul>
<hr><a name="PlayerTitleChange"><h3>Event</h3><br><h2>PlayerTitleChange</h2>
<h3>Description</h3>
<p>Fires whenever the player changes their title.  This only fires to the current player. Other players should handle the UnitTitleChange event.</p>
<hr><a name="PlayerTitleUpdate"><h3>Event</h3><br><h2>PlayerTitleUpdate</h2>
<h3>Description</h3>
<p>Fires whenever the player gains a new title.</p>
<hr><a name="PostCommodityOrderResult"><h3>Event</h3><br><h2>PostCommodityOrderResult</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to post a buy or sell order on the commodities exchange.  Informs the player if the order was successfully placed or an error was thrown.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (GameLib.CodeEnumGenericError)</b> - The result of the operation.  This will return the error that is received, or OK if the operation was successful.
<li><b>orderPosted</b><b> (<a href="../Classes/CommodityOrder.htm">CommodityOrder</a>)</b> - The commodity order that the player attempted to post on the Commodities Exchange.
<li><b>monCost</b><b> (<a href="../Classes/Money.htm">Money</a>)</b> - The cost to post the order.
</ul>
<hr><a name="PostItemAuctionResult"><h3>Event</h3><br><h2>PostItemAuctionResult</h2>
<h3>Description</h3>
<p>Fires when the player attempts to post an auction on the Auction House.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (GameLib.CodeEnumGenericError)</b> - If there was a problem posting the auction, this will contain the error explaining why it failed.  Otherwise, this value will be Ok.
<li><b>auctPosted</b><b> (<a href="../Classes/ItemAuction.htm">ItemAuction</a>)</b> - The auction that the player tried to post.
</ul>
<hr><a name="PrereqFailureMessage"><h3>Event</h3><br><h2>PrereqFailureMessage (Deprecated)</h2>
<hr><a name="PreviousActionBar"><h3>Event</h3><br><h2>PreviousActionBar (Deprecated)</h2>
<hr><a name="ProfessionAchievementUpdated"><h3>Event</h3><br><h2>ProfessionAchievementUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player crafts an item that advances a node in the Tradeskill tech tree.</p>
<h3>Params</h3>
<ul>
<li><b>achUpdated</b><b> (<a href="../Classes/Achievement.htm">Achievement</a>)</b> - The achievement that go updated.
</ul>
<hr><a name="ProfessionsLoaded"><h3>Event</h3><br><h2>ProfessionsLoaded</h2>
<h3>Description</h3>
<p>Fires when the player's tradeskills are done loading.</p>
<hr><a name="ProfessionUpdated"><h3>Event</h3><br><h2>ProfessionUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a profession gains XP, gains a talent point, chooses a talent, unlocks a schematic, or gets traded for another tradeskill.</p>
<h3>Remarks</h3>
<p>Note, this does not get fired for updates to Runecrafting.</p>
<hr><a name="ProgressClickHighlightTime"><h3>Event</h3><br><h2>ProgressClickHighlightTime</h2>
<h3>Description</h3>
<p>Fires twice per frame while the Precision and Metronome CSIs are active.  This informs the UI of whether or not the target areas have been successfully hit by the player.</p>
<h3>Params</h3>
<ul>
<li><b>nTargetIdx</b><b> (Integer)</b> - The target area being referenced.  0 is the first target, and 1 is the second.  If there is only one target, then events will still be fired for both, but only events with nTargetIdx of 0 will matter for that CSI.
<li><b>nPercentageHighlight</b><b> (Integer)</b> - Informs the UI of how much the color for the target area should be changed.  0 is the default color.
</ul>
<hr><a name="ProgressClickWindowCompletionLevel"><h3>Event</h3><br><h2>ProgressClickWindowCompletionLevel</h2>
<h3>Description</h3>
<p>Fires once per frame while the Click and Hold, Rapid Tap, Precision Tap, and Metronome CSIs are active.  For Click and Hold and Rapid Tap CSIs, this tells the UI the CSI's progress.</p>
<h3>Params</h3>
<ul>
<li><b>nProgress</b><b> (Integer)</b> - The CSI's progress on the meter, with 0 being the beginning and 100 being the end.
<li><b>bIsReversed</b><b> (Boolean)</b> - Whether or not the CSI's progress is reversed.  This is primarily used in Metronome CSIs.
</ul>
<hr><a name="ProgressClickWindowDisplay"><h3>Event</h3><br><h2>ProgressClickWindowDisplay</h2>
<h3>Description</h3>
<p>Fires whenever a CSI should be drawn or hidden.</p>
<h3>Params</h3>
<ul>
<li><b>bIsActive</b><b> (Boolean)</b> - Whether or not the CSI should be shown.
</ul>
<hr><a name="PublicEventCleared"><h3>Event</h3><br><h2>PublicEventCleared (Deprecated)</h2>
<h3>Description</h3>
<p>Fires whenever a PublicEvent is removed from the player's list of active events.</p>
<h3>Params</h3>
<ul>
<li><b>peEnding</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The PublicEvent that was cleared from the active list.
</ul>
<hr><a name="PublicEventEnd"><h3>Event</h3><br><h2>PublicEventEnd</h2>
<h3>Description</h3>
<p>Fires when a public event ends.  </p>
<h3>Params</h3>
<ul>
<li><b>peEvent</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that ended.
<li><b>eReason</b><b> (Integer)</b> - The reason the event ended.  This lines up with the PublicEvent.PublicEventParticipantRemoveReason set of int constants.
<li><b>tEventInfo</b><b> (Table)</b>
<ul>
<li><b>nElapsedTime</b><b> (Integer)</b> - The amount of time that elapsed since the event started, in milliseconds.
<li><b>eRewardTier</b><b> (Integer)</b> - The reward tier that the player earned.  This value lines up with the PublicEvent.PublicEventRewardTier set of int constants.
<li><b>eRewardType</b><b> (Integer)</b> - The reason the player received the reward.  This lines up with the PublicEvent.PublicEventRewardTier set of int constants.
<li><b>arRewardThresholds</b><b> (Array of Integer)</b> - The thresholds that the player needs to cross to achieve bronze, silver, and gold rewards.
<li><b>arTeamStats</b><b> (Array of Table)</b> - The total stats for each team involved in the event.
<ul>
<li><b>nDamage</b><b> (Integer)</b> - The amount of damage the team dealt.
<li><b>nDamageReceived</b><b> (Integer)</b> - The amount of damage that the team took.
<li><b>nHits</b><b> (Integer)</b> - The number of attacks the team made that connected with the enemy.
<li><b>nHaters</b><b> (Integer)</b> - The number of people who are gonna hate.
<li><b>nKills</b><b> (Integer)</b> - The number of enemy units the team managed to land the killing blow against.
<li><b>nMaxMultiKills</b><b> (Integer)</b> - The highest number of enemies that were killed with a single attack.
<li><b>nDeaths</b><b> (Integer)</b> - The number of times players on the team died.
<li><b>nHealed</b><b> (Integer)</b> - The amount of healing the team did.
<li><b>nHealingReceived</b><b> (Integer)</b> - The amount of healing that was done to players on the team.
<li><b>nContributions</b><b> (Integer)</b> - The number of objectives the team completed.
<li><b>nLongestLife</b><b> (Integer)</b> - The longest amount of time the team spent between deaths, in milliseconds.
<li><b>nAssists</b><b> (Integer)</b> - The number of enemies players on the team helped kill, but did not land the killing blow against.
<li><b>nSaves</b><b> (Integer)</b> - The number of times the team stopped the enemy from capturing an objective.
<li><b>nOverhealed</b><b> (Integer)</b> - The amount of healing the team did when their target was already at their max health.
<li><b>nOverhealingReceived</b><b> (Integer)</b> - The amount of healing that was done to players on the team while they were at max health.
<li><b>nLongestImpulse</b><b> (Integer)</b> - The highest number of attacks that the team avoided in a row.
<li><b>nKillStreak</b><b> (Integer)</b> - The team's highest kill streak.
<li><b>arCustomStats</b><b> (Array of Table)</b> - An array of stats that are specific to the event.
<ul>
<li><b>strName</b><b> (String)</b> - The name of the stat.
<li><b>nValue</b><b> (Integer)</b> - The value of the stat.
</ul>
</ul>
<li><b>arParticipantStats</b><b> (Array of Table)</b> - The stats for each player involved in the event.
<ul>
<li><b>nDamage</b><b> (Integer)</b> - The amount of damage the player did.
<li><b>nDamageReceived</b><b> (Integer)</b> - The amount of damage the player took.
<li><b>nHits</b><b> (Integer)</b> - The number of attacks the player made that hit an enemy.
<li><b>nHaters</b><b> (Integer)</b> - The number of people who are hating on the player.
<li><b>nKills</b><b> (Integer)</b> - The number of killing blows the player landed.
<li><b>nMaxMultiKills</b><b> (Integer)</b> - The most enemies that were killed in a single attack made by the player.
<li><b>nDeaths</b><b> (Integer)</b> - The number of times the player died.
<li><b>nHealed</b><b> (Integer)</b> - The amount of healing the player did.
<li><b>nHealingReceived</b><b> (Integer)</b> - The amount of healing that other players did to the player.
<li><b>nContributions</b><b> (Integer)</b> - The number of objectives the player completed.
<li><b>nLongestLife</b><b> (Integer)</b> - The longest amount of time the player spent between deaths.
<li><b>nAssists</b><b> (Integer)</b> - The number of enemies the player helped kill, but did not land the killing blow against.
<li><b>nSaves</b><b> (Integer)</b> - The number of times the player prevented the enemy from completing an objective.
<li><b>nOverhealed</b><b> (Integer)</b> - The amount of healing the player did on targets that were already at their max health.
<li><b>nOverhealingReceived</b><b> (Integer)</b> - The amount of healing done to the player while they are at max health.
<li><b>nLongestImpulse</b><b> (Integer)</b> - The highest number of attacks that the player avoided in a row.
<li><b>nKillStreak</b><b> (Integer)</b> - The highest kill streak the player achieved.
<li><b>arCustomStats</b><b> (Array of Table)</b> - An array of custom stats that are specific to the event.
<ul>
<li><b>strName</b><b> (String)</b> - The name of the stat.
<li><b>nValue</b><b> (Integer)</b> - The value of the stat.
</ul>
</ul>
<li><b>arObjectives</b><b> (Array of Table)</b> - An array of the public event's objectives.
<ul>
<li><b>eStatus</b><b> (Integer)</b> - The status of the public event.  This lines up with the PublicEventObjective.PublicEventStatus set of int constants.
<li><b>peoObjective</b><b> (<a href="../Classes/PublicEventObjective.htm">PublicEventObjective</a>)</b> - One of the objectives for this event.
</ul>
</ul>
</ul>
<hr><a name="PublicEventInitiateVote"><h3>Event</h3><br><h2>PublicEventInitiateVote</h2>
<h3>Description</h3>
<p>Fires whenever the public event requires the group to vote on a decision before progressing.</p>
<hr><a name="PublicEventLeave"><h3>Event</h3><br><h2>PublicEventLeave</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves a public event area or zone.</p>
<h3>Params</h3>
<ul>
<li><b>peEvent</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that the player left.
<li><b>eReason</b><b> (Integer)</b> - The reason the event was fired.  This lines up with the PublicEvent.PublicEventParticipantRemoveReason set of int constants.
</ul>
<hr><a name="PublicEventLiveStatsUpdate"><h3>Event</h3><br><h2>PublicEventLiveStatsUpdate</h2>
<h3>Description</h3>
<p>Fires once per second during events with live stats, such as PvP matches.</p>
<h3>Params</h3>
<ul>
<li><b>peUpdated</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event whose stats were updated.
</ul>
<hr><a name="PublicEventLocationAdded"><h3>Event</h3><br><h2>PublicEventLocationAdded (Deprecated)</h2>
<h3>Description</h3>
<p>Fires whenever a new location is added to a public event.</p>
<h3>Params</h3>
<ul>
<li><b>peUpdated</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that the location was added to.
</ul>
<hr><a name="PublicEventLocationRemoved"><h3>Event</h3><br><h2>PublicEventLocationRemoved (Deprecated)</h2>
<h3>Description</h3>
<p>Fires whenever a location is removed from the public event.</p>
<h3>Params</h3>
<ul>
<li><b>peUpdated</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that the location was removed from.
</ul>
<hr><a name="PublicEventObjectiveLocationAdded"><h3>Event</h3><br><h2>PublicEventObjectiveLocationAdded</h2>
<h3>Description</h3>
<p>Fires whenever a location is added to a public event objective.</p>
<h3>Params</h3>
<ul>
<li><b>peoUpdated</b><b> (<a href="../Classes/PublicEventObjective.htm">PublicEventObjective</a>)</b> - The objective that the location was added to.
</ul>
<hr><a name="PublicEventObjectiveLocationRemoved"><h3>Event</h3><br><h2>PublicEventObjectiveLocationRemoved</h2>
<h3>Description</h3>
<p>Fires whenever a location is removed from an objective.</p>
<h3>Params</h3>
<ul>
<li><b>peoUpdated</b><b> (<a href="../Classes/PublicEventObjective.htm">PublicEventObjective</a>)</b> - The public event objective that the location was removed from.
</ul>
<h3>Usage/Example</h3>
<pre>This event is fired after speaking to villagers during the Exodus portion of the Malgrave Adventure.</pre>
<hr><a name="PublicEventObjectiveUpdate"><h3>Event</h3><br><h2>PublicEventObjectiveUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a player progresses a public event objective.</p>
<h3>Params</h3>
<ul>
<li><b>peoUpdated</b><b> (<a href="../Classes/PublicEventObjective.htm">PublicEventObjective</a>)</b> - The public event objective that was updated.
</ul>
<hr><a name="PublicEventStart"><h3>Event</h3><br><h2>PublicEventStart</h2>
<h3>Description</h3>
<p>Fires whenever a public event begins.</p>
<h3>Params</h3>
<ul>
<li><b>peStarting</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that just started.
</ul>
<hr><a name="PublicEventStatsUpdate"><h3>Event</h3><br><h2>PublicEventStatsUpdate</h2>
<h3>Description</h3>
<p>Fires whenever players' public event stats update.  </p>
<h3>Params</h3>
<ul>
<li><b>peUpdated</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event whose stats were updated.
</ul>
<h3>Remarks</h3>
<p>The types of actions that will fire this update are more directly related to progressing the event, such as picking up a mask in Walatiki Temple or speaking to a villager during the Malgrave Adventure.</p>
<hr><a name="PublicEventUnitUpdate"><h3>Event</h3><br><h2>PublicEventUnitUpdate</h2>
<hr><a name="PublicEventUpdate"><h3>Event</h3><br><h2>PublicEventUpdate</h2>
<h3>Description</h3>
<p>Fires whenever a public event updates.</p>
<h3>Params</h3>
<ul>
<li><b>peUpdated</b><b> (<a href="../Classes/PublicEvent.htm">PublicEvent</a>)</b> - The public event that was updated.
</ul>
<hr><a name="PublicEventVoteEnded"><h3>Event</h3><br><h2>PublicEventVoteEnded</h2>
<h3>Description</h3>
<p>Fires when every member of a group has voted when the public event requires it, or when the voting timer runs out.</p>
<h3>Params</h3>
<ul>
<li><b>nWinner</b><b> (Integer)</b> - The voting option with the most votes.
</ul>
<hr><a name="PublicEventVoteTallied"><h3>Event</h3><br><h2>PublicEventVoteTallied</h2>
<h3>Description</h3>
<p>Fires whenever a group member selections an option during a public event vote.</p>
<h3>Params</h3>
<ul>
<li><b>nSelection</b><b> (Integer)</b> - The option that was selected by a player.
</ul>
<hr><a name="PVPDeathmatchPoolUpdated"><h3>Event</h3><br><h2>PVPDeathmatchPoolUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the respawn pool is updated during a PvP match with the Deathmatch ruleset, such as Arenas.</p>
<h3>Params</h3>
<ul>
<li><b>nLivesRemainingTeam1</b><b> (Integer)</b> - The number of respawns team 1 has left.
<li><b>nLivesRemainingTeam2</b><b> (Integer)</b> - The number of respawns team 2 has left.
</ul>
<hr><a name="PvpKillNotification"><h3>Event</h3><br><h2>PvpKillNotification</h2>
<h3>Description</h3>
<p>Fires when a player is killed in PvP.</p>
<h3>Params</h3>
<ul>
<li><b>strVictimName</b><b> (String)</b> - The name of the player that was killed.
<li><b>eReason</b><b> (MatchingGame.PvpDeathReason)</b> - The reason the victim died.
<li><b>strKillerName</b><b> (String)</b> - The name of the unit that killed the victim.
<li><b>eKillerClass</b><b> (GameLib.CodeEnumClass)</b> - The killer's class.
<li><b>eVictimTeam</b><b> (MatchingGame.Team)</b> - The team that the victim is on.
</ul>
<hr><a name="PVPMatchFinished"><h3>Event</h3><br><h2>PVPMatchFinished</h2>
<h3>Description</h3>
<p>Fires when a PvP match ends.</p>
<h3>Params</h3>
<ul>
<li><b>eWinner</b><b> (MatchingGame.Winner)</b> - The team that won the match.
<li><b>eReason</b><b> (MatchingGame.MatchEndReason)</b> - The reason that the match ended.
<li><b>nRatingChangeTeam1</b><b> (Integer)</b> - The amount that Team 1's rating was changed by.
<li><b>nRatingChangeTeam2</b><b> (Integer)</b> - The amount that Team 2's rating was changed by.
</ul>
<hr><a name="PVPMatchStateUpdated"><h3>Event</h3><br><h2>PVPMatchStateUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the PvP match's state is changed.</p>
<h3>Params</h3>
<ul>
<li><b>eState</b><b> (MatchingGame.PVPGameState)</b> - The match's new state.
<li><b>fTimeRemaining</b><b> (Float)</b> - The amount of time remaining before the match automatically changes states, in seconds.
</ul>
<hr><a name="PVPMatchTeamInfoUpdated"><h3>Event</h3><br><h2>PVPMatchTeamInfoUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the information for a team in a PvP match is updated during a match.  This includes when a team first joins a match.</p>
<h3>Usage/Example</h3>
<pre>Examples of changes that could fire this are updating the team's name or rating.</pre>
<hr><a name="PvpRatingUpdated"><h3>Event</h3><br><h2>PvpRatingUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a player's or PvP team's rating changes.</p>
<h3>Params</h3>
<ul>
<li><b>eRatingType</b><b> (MatchingGame.RatingType)</b> - The type of rating that was changed.
</ul>
<hr><a name="QuestCalloutToggle"><h3>Event</h3><br><h2>QuestCalloutToggle</h2>
<h3>Description</h3>
<p>Fires in response to the GameLib.ToggleQuestUnitCallouts() function.  This event tells the UI that the gear / path interact icons on objects in the world were toggled on or off.</p>
<hr><a name="QuestFloater"><h3>Event</h3><br><h2>QuestFloater</h2>
<h3>Description</h3>
<p>Fires whenever the quest is advanced, abandoned, failed, or completed.  This event is meant to give the UI the information it needs to show floating text related to the quest's state change.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who the quest belonged to.
<li><b>strMessage</b><b> (String)</b> - The message that should be shown in the floating text.
<li><b>queUpdated</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest that was updated.
</ul>
<hr><a name="QuestGetCurrentQuestId"><h3>Event</h3><br><h2>QuestGetCurrentQuestId (Deprecated)</h2>
<hr><a name="QuestInit"><h3>Event</h3><br><h2>QuestInit</h2>
<h3>Description</h3>
<p>Fires when the quest system is initialized.</p>
<hr><a name="QuestObjectiveUpdated"><h3>Event</h3><br><h2>QuestObjectiveUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player makes progress on a quest objective.</p>
<h3>Params</h3>
<ul>
<li><b>queUpdated</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest that the objective belongs to.
<li><b>idObjective</b><b> (Integer)</b> - The id of the quest objective that was updated.
<li><b>bIsPathQuest</b><b> (Boolean)</b> - Whether or not the quest objective belongs to a path quest.
</ul>
<hr><a name="QuestPeriodicReset"><h3>Event</h3><br><h2>QuestPeriodicReset</h2>
<hr><a name="QuestStateChanged"><h3>Event</h3><br><h2>QuestStateChanged</h2>
<h3>Description</h3>
<p>Fires whenever the quest's state is updated.</p>
<h3>Params</h3>
<ul>
<li><b>queUpdated</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest whose state was changed.
<li><b>eState</b><b> (Integer)</b> - The quest's new state.  This value lines up with the Quest.QuestState set of int constants.
</ul>
<hr><a name="QuestTrackedChanged"><h3>Event</h3><br><h2>QuestTrackedChanged</h2>
<h3>Description</h3>
<p>Fires whenever a quest becomes tracked or untracked.</p>
<h3>Params</h3>
<ul>
<li><b>queUpdated</b><b> (<a href="../Classes/Quest.htm">Quest</a>)</b> - The quest that was updated.
<li><b>bTracked</b><b> (Boolean)</b> - Whether the quest is now tracked or not.
<li><b>bIsPathQuest</b><b> (Boolean)</b> - Whether or not the quest is a path quest.
</ul>
<hr><a name="RaidInfoResponse"><h3>Event</h3><br><h2>RaidInfoResponse (Deprecated)</h2>
<hr><a name="RealmBroadcastTierHigh"><h3>Event</h3><br><h2>RealmBroadcastTierHigh</h2>
<h3>Description</h3>
<p>Fires whenever a high priority message is broadcast to the entire realm.</p>
<h3>Params</h3>
<ul>
<li><b>strMessage</b><b> (String)</b> - The message that was broadcast.
</ul>
<hr><a name="RealmBroadcastTierMedium"><h3>Event</h3><br><h2>RealmBroadcastTierMedium</h2>
<h3>Description</h3>
<p>Fires whenever a medium priority message is broadcast to the entire realm.</p>
<h3>Params</h3>
<ul>
<li><b>strMessage</b><b> (String)</b> - The message that was broadcast.
</ul>
<hr><a name="RealmFirstAchievementAnnounce"><h3>Event</h3><br><h2>RealmFirstAchievementAnnounce</h2>
<h3>Description</h3>
<p>Fires whenever a player or guild is the first on the realm to earn an achievement.  This only applies to select achievements, such as hitting a certain level, reaching the highest tier of a tradeskill, and clearing certain dungeons and raids, etc.</p>
<h3>Params</h3>
<ul>
<li><b>idAchievement</b><b> (Integer)</b> - The achievement that the player or guild earned.
<li><b>bGuildAchievement</b><b> (Boolean)</b> - Whether the achievement was a guild achievement or not.
<li><b>strName</b><b> (String)</b> - The name of the player or guild who earned the achievement.
<li><b>strMessage</b><b> (String)</b> - The message that is broadcast to the realm when the achievement is earned.
</ul>
<hr><a name="RecallShardChanged"><h3>Event</h3><br><h2>RecallShardChanged (Deprecated)</h2>
<hr><a name="RefreshHealthShieldBar"><h3>Event</h3><br><h2>RefreshHealthShieldBar</h2>
<h3>Description</h3>
<p>Fires whenever the a unit's health or shields is updated.</p>
<h3>Remarks</h3>
<p>Note, this is not fired if the player's absorption shield is updated.  Also, if the damage is applied to both health and shields, this event will fire twice.</p>
<hr><a name="RefreshInventoryBags"><h3>Event</h3><br><h2>RefreshInventoryBags</h2>
<h3>Description</h3>
<p>Fires whenever the player right clicks to use an item or equip an item, or attempts to send a piece of decor to the crate.  This only fires if the item is in the player's inventory.</p>
<hr><a name="RefreshMail"><h3>Event</h3><br><h2>RefreshMail</h2>
<h3>Description</h3>
<p>Fires whenever the player removes money or items attached to a piece of mail.</p>
<h3>Params</h3>
<ul>
<li><b>strMailId</b><b> (String)</b> - The mail's unique id number....as a string.  Yeah, it's weird.
</ul>
<hr><a name="RemoveCCState"><h3>Event</h3><br><h2>RemoveCCState</h2>
<h3>Description</h3>
<p>Fires whenever a CC state is removed from a unit.</p>
<h3>Params</h3>
<ul>
<li><b>eState</b><b> (Unit.CodeEnumCCState)</b> - The CC state that was removed from the unit.
<li><b>unitSource</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the CC state was removed from.
</ul>
<hr><a name="RemoveCCStateStun"><h3>Event</h3><br><h2>RemoveCCStateStun</h2>
<h3>Description</h3>
<p>Fires whenever the player leaves the Stun CC state.</p>
<h3>Remarks</h3>
<p>This is a more focused event than RemoveCCState, in that it only fires for the player that the state was removed from and it only applies if the CC State that was removed was Stun.</p>
<hr><a name="RemoveSpellShortcut"><h3>Event</h3><br><h2>RemoveSpellShortcut</h2>
<h3>Description</h3>
<p>Fires whenever a spell that is part of a quest, challenge, public event, or path mission is removed from the character.</p>
<h3>Params</h3>
<ul>
<li><b>spellData</b><b> (<a href="../Classes/Spell.htm">Spell</a>)</b> - The spell that was removed from the character.
<li><b>eReason</b><b> (Integer)</b> - The reason the player had the spell.
<li><b>idSource</b><b> (Integer)</b> - The id number of the quest, quest objective, challenge, public event, public event objective, or path mission that the spell is tied to.
</ul>
<hr><a name="RepairItemCompleted"><h3>Event</h3><br><h2>RepairItemCompleted (Deprecated)</h2>
<hr><a name="ReputationBoundryWarning"><h3>Event</h3><br><h2>ReputationBoundryWarning</h2>
<h3>Description</h3>
<p>Fires whenever a player has 75% of the reputation required to reach the next reputation level with a faction</p>
<h3>Params</h3>
<ul>
<li><b>strReputationLevel</b><b> (String)</b> - The name of the reputation level that the player is approaching.
<li><b>strFactionName</b><b> (String)</b> - The name of the faction that the player gained reputation with.
</ul>
<hr><a name="ReputationChanged"><h3>Event</h3><br><h2>ReputationChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player gains or loses reputation with a faction.</p>
<h3>Params</h3>
<ul>
<li><b>strFactionname</b><b> (String)</b> - The name of the faction that the player gained or lost reputation with.
<li><b>nReputation</b><b> (Integer)</b> - The amount of reputation the player has with the faction.
<li><b>fReputationDelta</b><b> (Float)</b> - The amount that the player's reputation was changed by.
</ul>
<hr><a name="ReputationLevel"><h3>Event</h3><br><h2>ReputationLevel</h2>
<h3>Description</h3>
<p>Fires whenever the player reaches a new reputation level with a faction.</p>
<h3>Params</h3>
<ul>
<li><b>strReputationLevel</b><b> (String)</b> - The name of the reputation level that the player reached.
<li><b>strFactionName</b><b> (String)</b> - The name of the faction that the player gained reputation with.
</ul>
<hr><a name="ResolutionChanged"><h3>Event</h3><br><h2>ResolutionChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player logs into the game, reloads the UI, or changes their resolution.</p>
<h3>Params</h3>
<ul>
<li><b>nWidth</b><b> (Integer)</b> - The resolution's width value.
<li><b>nHeight</b><b> (Integer)</b> - The resolution's height value.
</ul>
<hr><a name="ResourceConversionClose"><h3>Event</h3><br><h2>ResourceConversionClose</h2>
<h3>Description</h3>
<p>Fires whenever the UI calls Event_CancelConverting(), the player interacts with another NPC while interacting with a Resource Conversion NPC, or when the player moves far enough away from the resource conversion NPC.</p>
<hr><a name="ResourceConversionOpen"><h3>Event</h3><br><h2>ResourceConversionOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a Resource Conversion NPC.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The resource conversion NPC that the player interacted with.
</ul>
<hr><a name="ScientistExperimentationResult"><h3>Event</h3><br><h2>ScientistExperimentationResult</h2>
<h3>Description</h3>
<p>Fires in response to a valid call to PathMission:AttemptScientistExperimentation().  This event returns the results of the player's attempt.</p>
<h3>Params</h3>
<ul>
<li><b>arResults</b><b> (Array of Integer)</b> - An array of all the results from the player's experimentation attempt.  These values line up with the PathMission.ScientistExperimentationResult set of int constants. 
</ul>
<hr><a name="ScriptResurrect"><h3>Event</h3><br><h2>ScriptResurrect</h2>
<h3>Description</h3>
<p>Fires when the player is forced to resurrect by a scripted event in game.</p>
<hr><a name="SetPlayerPath"><h3>Event</h3><br><h2>SetPlayerPath</h2>
<h3>Description</h3>
<p>Fires whenever the player's path changes.  This should only be fired when the character is initially created.</p>
<hr><a name="SetProgressClickTimes"><h3>Event</h3><br><h2>SetProgressClickTimes</h2>
<h3>Description</h3>
<p>Fires whenever the player starts a Press and Hold, Rapid Tap, Precision, or Metronome CSI.  Informs the UI of the areas the player is supposed to hit during the CSI.</p>
<h3>Params</h3>
<ul>
<li><b>nWidth</b><b> (Integer)</b> - The width of the target area.  If this is 0, the target area is hidden.
<li><b>nLocation1Start</b><b> (Integer)</b> - The starting location of the first target area.
<li><b>nLocation2Start</b><b> (Integer)</b> - The starting area of the second target area.
<li><b>nPasses</b><b> (Integer)</b> - The number of times the progress meter is supposed to move back and forth over the CSI.  This value is nil for Press and Hold and Rapid Tap CSIs, 1 for Precision CSIs, and a number larger than 1 for Metronome CSIs.
</ul>
<hr><a name="SettlerBuildResult"><h3>Event</h3><br><h2>SettlerBuildResult</h2>
<h3>Description</h3>
<p>Fires whenever the player build's a settler improvement.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (Integer)</b> - The result of the player's build action.
<li><b>strName</b><b> (String)</b> - The name of the improvement that was built.
</ul>
<hr><a name="SettlerBuildStatusUpdate"><h3>Event</h3><br><h2>SettlerBuildStatusUpdate</h2>
<h3>Description</h3>
<p>Fires whenever the player builds or adds time to a settler improvement.</p>
<h3>Params</h3>
<ul>
<li><b>idHub</b><b> (Integer)</b> - The id number of the hub that the player built the improvement at.
<li><b>unitHub</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The settler hub that the improvement was buit at.
</ul>
<hr><a name="SettlerHubClose"><h3>Event</h3><br><h2>SettlerHubClose</h2>
<h3>Description</h3>
<p>Fires whenever the UI calls Event_CancelSettlerHub() or the player moves too far from a settler hub that they are interacting with.</p>
<hr><a name="SettlerHubReward"><h3>Event</h3><br><h2>SettlerHubReward</h2>
<h3>Description</h3>
<p>Fires whenever settlers unlock a reward for the players in the zone.</p>
<h3>Params</h3>
<ul>
<li><b>strNotification</b><b> (String)</b> - The message that was broadcast, telling players about the reward that was unlocked.
</ul>
<hr><a name="SettlerHubUpdated"><h3>Event</h3><br><h2>SettlerHubUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a settler builds an improvement, the time on an improvement is updated, or a player adds time to an improvement.  This event is only sent to settlers.</p>
<hr><a name="SettlerInfrastructureAdvanced"><h3>Event</h3><br><h2>SettlerInfrastructureAdvanced (Deprecated)</h2>
<h3>Description</h3>
<p>Fires whenever a the completion percentage of an infrastructure project is updated.  This event is only sent to settlers.</p>
<hr><a name="SettlerInfrastructureComplete"><h3>Event</h3><br><h2>SettlerInfrastructureComplete</h2>
<h3>Description</h3>
<p>Fires when a settler brings the last resource needed to finish an infrastructure project.</p>
<hr><a name="SettlerInfrastructureStarted"><h3>Event</h3><br><h2>SettlerInfrastructureStarted</h2>
<h3>Description</h3>
<p>Fires whenever a settler interacts with an infrastructure NPC while the project is not in progress.</p>
<hr><a name="SettlerInfrastructureUpdated"><h3>Event</h3><br><h2>SettlerInfrastructureUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a the completion percentage of an infrastructure project is updated.  This event is only sent to settlers.</p>
<hr><a name="SettlerNotifyUse"><h3>Event</h3><br><h2>SettlerNotifyUse (Deprecated)</h2>
<hr><a name="ShieldsOverloaded"><h3>Event</h3><br><h2>ShieldsOverloaded</h2>
<h3>Description</h3>
<p>Fires whenever a unit's shields are overloaded or the overload effect ends.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit whose shields are overloaded or lost the overloaded state.
<li><b>bOverloaded</b><b> (Boolean)</b> - Whether the shields entered or left the overloaded state.
</ul>
<hr><a name="ShowActionBarShortcut"><h3>Event</h3><br><h2>ShowActionBarShortcut</h2>
<h3>Description</h3>
<p>Fires whenever an action bar shortcut is supposed to be shown or hidden.</p>
<h3>Params</h3>
<ul>
<li><b>nBarIdx</b><b> (Integer)</b> - The bar whose visiblity state has updated.
<li><b>bShow</b><b> (Boolean)</b> - Whether the bar is supposed to be shown or not.
<li><b>nShortcuts</b><b> (Integer)</b> - The number of buttons to show from the bar.
</ul>
<h3>Usage/Example</h3>
<pre>Examples of action bar shortcuts:
Stances for engineer bots
Housing buttons
Warplots commands
Some path missions
</pre>
<hr><a name="ShowBank"><h3>Event</h3><br><h2>ShowBank</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a bank NPC.</p>
<hr><a name="ShowCredits"><h3>Event</h3><br><h2>ShowCredits</h2>
<h3>Description</h3>
<p>Fired in response to PreGameLib.GetCredits().</p>
<hr><a name="ShowDye"><h3>Event</h3><br><h2>ShowDye</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a stylist NPC.</p>
<hr><a name="ShowInstanceGameModeDialog"><h3>Event</h3><br><h2>ShowInstanceGameModeDialog</h2>
<h3>Description</h3>
<p>Fires whenever a player should be shown the instance difficulty window.  This is primarily used when a player attempts to enter an adventure or dungeon via the entrance instead of via the group finder UI.</p>
<h3>Params</h3>
<ul>
<li><b>tInfo</b><b> (Table)</b>
<ul>
<li><b>bDifficultyNormal</b><b> (Boolean)</b> - Whether or not the Normal difficulty is available for the group.
<li><b>bDifficultyVeteran</b><b> (Boolean)</b> - Whether the group meets the criteria for the veteran version of the dungeon or not.
<li><b>bFlagsScaling</b><b> (Boolean)</b> - Whether the group is allowed to choose whether they scale their level to the dungeon's difficulty or not.
<li><b>eExistingDifficulty</b><b> (GroupLib.Difficulty)</b> - If the difficulty has already been chosen, this variable will be set to the appropriate value.
<li><b>bExistingScaling</b><b> (Boolean)</b> - Whether the scaling flag is turned on or off for the dungeon or adventure.
</ul>
</ul>
<hr><a name="ShowInstanceRestrictedDialog"><h3>Event</h3><br><h2>ShowInstanceRestrictedDialog (Deprecated)</h2>
<hr><a name="ShowInstanceWaitingDialog"><h3>Event</h3><br><h2>ShowInstanceWaitingDialog (Deprecated)</h2>
<hr><a name="ShowInventory"><h3>Event</h3><br><h2>ShowInventory</h2>
<h3>Description</h3>
<p>Fires in response to the ShowInventory() function.</p>
<h3>Params</h3>
<ul>
<li><b>bShow</b><b> (Boolean)</b> - Whether the inventory should be shown or not.
</ul>
<hr><a name="ShowItemInDressingRoom"><h3>Event</h3><br><h2>ShowItemInDressingRoom</h2>
<h3>Description</h3>
<p>Fires when the player presses Control + right click on a piece of equipment in a bag window.</p>
<h3>Params</h3>
<ul>
<li><b>itemPreview</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item that the player wants to preview.
</ul>
<hr><a name="ShowLocOnWorldMap"><h3>Event</h3><br><h2>ShowLocOnWorldMap</h2>
<h3>Description</h3>
<p>Fires whenever a player clicks a location that was linked in an galactic archive article.</p>
<h3>Params</h3>
<ul>
<li><b>tLocationInfo</b><b> (Table)</b>
<ul>
<li><b>zoneMap</b><b> (Table)</b>
<ul>
<li><b>strFolder</b><b> (String)</b> - The folder name where the map is found.
<li><b>strName</b><b> (String)</b> - The zone's name.
<li><b>id</b><b> (Integer)</b> - The zone's ID.
<li><b>fNorth</b><b> (Float)</b> - The northern most coordinate on the map.
<li><b>fSouth</b><b> (Float)</b> - The southern most coordinate on the map.
<li><b>fEast</b><b> (Float)</b> - The eastern most coordinate on the map.
<li><b>fWest</b><b> (Float)</b> - The western most coordinate on the map.
<li><b>continentId</b><b> (Integer)</b> - The continent's ID.
<li><b>parentZoneId</b><b> (Integer)</b> - The ID of the zone's parent.
</ul>
<li><b>worldLoc</b><b> (Table)</b>
<ul>
<li><b>x</b><b> (Float)</b> - The coordinate's X position.
<li><b>y</b><b> (Float)</b> - The coordinate's Y position.
<li><b>z</b><b> (Float)</b> - The coordinate's Z position.
</ul>
</ul>
</ul>
<hr><a name="ShowQuestLog"><h3>Event</h3><br><h2>ShowQuestLog</h2>
<h3>Description</h3>
<p>Fires when the UI calls the Event_ShowQuestLoc() function.</p>
<h3>Params</h3>
<ul>
<li><b>idQuest</b><b> (Integer)</b> - The id number of the quest that the quest log should open to.
</ul>
<hr><a name="ShowResurrectDialog"><h3>Event</h3><br><h2>ShowResurrectDialog</h2>
<h3>Description</h3>
<p>Fires when the player shows up as a ghost after death and when the player's resurrect options update.</p>
<h3>Params</h3>
<ul>
<li><b>bPlayerIsDead</b><b> (Boolean)</b> - Whether the player is dead or not.
<li><b>bWakeHere</b><b> (Boolean)</b> - Whether the player has the option to resurrect at their current location or not.
<li><b>bRezHolocrypt</b><b> (Boolean)</b> - Whether the player has the option to resurrect at the nearest holocrypt or not.
<li><b>bExitInstance</b><b> (Boolean)</b> - Whether the player has the option to exit the instance to resurrect or not.  This option is only available during dungeons, adventures, and shiphand missions.
<li><b>bRezAtCaster</b><b> (Boolean)</b> - Whether the player has the option to resurrect at the same location as a player who revived them or not.
<li><b>bHasRezFromPlayer</b><b> (Boolean)</b> - Whether another player has attempted to revive the player or not.
<li><b>nTimeBeforeRez</b><b> (Integer)</b> - How long the player must wait before they are able to select any resurrect options, in milliseconds.
<li><b>nTimeBeforeWakeHere</b><b> (Integer)</b> - The amount of time before the player is able to use the "Wake Here" option, in milliseconds.
<li><b>nForceRezTimer</b><b> (Integer)</b> - The amount of time before the player is forced to resurrect at the nearest holocrypt.
</ul>
<hr><a name="ShowTutorial"><h3>Event</h3><br><h2>ShowTutorial</h2>
<h3>Description</h3>
<p>Fires whenever a tutorial should be shown or when the UI calls Event_ShowTutorial().  It informs the UI which tutorial to display and where to display it.</p>
<h3>Params</h3>
<ul>
<li><b>idTutorial</b><b> (Integer)</b> - The tutorial's id number.
<li><b>bInstant</b><b> (Boolean)</b> - Whether the tutorial is shown immediately or is placed in a queue.
<li><b>strText</b><b> (String)</b> - The text for the tutorial.
<li><b>eAnchor</b><b> (GameLib.CodeEnumTutorialAnchor)</b> - The anchor that the tutorial should be attached to.
<li><b>wndContainer</b><b> (<a href="../WindowControls/Window.htm">Window</a>)</b> - The window where the tutorial is displayed.
<li><b>nOffsetX</b><b> (Integer)</b> - The amount the window is offset from the anchor along the X axis.
<li><b>nOffsetY</b><b> (Integer)</b> - The amount the window is offset from the anchor point along the Y axis.
</ul>
<hr><a name="ShuttlePromptClose"><h3>Event</h3><br><h2>ShuttlePromptClose</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with another unit or moves too far from a shuttle NPC while interacting with it.</p>
<hr><a name="SoldierHoldoutDeath"><h3>Event</h3><br><h2>SoldierHoldoutDeath</h2>
<h3>Description</h3>
<p>Fires if a player that has either triggered the Holdout or damaged Holdout NPCs dies.</p>
<h3>Params</h3>
<ul>
<li><b>solHoldout</b><b> (<a href="../Classes/SoldierEvent.htm">SoldierEvent</a>)</b> - The holdout that the player was participating in.
</ul>
<hr><a name="SoldierHoldoutEnd"><h3>Event</h3><br><h2>SoldierHoldoutEnd</h2>
<h3>Description</h3>
<p>Fires whenever a soldier holdout ends, no matter if it was successful or unsuccessful.  This event fires for everyone who participated in the holdout.</p>
<h3>Params</h3>
<ul>
<li><b>solHoldout</b><b> (<a href="../Classes/SoldierEvent.htm">SoldierEvent</a>)</b> - The holdout that ended.
<li><b>eReason</b><b> (Integer)</b> - The reason the holdout ended.  This value lines up with the PathMission.PlayerPathSoldierResult set of int constants.
</ul>
<hr><a name="SoldierHoldoutNextWave"><h3>Event</h3><br><h2>SoldierHoldoutNextWave</h2>
<h3>Description</h3>
<p>Fires whenever the next wave of a soldier holdout begins.  This event fires for everyone participating in the holdout.</p>
<h3>Params</h3>
<ul>
<li><b>solHoldout</b><b> (<a href="../Classes/SoldierEvent.htm">SoldierEvent</a>)</b> - The holdout that triggered the event.
</ul>
<hr><a name="SoldierHoldoutStatus"><h3>Event</h3><br><h2>SoldierHoldoutStatus</h2>
<h3>Description</h3>
<p>Fires whenever a holdout's state updates.  This is sent to every player involved in the holdout.</p>
<h3>Params</h3>
<ul>
<li><b>solUpdated</b><b> (<a href="../Classes/SoldierEvent.htm">SoldierEvent</a>)</b> - The soldier event whose state was updated.
</ul>
<hr><a name="SpecChanged"><h3>Event</h3><br><h2>SpecChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to change their spec.  This event is only seen by the player that triggers the event.</p>
<h3>Params</h3>
<ul>
<li><b>nSpecIndex</b><b> (Integer)</b> - The index of the spec that the player changed to.
<li><b>eResult</b><b> (AbilityBook.CodeEnumSpecError)</b> - The result of the player's attempt to change their spec.  This will show any errors caused by the attempt, or OK if successful.
</ul>
<hr><a name="SplineHintObjectEnd"><h3>Event</h3><br><h2>SplineHintObjectEnd (Deprecated)</h2>
<hr><a name="SplitItemStack"><h3>Event</h3><br><h2>SplitItemStack</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to split a stack of items in their inventory.  The default keybind for this is Shift + Left Click on the item.  This event is only fired for the player who tried to split the stack.</p>
<h3>Params</h3>
<ul>
<li><b>itemSplitting</b><b> (<a href="../Classes/Item.htm">Item</a>)</b> - The item stack that the player is trying to split.
</ul>
<hr><a name="StalkerWoundsUpdate"><h3>Event</h3><br><h2>StalkerWoundsUpdate (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>percent</b><b> (Integer)</b>
<li><b>numWounds</b><b> (Integer)</b>
</ul>
<hr><a name="StanceChanged"><h3>Event</h3><br><h2>StanceChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player changes their character's innate ability.  This event is only sent to the player who triggered it.</p>
<hr><a name="StartSpellThreshold"><h3>Event</h3><br><h2>StartSpellThreshold</h2>
<h3>Description</h3>
<p>Fires whenever the player uses a spell that can be used multiple times within the same cooldown, such as the Warrior's Rampage or Esper's Telekinetic Strike.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The id number of the spell that triggered this event.
<li><b>nMaxThresholds</b><b> (Integer)</b> - The maximum number of thresholds the spell has
<li><b>eCastMethod</b><b> (Spell.CodeEnumCastMethod)</b> - The method the player used to activate the spell.
</ul>
<hr><a name="StoryPanelDialog_Hide"><h3>Event</h3><br><h2>StoryPanelDialog_Hide</h2>
<h3>Description</h3>
<p>Fires whenever the UI is supposed to stop showing the currently displayed Story Panel.  This event is fired to individual players.</p>
<h3>Usage/Example</h3>
<pre>This is usually shown immediately before StoryPanelDialog_Show to ensure that only one Story Panel is shown at a time.</pre>
<h3>Remarks</h3>
<p>Story Panels are windows used for messaging information to the player.  They are not an actual window type, but they are grouped together so they can be controlled easily via addons.  Only one Story Panel </p>
<hr><a name="StoryPanelDialog_Show"><h3>Event</h3><br><h2>StoryPanelDialog_Show</h2>
<h3>Description</h3>
<p>Fires whenever the UI is supposed to show a Story Panel window.</p>
<h3>Params</h3>
<ul>
<li><b>ePanel</b><b> (GameLib.CodeEnumStoryPanel)</b> - The type of story panel that should be shown.
<li><b>arMessageLines</b><b> (Array of String)</b> - An array of text to show in the story panel.
<li><b>fDisplayTime</b><b> (Float)</b> - The amount of time before the Story Panel stould stop being shown.
<li><b>eStyle</b><b> (GameLib.CodeEnumStoryPanelStyle)</b> - The style flag for the story panel window.
</ul>
<h3>Remarks</h3>
<p>Story Panels are windows used for messaging information to the player.  They are not an actual window type, but they are grouped together so they can be controlled easily via addons.  Only one Story Panel </p>
<hr><a name="StunVGPressed"><h3>Event</h3><br><h2>StunVGPressed</h2>
<h3>Description</h3>
<p>Fired once every half second that the player is stunned.  This informs the UI of whether the player pressed the correct button to break out of the stun.  This event is only fired for the person who is stunned.</p>
<h3>Params</h3>
<ul>
<li><b>bButtonPressed</b><b> (Boolean)</b> - Whether the player pressed the correct button or not.
</ul>
<hr><a name="SubZoneChanged"><h3>Event</h3><br><h2>SubZoneChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player moves into a new subzone.</p>
<h3>Params</h3>
<ul>
<li><b>idZone</b><b> (Integer)</b> - The id number for subzone.
<li><b>strSubZoneName</b><b> (String)</b> - The name of the subzone.
</ul>
<hr><a name="TalentRespecPointsChanged"><h3>Event</h3><br><h2>TalentRespecPointsChanged (Deprecated)</h2>
<hr><a name="TalentsChanged"><h3>Event</h3><br><h2>TalentsChanged (Deprecated)</h2>
<hr><a name="TargetedByUnit"><h3>Event</h3><br><h2>TargetedByUnit</h2>
<h3>Description</h3>
<p>Fires whenever the player's threat is increased with a hostile NPC to the point that it targets the player.  This only fires for the person being targeted.</p>
<h3>Params</h3>
<ul>
<li><b>unitTargeting</b><b> (unit)</b> - The unit that is targeting the player.
</ul>
<h3>Remarks</h3>
<p>This isn't fired if the player's threat level is 0, if the unit doing the targeting is friendly, or if the unit doing the targeting is a player.</p>
<hr><a name="TargetThreatListUpdated"><h3>Event</h3><br><h2>TargetThreatListUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the threat list for the targeted unit updates.  This is fired to any character that is targeting the unit whose threat table was updated.</p>
<h3>Params</h3>
<ul>
<li><b>unitTarget1</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player at the top of the threat list.
<li><b>nTarget1Threat</b><b> (Integer)</b> - unitTarget1's threat vs. the target unit.
<li><b>unitTarget2</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit with the second highest threat against the target unit.
<li><b>nTarget2Threat</b><b> (Integer)</b> - unitTarget2's threat vs. the target unit.
<li><b>unitTarget3</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit with the third highest threat against the target unit.
<li><b>nTarget3Threat</b><b> (Integer)</b> - unitTarget3's threat vs. the target unit.
<li><b>unitTarget4</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player with the fourth highest threat against the target unit.
<li><b>nTarget4Threat</b><b> (Integer)</b> - unitTarget4's threat vs. the target unit.
<li><b>unitTarget5</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit with the fifth highest threat against the target unit.
<li><b>nTarget5Threat</b><b> (Integer)</b> - unitTarget5's threat vs. the target unit.
</ul>
<h3>Remarks</h3>
<p>Note, this is not fired if the targeted unit is a player.</p>
<hr><a name="TaxiWindowClose"><h3>Event</h3><br><h2>TaxiWindowClose</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with another NPC, calls the Event_CancelTaxiVendor() function, or moves too far from a taxi NPC while interacting with it.  This is only sent to the person that triggered the event.</p>
<hr><a name="ToggleAbilitiesWindow"><h3>Event</h3><br><h2>ToggleAbilitiesWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to toggle the Limited Action Set Builder.  This is only fired for the player who pressed the keybind.</p>
<h3>Params</h3>
<ul>
<li><b>bShow</b><b> (Boolean)</b> - Whether the Limited Action Set Builder should be shown or not.
</ul>
<hr><a name="ToggleAchievementWindow"><h3>Event</h3><br><h2>ToggleAchievementWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the keybinding tied to the achievements window or the Event_ToggleAchievementWindow() function is called from the UI..  This is only fired for the player who clicked the keybinding.</p>
<hr><a name="ToggleAuctionList"><h3>Event</h3><br><h2>ToggleAuctionList</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the keybinding tied to the Marketplace Listings.  This event is only fired for the player who presses the keybind.</p>
<hr><a name="ToggleAuctionWindow"><h3>Event</h3><br><h2>ToggleAuctionWindow</h2>
<h3>Description</h3>
<p>Fires when the player interacts with an auctioneer NPC.  This is only fired for the player who pressed the keybinding.</p>
<hr><a name="ToggleChallengesWindow"><h3>Event</h3><br><h2>ToggleChallengesWindow (Deprecated)</h2>
<hr><a name="ToggleCharacterWindow"><h3>Event</h3><br><h2>ToggleCharacterWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the keybinding tied to the character window.  This is only received by the player who pressed the button</p>
<hr><a name="ToggleCodex"><h3>Event</h3><br><h2>ToggleCodex</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the keybind tied to the Codex menu or called Event_ToggleCodex() from the UI.  This event is only fired for the player who pressed the keybinding.</p>
<hr><a name="ToggleCREDDExchangeWindow"><h3>Event</h3><br><h2>ToggleCREDDExchangeWindow</h2>
<h3>Description</h3>
<p>Fires when the player interacts with a CREDD Exchange NPC.</p>
<hr><a name="ToggleErrorDialog"><h3>Event</h3><br><h2>ToggleErrorDialog</h2>
<h3>Description</h3>
<p>Fires whenever a Lua error occurs.  This is only received by the client that the error occurred on.</p>
<hr><a name="ToggleFramerate"><h3>Event</h3><br><h2>ToggleFramerate</h2>
<h3>Description</h3>
<p>Fires whenever the player toggles the framerate display (Ctrl + F by default).  This is only fired for the client where the key combination was pressed.</p>
<hr><a name="ToggleGhostModeMap"><h3>Event</h3><br><h2>ToggleGhostModeMap (Deprecated)</h2>
<h3>Description</h3>
<p>Fired whenever the player presses the button to toggle the ghost mode.  This is only fired for the player.</p>
<hr><a name="ToggleGroupFinder"><h3>Event</h3><br><h2>ToggleGroupFinder</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to the GroupFinder UI.  This event is only received by the player who pressed the keybinding.</p>
<hr><a name="ToggleGroupSharedBag"><h3>Event</h3><br><h2>ToggleGroupSharedBag (Deprecated)</h2>
<hr><a name="ToggleGroupsWindow"><h3>Event</h3><br><h2>ToggleGroupsWindow (Deprecated)</h2>
<hr><a name="ToggleGuild"><h3>Event</h3><br><h2>ToggleGuild</h2>
<h3>Description</h3>
<p>Fired whenever the player presses the keybinding tied to the Guild UI.  This event is only handled by the player who pressed the keybinding.</p>
<hr><a name="ToggleInventory"><h3>Event</h3><br><h2>ToggleInventory</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to the Inventory.  This is only received by the player who pressed the key.</p>
<hr><a name="ToggleMailWindow"><h3>Event</h3><br><h2>ToggleMailWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to Mail.  This event is only handled by the player who pressed the key.</p>
<hr><a name="ToggleMarketplaceWindow"><h3>Event</h3><br><h2>ToggleMarketplaceWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with a Commodities Marketplace NPC.  This is only handled by the player who triggered the event.</p>
<hr><a name="TogglePlayerTicketWindow"><h3>Event</h3><br><h2>TogglePlayerTicketWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player types the slash command to open the Player Ticket Window.  It is only handled by the player who used the command.</p>
<hr><a name="ToggleQuestLog"><h3>Event</h3><br><h2>ToggleQuestLog</h2>
<h3>Description</h3>
<p>Fires whenever the UI calls the Event_ToggleQuestLog() function or the player presses the key bound to the quest log.  This is only sent to the player that fired it.</p>
<hr><a name="ToggleReputationInterface"><h3>Event</h3><br><h2>ToggleReputationInterface</h2>
<h3>Description</h3>
<p>Fires whenever the UI calls Event_ToggleReputationWindow().  This is only fired to the player with the addon that called the function.</p>
<hr><a name="ToggleSocialWindow"><h3>Event</h3><br><h2>ToggleSocialWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to the Social window.  It is only sent to the player that pressed the button.</p>
<hr><a name="ToggleStuckWindow"><h3>Event</h3><br><h2>ToggleStuckWindow</h2>
<h3>Description</h3>
<p>Fires whenever the player types /stuck while in game or the UI calls ShowStuckUI().  This event will only fire for the player who used the command or whose UI called the function.</p>
<hr><a name="ToggleTradeskills"><h3>Event</h3><br><h2>ToggleTradeskills</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to Tradeskills.  This only fires for the player that pressed the key.</p>
<hr><a name="ToggleTradeSkillsInventory"><h3>Event</h3><br><h2>ToggleTradeSkillsInventory</h2>
<h3>Description</h3>
<p>Fires whenever the ToggleTradeSkillsInventory() function is called from the UI.  This is only sent to the player whose UI called the function.</p>
<hr><a name="ToggleZoneMap"><h3>Event</h3><br><h2>ToggleZoneMap</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the key bound to the Map.  This event only fires for the player that pressed the key.</p>
<hr><a name="TradeskillAchievementComplete"><h3>Event</h3><br><h2>TradeskillAchievementComplete</h2>
<h3>Description</h3>
<p>Fires whenever the player finishes an entry on a tradeskill's tech tree.</p>
<h3>Params</h3>
<ul>
<li><b>idAchievement</b><b> (Integer)</b> - The id number for the achievement that the player earned.
</ul>
<h3>Remarks</h3>
<p>Elements on the tech tree are Achievement type objects, hence the name of the event.</p>
<hr><a name="TradeskillAchievementUpdate"><h3>Event</h3><br><h2>TradeskillAchievementUpdate</h2>
<h3>Description</h3>
<p>Fires whenever progress is made on an entry in the player's tech tree.</p>
<h3>Params</h3>
<ul>
<li><b>achUpdated</b><b> (<a href="../Classes/Achievement.htm">Achievement</a>)</b> - The tech tree entry that was updated.
<li><b>nCurrentProgress</b><b> (Integer)</b> - The progress the player has made towards completing the achievement.
<li><b>nProgressNeeded</b><b> (Integer)</b> - The total amount of progress needed to complete the achievement.
</ul>
<hr><a name="TradeskillEngravingStationClose"><h3>Event</h3><br><h2>TradeskillEngravingStationClose</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with another NPC or moves away from the Engraving Station while they are interacting with it.</p>
<hr><a name="TradeskillEngravingStationOpen"><h3>Event</h3><br><h2>TradeskillEngravingStationOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with an Engraving Station NPC.</p>
<hr><a name="TradeSkills_Crafting"><h3>Event</h3><br><h2>TradeSkills_Crafting (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>text</b><b> (String)</b>
<li><b>percentComplete</b><b> (Integer)</b>
</ul>
<hr><a name="TradeSkills_Learned"><h3>Event</h3><br><h2>TradeSkills_Learned</h2>
<h3>Description</h3>
<p>Fires whenever the player learns a new crafting tradeskill.  This does not get fired for learning Runecrafting or harvesting (Mining, Survivalist, Relic Hunter) tradeskills.</p>
<h3>Params</h3>
<ul>
<li><b>eTradeskill</b><b> (CraftingLib.CodeEnumTradeskill)</b> - The tradeskill that was learned.
</ul>
<hr><a name="TradeSkills_Show"><h3>Event</h3><br><h2>TradeSkills_Show (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>schematicId</b><b> (Integer)</b>
</ul>
<hr><a name="TradeSkills_UpdateQuantities"><h3>Event</h3><br><h2>TradeSkills_UpdateQuantities (Deprecated)</h2>
<hr><a name="TradeSkillsBreakdown_Show"><h3>Event</h3><br><h2>TradeSkillsBreakdown_Show</h2>
<h3>Params</h3>
<ul>
<li><b>bShow</b><b> (Boolean)</b>
</ul>
<hr><a name="TradeSkillSigilResult"><h3>Event</h3><br><h2>TradeSkillSigilResult</h2>
<h3>Description</h3>
<p>Fires whenever the player attempts to add a rune to a rune slot on a piece of equipment.</p>
<h3>Params</h3>
<ul>
<li><b>eResult</b><b> (CraftingLib.CodeEnumTradeskillResult)</b> - The result of the player's attempt to add a rune to a piece of equipment.
</ul>
<hr><a name="TradeSkillsItemBreakdown_BreakCompleted"><h3>Event</h3><br><h2>TradeSkillsItemBreakdown_BreakCompleted (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>success</b><b> (Boolean)</b>
</ul>
<hr><a name="TutorialPlaybackEnded"><h3>Event</h3><br><h2>TutorialPlaybackEnded</h2>
<h3>Description</h3>
<p>Fires whenever the VO for a tutorial ends.</p>
<hr><a name="UI_EffectiveLevelChanged"><h3>Event</h3><br><h2>UI_EffectiveLevelChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's effective level changes due to rallying or mentoring.</p>
<h3>Params</h3>
<ul>
<li><b>nNewEffectiveLevel</b><b> (Integer)</b> - The player's current effective level.
</ul>
<hr><a name="UI_EnergyChanged"><h3>Event</h3><br><h2>UI_EnergyChanged</h2>
<h3>Description</h3>
<p>Fires whenever the amount of energy that the player has for sprinting changes.</p>
<h3>Params</h3>
<ul>
<li><b>nCurrentEnergy</b><b> (Integer)</b> - The amount of energy the player currently has.
<li><b>nMaxEnergy</b><b> (Integer)</b> - The maximum amount of energy the player can have.
</ul>
<hr><a name="UI_HealthChanged"><h3>Event</h3><br><h2>UI_HealthChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's HP changes</p>
<h3>Params</h3>
<ul>
<li><b>nHP</b><b> (Integer)</b> - The player's current HP.
<li><b>nMaxHP</b><b> (Integer)</b> - The character's maximum HP.
</ul>
<hr><a name="UI_LevelChanged"><h3>Event</h3><br><h2>UI_LevelChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's level changes.</p>
<h3>Params</h3>
<ul>
<li><b>nLevel</b><b> (Integer)</b> - The player's current level.
</ul>
<hr><a name="UI_XPBonusAwarded"><h3>Event</h3><br><h2>UI_XPBonusAwarded (Deprecated)</h2>
<h3>Description</h3>
<p>Queues an XP award bonus to various RewardQueues and updates the RewardBar's progress.</p>
<h3>Params</h3>
<ul>
<li><b>awardType</b><b> (CharacterStat)</b> - The corresponding queue to award towards. Calculated as: awardType - CharacterStat_KillingSpreeBonus + 1
<li><b>newValue</b><b> (Float)</b> - The amount to reward.
</ul>
<hr><a name="UI_XPBonusUpdated"><h3>Event</h3><br><h2>UI_XPBonusUpdated (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>who</b><b> (Integer)</b>
<li><b>preview</b><b> (Boolean)</b>
<li><b>earnsXP</b><b> (Boolean)</b>
</ul>
<hr><a name="UI_XPChanged"><h3>Event</h3><br><h2>UI_XPChanged</h2>
<h3>Description</h3>
<p>Fires whenever the player's XP, Elder Points, or rested bonus changes.</p>
<h3>Params</h3>
<ul>
<li><b>nXP</b><b> (Integer)</b> - The player's current XP.  Note, this will not list the player's current EP once they have hit level 50.
<li><b>nMinXPForLevel</b><b> (Integer)</b> - The amount of XP the player had to earn before becoming their current level.
<li><b>nXPToLevel</b><b> (Integer)</b> - The amount of XP the player needs to reach the next level.  This is -1 if the player is at the maximum level.
<li><b>nRestedBonus</b><b> (Integer)</b> - The amount of XP or EP the player can get from their rested bonus.
</ul>
<hr><a name="UnavailableMail"><h3>Event</h3><br><h2>UnavailableMail</h2>
<h3>Description</h3>
<p>Fires whenever a piece of mail is deleted or the player reports a piece of mail as spam.</p>
<h3>Params</h3>
<ul>
<li><b>strMailId</b><b> (Array of String)</b> - An array of strings that contain the mail's Id
</ul>
<hr><a name="UnitEvaded"><h3>Event</h3><br><h2>UnitEvaded</h2>
<h3>Description</h3>
<p>Fires if an NPC evades or resets due to the player being in stealth for too long.</p>
<h3>Params</h3>
<ul>
<li><b>unitEvading</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that evaded.
<li><b>unitTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the NPC was targeting before it evaded.
<li><b>eReason</b><b> (Integer)</b> - The reason that the NPC evaded.  This should be either 2 (Timeout), 5 (FailedToPath) or 6 (StealthWanderTimeout)
<li><b>strText</b><b> (String)</b> - The floating text that should be shown when the unit evades.
</ul>
<h3>Remarks</h3>
<p>Note: This does not fire for creatures tethering naturally.</p>
<hr><a name="UnitGibbed"><h3>Event</h3><br><h2>UnitGibbed</h2>
<hr><a name="UnitGroupChanged"><h3>Event</h3><br><h2>UnitGroupChanged</h2>
<h3>Description</h3>
<p>Fires whenever a player is added or removed from the group.  This is sent to every member of the group.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that was added or removed from the group.
</ul>
<hr><a name="UnitGuildNameplateChanged"><h3>Event</h3><br><h2>UnitGuildNameplateChanged</h2>
<h3>Description</h3>
<p>Fires whenever a nearby player updates their guild tag on their nameplate.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit whose guild tag was updated.
</ul>
<hr><a name="UnitLevelChanged"><h3>Event</h3><br><h2>UnitLevelChanged</h2>
<h3>Description</h3>
<p>Fires whenever a nearby player's level or effective level changes.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit whose level or effective level changed.
</ul>
<hr><a name="UnitMemberOfGuildChange"><h3>Event</h3><br><h2>UnitMemberOfGuildChange</h2>
<h3>Description</h3>
<p>Fires whenever a nearby player is added or removed from a guild.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The player that was added to or removed from a guild.
</ul>
<hr><a name="UnitPvpFlagsChanged"><h3>Event</h3><br><h2>UnitPvpFlagsChanged</h2>
<h3>Description</h3>
<p>Fires whenever a nearby player changes their PvP flag state.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who toggled their PvP flag state.
</ul>
<hr><a name="UnitTextBubbleCreate"><h3>Event</h3><br><h2>UnitTextBubbleCreate</h2>
<h3>Description</h3>
<p>Fires whenever an unit should display a text bubble over their head.</p>
<h3>Params</h3>
<ul>
<li><b>unitSpeaker</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit that the text bubble is attached to.
<li><b>strText</b><b> (String)</b> - The text in the text bubble.
<li><b>bImmediate</b><b> (Boolean)</b> - Whether the text bubble should be shown immediately or fade in.
<li><b>fRange</b><b> (Boolean)</b> - The maximum range that people can see the text bubble from.
</ul>
<hr><a name="UnitTextBubblesDestroyed"><h3>Event</h3><br><h2>UnitTextBubblesDestroyed</h2>
<h3>Description</h3>
<p>Fires whenever a text bubble's internal timer has expired.</p>
<hr><a name="UnitTitleChanged"><h3>Event</h3><br><h2>UnitTitleChanged</h2>
<h3>Description</h3>
<p>Fires whenever a nearby unit changes their title.</p>
<h3>Params</h3>
<ul>
<li><b>unitUpdated</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who changed their title.
</ul>
<hr><a name="UnTargetedByUnit"><h3>Event</h3><br><h2>UnTargetedByUnit</h2>
<h3>Description</h3>
<p>Fires whenever a unit stops targeting the current player.</p>
<h3>Params</h3>
<ul>
<li><b>unitAttacking</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The unit who changed their target.
</ul>
<hr><a name="UpdateCCStateStun"><h3>Event</h3><br><h2>UpdateCCStateStun</h2>
<h3>Description</h3>
<p>Fires every 0.2 seconds while the player is stunned.  This event informs the UI how much progress the player has made towards breaking out of the stun.</p>
<h3>Params</h3>
<ul>
<li><b>fProgress</b><b> (Float)</b> - The progress the player has made towards breaking out of the stun.  This value is percentage based, with the player breaking out on 100 or higher. 
</ul>
<hr><a name="UpdateGearScore"><h3>Event</h3><br><h2>UpdateGearScore</h2>
<h3>Description</h3>
<p>Fires whenever an item is added or removed from the player that changes their Gear Score.</p>
<hr><a name="UpdateInventory"><h3>Event</h3><br><h2>UpdateInventory</h2>
<h3>Description</h3>
<p>Fires whenever an item is added to, removed from, or moved within the player's inventory.</p>
<hr><a name="UpdatePathXp"><h3>Event</h3><br><h2>UpdatePathXp</h2>
<h3>Description</h3>
<p>Fires whenever the player gains Path XP.</p>
<h3>Params</h3>
<ul>
<li><b>nXPDelta</b><b> (Integer)</b> - The amount of Path XP the player gained.
<li><b>strFloaterMessage</b><b> (String)</b> - The message that should be displayed on a combat floater when this event is fired.
</ul>
<hr><a name="UpdateSoldierBuild"><h3>Event</h3><br><h2>UpdateSoldierBuild (Deprecated)</h2>
<hr><a name="UpdateSpellThreshold"><h3>Event</h3><br><h2>UpdateSpellThreshold</h2>
<h3>Description</h3>
<p>Fires whenever the player uses a spell with a threshold timer, while the timer is running.</p>
<h3>Params</h3>
<ul>
<li><b>idSpell</b><b> (Integer)</b> - The spell's id number.
<li><b>nCurrentThreshold</b><b> (Integer)</b> - The number of times the player has used the ability since the threshold timer was started.
</ul>
<hr><a name="Vacuum"><h3>Event</h3><br><h2>Vacuum</h2>
<h3>Description</h3>
<p>Fires whenever the player press the key bound to vacuum looting.</p>
<hr><a name="VendorItemsUpdated"><h3>Event</h3><br><h2>VendorItemsUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player opens the Vendor UI, any player purchases a limited supply item while the player is interacting with the vendor, or the vendor restocks a limited supply item while the player is interacting with it.</p>
<hr><a name="WalletUpdate"><h3>Event</h3><br><h2>WalletUpdate</h2>
<h3>Description</h3>
<p>Fires whenever the wallet tied to a player's account updates.  The wallet is used to purchase microtransaction items.</p>
<h3>Params</h3>
<ul>
<li><b>nAmount</b><b> (Integer)</b> - The amount of currency that was added to the player's wallet.
</ul>
<hr><a name="WarPartyBankerClose"><h3>Event</h3><br><h2>WarPartyBankerClose</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with another NPC or moves too far away while interacting with the warparty bank, or whenever the UI calls Event_CancelWarpartyBank()..</p>
<hr><a name="WarPartyBankerOpen"><h3>Event</h3><br><h2>WarPartyBankerOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player interacts with the Warparty Bank.</p>
<hr><a name="WarPartyBattleClose"><h3>Event</h3><br><h2>WarPartyBattleClose</h2>
<h3>Description</h3>
<p>Fires whenever the player's UI reloads and they are not on a warplot or in a warplot match.</p>
<hr><a name="WarPartyBattleOpen"><h3>Event</h3><br><h2>WarPartyBattleOpen</h2>
<h3>Description</h3>
<p>Fires whenever the player presses the Warparty Crate button in the Warplot UI.</p>
<h3>Params</h3>
<ul>
<li><b>guildWarparty</b><b> (Guild)</b> - The warparty that the plot belongs to.
</ul>
<hr><a name="WarPartyBossTokensUpdated"><h3>Event</h3><br><h2>WarPartyBossTokensUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a player uses a boss token during a Warplot match or the player adds a boss token to the Warparty Bank.</p>
<h3>Params</h3>
<ul>
<li><b>guildWarparty</b><b> (Guild)</b> - The warparty whose boss tokens were updated.
</ul>
<hr><a name="WarPartyMatchResults"><h3>Event</h3><br><h2>WarPartyMatchResults</h2>
<h3>Description</h3>
<p>Fires when a Warplot match ends.  This event is sent to every player involved in the match.</p>
<h3>Params</h3>
<ul>
<li><b>arTeamResults</b><b> (Array of Table)</b>
<ul>
<li><b>nRating</b><b> (Integer)</b> - The amount that the team's rating changed by.
<li><b>nRepairCost</b><b> (Integer)</b> - The amount it will cost the team to repair their warplot.
<li><b>nDestroyedPlugs</b><b> (Integer)</b> - The number of the team's plugs that were destroyed during the match.
<li><b>nWarCoinsEarned</b><b> (Integer)</b> - The number of Warcoins that the team earned during the match.
</ul>
</ul>
<hr><a name="WarPartyRegistrarClose"><h3>Event</h3><br><h2>WarPartyRegistrarClose (Deprecated)</h2>
<hr><a name="WarPartyRegistrarOpen"><h3>Event</h3><br><h2>WarPartyRegistrarOpen (Deprecated)</h2>
<hr><a name="WarplotBattleStateChanged"><h3>Event</h3><br><h2>WarplotBattleStateChanged</h2>
<h3>Description</h3>
<p>Fires when the player enters the warplot or when one of the warparty's plugs is destroyed.</p>
<hr><a name="WhoResponse"><h3>Event</h3><br><h2>WhoResponse</h2>
<h3>Description</h3>
<p>The response the player gets when they use the /who slash command.</p>
<h3>Params</h3>
<ul>
<li><b>tResults</b><b> (Array of Table)</b>
<ul>
<li><b>strName</b><b> (String)</b> - The player's name.
<li><b>nLevel</b><b> (Integer)</b> - The player's level.
<li><b>eRaceId</b><b> (GameLib.CodeEnumRace)</b> - The player's race.
<li><b>eClassId</b><b> (GameLib.CodeEnumClass)</b> - The player's class.
<li><b>ePlayerPathType</b><b> (Integer)</b> - The player's path.  This lines up with the PlayerPathLib.PlayerPathType set of constants.
<li><b>idWorldZone</b><b> (Integer)</b> - The id of the zone the player is in.
<li><b>strRace</b><b> (String)</b> - The name of the player's race.
<li><b>strClass</b><b> (String)</b> - The name of the player's class.
<li><b>strZone</b><b> (String)</b> - The name of the zone the player is in.
<li><b>strPath</b><b> (String)</b> - The name of the player's path.
</ul>
</ul>
<hr><a name="WindowGainedFocus"><h3>Event</h3><br><h2>WindowGainedFocus</h2>
<hr><a name="WindowLostFocus"><h3>Event</h3><br><h2>WindowLostFocus</h2>
<hr><a name="WorkOrderLocate"><h3>Event</h3><br><h2>WorkOrderLocate</h2>
<h3>Description</h3>
<p>Fires whenever the player clicks a work order quest in the Quest Tracker.</p>
<h3>Params</h3>
<ul>
<li><b>idSchematic</b><b> (Integer)</b> - The id number of the schematic required for the work order.
</ul>
<h3>Remarks</h3>
<p>This event is intended to open the tradeskill window to the appropriate schematic</p>
<hr><a name="WrangleCreature"><h3>Event</h3><br><h2>WrangleCreature (Deprecated)</h2>
<h3>Params</h3>
<ul>
<li><b>uTarget</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - A UnitId of the targetted creature
<li><b>fMeter</b><b> (Float)</b> - The current progress of the action, the player wants this to remain within the success and failure thresholds
<li><b>fSuccessThreshold</b><b> (Float)</b> - The maximum cieling for the capture meter
<li><b>fFailureThreshold</b><b> (Float)</b> - The minimum floor for the capture meter
<li><b>nRangeBand</b><b> (Integer)</b> - Converted to text for the distance indicator
<li><b>fRate</b><b> (Float)</b> - Currently unused
</ul>
<hr><a name="ZoneCompletionUpdated"><h3>Event</h3><br><h2>ZoneCompletionUpdated</h2>
<h3>Description</h3>
<p>Fires whenever the player enters a zone, explores a new part of the zone, or completes a challenge, task, datacube, or path mission</p>
<h3>Params</h3>
<ul>
<li><b>idZone</b><b> (Integer)</b> - The id number for the zone whose completion percentage was updated.
</ul>
<hr><a name="ZoneMapPing"><h3>Event</h3><br><h2>ZoneMapPing</h2>
<h3>Description</h3>
<p>Fires whenever the player or a group member clicks the minimap.</p>
<h3>Params</h3>
<ul>
<li><b>idUnit</b><b> (Integer)</b> - The id number of the unit that pinged the map.
<li><b>tPos</b><b> (<a href="../Classes/Vector3.htm">Vector3</a>)</b> - The coordinates that were pinged.
</ul>
<hr><a name="ZoneMapPlayerIndicatorUpdated"><h3>Event</h3><br><h2>ZoneMapPlayerIndicatorUpdated</h2>
<h3>Description</h3>
<p>Fires whenever a player is added or removed from the Zone Map.</p>
<h3>Params</h3>
<ul>
<li><b>bVisible</b><b> (Boolean)</b> - Whether the player is visible on the map or not.
</ul>
<h3>Remarks</h3>
<p>An example of this is when a player joins or leaves a group.</p>
<hr><a name="ZoneMapUpdateHexGroup"><h3>Event</h3><br><h2>ZoneMapUpdateHexGroup</h2>
<h3>Description</h3>
<p>Fires when a hex group is added or removed from the zone map.</p>
<h3>Params</h3>
<ul>
<li><b>hexUpdated</b><b> (<a href="../Classes/HexGroups.htm">HexGroups</a>)</b> - The hex group that was shown or hidden.
</ul>
<a name=">Functions"/>
<hr><a name="BuybackItemFromVendor"><h3>Function</h3><br><h2>BuybackItemFromVendor(idItem)</h2>
<h3>Description</h3>
<p>Performs a buyback on an item that was recently sold to a vendor.  This function will only work if the player is within range of a vendor.</p>
<h3>Params</h3>
<ul>
<li><b>idItem</b><b> (Integer)</b> - The unique ID of the item that is being bought back from the vendor.
</ul>
<hr><a name="BuyItemFromVendor"><h3>Function</h3><br><h2>BuyItemFromVendor(idUnique, nQuantity)</h2>
<h3>Description</h3>
<p>Purchases the specified item from the vendor if the player can afford it.</p>
<h3>Params</h3>
<ul>
<li><b>idUnique</b><b> (Integer)</b> - The item's unique id number.
<li><b>nQuantity</b><b> (Integer)</b> - How many of the specified item the player wishes to buy.
</ul>
<hr><a name="Camp"><h3>Function</h3><br><h2>Camp()</h2>
<h3>Description</h3>
<p>Causes the player to return to character select.</p>
<hr><a name="CancelExit"><h3>Function</h3><br><h2>CancelExit()</h2>
<h3>Description</h3>
<p>Stops the player's logout timer and cancels the request to leave the game.</p>
<hr><a name="Chat_PostDatachronMsg"><h3>Function</h3><br><h2>Chat_PostDatachronMsg(idCreature, strText)</h2>
<h3>Description</h3>
<p>Posts a chat message on the Datachron chat channel from the specified unit.</p>
<h3>Params</h3>
<ul>
<li><b>idCreature</b><b> (Integer)</b> - the id number of the NPC that spoke the message.
<li><b>strText</b><b> (String)</b> - The text that was said by the NPC
</ul>
<hr><a name="Cinematics_Cancel"><h3>Function</h3><br><h2>Cinematics_Cancel()</h2>
<h3>Description</h3>
<p>Cancels a cutscene while it is displayed.</p>
<hr><a name="Cinematics_Play"><h3>Function</h3><br><h2>Cinematics_Play()</h2>
<h3>Description</h3>
<p>Starts a cinematic.</p>
<hr><a name="Creature_GetName"><h3>Function</h3><br><h2>Creature_GetName(idCreature)</h2>
<h3>Description</h3>
<p>Returns the name of the creature with the specified ID.</p>
<h3>Params</h3>
<ul>
<li><b>idCreature</b><b> (Integer)</b> - The creature's Id number.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The name of the creature with the given ID.
</ul>
<hr><a name="Event_CancelAuctionhouse"><h3>Function</h3><br><h2>Event_CancelAuctionhouse()</h2>
<h3>Description</h3>
<p>If the player's current interact target is an Auctioneer, this function deselects it and fires the AuctionWindowClose event.</p>
<hr><a name="Event_CancelBanking"><h3>Function</h3><br><h2>Event_CancelBanking()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a player bank, this function deselects it and fires the BankWindowClose event.</p>
<hr><a name="Event_CancelCityDirections"><h3>Function</h3><br><h2>Event_CancelCityDirections()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a capital city guard, this function deselects it and fires the CityDirectionsClose event.</p>
<hr><a name="Event_CancelCommodities"><h3>Function</h3><br><h2>Event_CancelCommodities()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Commodities Exchange NPC, this function deselects it and fires the MarketplaceWindowClose event.</p>
<hr><a name="Event_CancelConverting"><h3>Function</h3><br><h2>Event_CancelConverting()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a resource conversion NPC, this function deselects it and fires the ResourceConversionClose event.</p>
<hr><a name="Event_CancelCrafting"><h3>Function</h3><br><h2>Event_CancelCrafting()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a crafting station, this function deselects it and fires the CraftingStationClose event.</p>
<hr><a name="Event_CancelCREDDExchange"><h3>Function</h3><br><h2>Event_CancelCREDDExchange()</h2>
<hr><a name="Event_CancelDyeWindow"><h3>Function</h3><br><h2>Event_CancelDyeWindow()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Stylist NPC, this function deselects it and fires the DyeWindowClose event.</p>
<hr><a name="Event_CancelEngravingStation"><h3>Function</h3><br><h2>Event_CancelEngravingStation()</h2>
<h3>Description</h3>
<p>If the player's current interact target is an engraving station, this function deselects it and fires the TradeskillEngravingStationClose event.</p>
<hr><a name="Event_CancelExperimentation"><h3>Function</h3><br><h2>Event_CancelExperimentation()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Scientist Experimentation mission, this clears it.</p>
<h3>Remarks</h3>
<p>Currently, this only changes things on the back end.  This function will not cancel the Experimentation mission and has no event tied to it.</p>
<hr><a name="Event_CancelGuildBank"><h3>Function</h3><br><h2>Event_CancelGuildBank()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Guild Bank NPC, this function deselects it and fires the GuildBankerClose event.</p>
<hr><a name="Event_CancelGuildRegistration"><h3>Function</h3><br><h2>Event_CancelGuildRegistration()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Guild Registrar NPC, this function deselects it and fires the GuildRegistrarClose event.</p>
<hr><a name="Event_CancelHousingMannequin"><h3>Function</h3><br><h2>Event_CancelHousingMannequin()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Mannequin NPC, this function deselects it and fires the MannequinWindowClose event.</p>
<hr><a name="Event_CancelMail"><h3>Function</h3><br><h2>Event_CancelMail()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Mailbox NPC, this function deselects it and fires the MailBoxDeactivate event.</p>
<hr><a name="Event_CancelSettlerHub"><h3>Function</h3><br><h2>Event_CancelSettlerHub()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Settler Hub, this function deselects it and fires the SettlerHubClose event.</p>
<hr><a name="Event_CancelTaxiVendor"><h3>Function</h3><br><h2>Event_CancelTaxiVendor()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Taxi NPC, this function deselects it and fires the TaxiWindowClose event.</p>
<hr><a name="Event_CancelTradeskillTraining"><h3>Function</h3><br><h2>Event_CancelTradeskillTraining()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Tradeskill Trainer NPC, this function deselects it and fires the CloseTradeskillTrainer event.</p>
<hr><a name="Event_CancelTraining"><h3>Function</h3><br><h2>Event_CancelTraining() (Deprecated)</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Ability Trainer NPC, this function deselects it and fires the AbilitiesWindowClose event.</p>
<h3>Remarks</h3>
<p>Since Ability Trainers are no longer in game, this function does nothing.</p>
<hr><a name="Event_CancelVending"><h3>Function</h3><br><h2>Event_CancelVending()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Vendor NPC, this function deselects it and fires the CloseVendorWindow event.</p>
<hr><a name="Event_CancelWarpartyBank"><h3>Function</h3><br><h2>Event_CancelWarpartyBank()</h2>
<h3>Description</h3>
<p>If the player's current interact target is a Warparty Bank, this function deselects it and fires the WarPartyBankerClose event.</p>
<hr><a name="Event_CloseBankWindow"><h3>Function</h3><br><h2>Event_CloseBankWindow()</h2>
<h3>Description</h3>
<p>Fires the BankWindowClose event.</p>
<hr><a name="Event_CloseCraftingWindow"><h3>Function</h3><br><h2>Event_CloseCraftingWindow()</h2>
<h3>Description</h3>
<p>Calls the CloseCraftingWindow event.</p>
<hr><a name="Event_CloseTradeskillTrainerWindow"><h3>Function</h3><br><h2>Event_CloseTradeskillTrainerWindow()</h2>
<h3>Description</h3>
<p>Calls the CloseTradeskillTrainerWindow event and clears the player's interact target if it is a tradeskill trainer (which will call CloseTradeskillTrainerWindow a second time).</p>
<h3>Remarks</h3>
<p>This differs from the Event_CancelTradeskillTraining function in that it is guarenteed to call CloseTradeskillTrainerWindow, even if the player isn't targeting a tradeskill trainer.  Because of this, Event_CancelTradeskillTraining is a safer function to use.</p>
<hr><a name="Event_CloseVendorWindow"><h3>Function</h3><br><h2>Event_CloseVendorWindow()</h2>
<h3>Description</h3>
<p>Fires the CloseVendorWindow event.</p>
<hr><a name="Event_FireGenericEvent"><h3>Function</h3><br><h2>Event_FireGenericEvent(strEventName)</h2>
<h3>Description</h3>
<p>Fires an event for other addons to handle.</p>
<h3>Params</h3>
<ul>
<li><b>strEventName</b><b> (String)</b> - The event that you want to fire.
</ul>
<h3>Remarks</h3>
<p>This will fire any custom event, making it easy to pass information between addons on the same machine.  Any additional parameters passed in to the function will be passed along in the function handler.</p>
<hr><a name="Event_HideQuestLog"><h3>Function</h3><br><h2>Event_HideQuestLog()</h2>
<h3>Description</h3>
<p>Fires the HideQuestLog event.</p>
<hr><a name="Event_ShowQuestLog"><h3>Function</h3><br><h2>Event_ShowQuestLog(idQuest)</h2>
<h3>Description</h3>
<p>Fires the ShowQuestLog event.</p>
<h3>Params</h3>
<ul>
<li><b>idQuest</b><b> (Integer)</b> - The id number of the quest that the Quest Log should open to.
</ul>
<hr><a name="Event_ShowTutorial"><h3>Function</h3><br><h2>Event_ShowTutorial(idTutorial, bInstant, wndAnchor, nRelativePostion1, nRelativePosition2, nSpacing)</h2>
<h3>Description</h3>
<p>Fires the ShowTutorial event.</p>
<h3>Params</h3>
<ul>
<li><b>idTutorial</b><b> (Integer)</b> - The id number of the tutorial that should be shown.
<li><b>bInstant</b><b> (Boolean)</b> - Determines whether the tutorial should appear instantly or fade in.
<li><b>wndAnchor</b><b> (<a href="../WindowControls/Window.htm">Window</a>)</b> - The window that the tutorial is anchored to.  This variable is optional.
<li><b>nRelativePostion1</b><b> (Integer)</b> - The tutorial's position in relation to the window it is attached to.  This only needs to be included if wndAnchor is set.
<li><b>nRelativePosition2</b><b> (Integer)</b> - tutorial's position in relation to the window it is anchored to.  This only needs to be included if wndAnchor is set.
<li><b>nSpacing</b><b> (Integer)</b> - The amount of spacing between the tutorial and the window it is anchored to.  This only needs to be included if wndAnchor is set.
</ul>
<hr><a name="Event_ToggleAchievementWindow"><h3>Function</h3><br><h2>Event_ToggleAchievementWindow()</h2>
<h3>Description</h3>
<p>Fires the ToggleAchievementWindow event.</p>
<hr><a name="Event_ToggleCodex"><h3>Function</h3><br><h2>Event_ToggleCodex()</h2>
<h3>Description</h3>
<p>Fires the ToggleCodex event.</p>
<hr><a name="Event_ToggleMailWindow"><h3>Function</h3><br><h2>Event_ToggleMailWindow()</h2>
<h3>Description</h3>
<p>Fires the ToggleMailWindow event.</p>
<hr><a name="Event_ToggleQuestLog"><h3>Function</h3><br><h2>Event_ToggleQuestLog()</h2>
<h3>Description</h3>
<p>Fires the ToggleQuestLog event.</p>
<hr><a name="ExitGame"><h3>Function</h3><br><h2>ExitGame()</h2>
<h3>Description</h3>
<p>Attempts to start the process of leaving the game and shutting down the client.</p>
<hr><a name="ExitNow"><h3>Function</h3><br><h2>ExitNow()</h2>
<h3>Description</h3>
<p>If the Exit Game process has already started, this function will force the client to shut down.</p>
<hr><a name="GetAbilitiesWindow"><h3>Function</h3><br><h2>GetAbilitiesWindow() (Deprecated)</h2>
<hr><a name="GetCharacterWindow"><h3>Function</h3><br><h2>GetCharacterWindow() (Deprecated)</h2>
<hr><a name="GetConColor"><h3>Function</h3><br><h2>GetConColor(nCompareLevel)</h2>
<h3>Description</h3>
<p>Determines the color used for the level difference between a given level and the player's level.</p>
<h3>Params</h3>
<ul>
<li><b>nCompareLevel</b><b> (Integer)</b> - The level that the player's level is compared to.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The color code representing the difference between the given level and the player's level.
</ul>
<hr><a name="GetCurrentSubZoneName"><h3>Function</h3><br><h2>GetCurrentSubZoneName()</h2>
<h3>Description</h3>
<p>Returns the name for the sub-zone that the player is currently in.</p>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The name of the sub-zone that the player is in.
</ul>
<hr><a name="GetCurrentZoneName"><h3>Function</h3><br><h2>GetCurrentZoneName() (Deprecated)</h2>
<h3>Description</h3>
<p>Returns the name for the sub-zone that the player is currently in.</p>
<h3>Return Value</h3>
<ul>
<li><b>String</b>
</ul>
<hr><a name="GetDeathPenalty"><h3>Function</h3><br><h2>GetDeathPenalty()</h2>
<h3>Description</h3>
<p>Returns the amount of time before the player can select a resurrection option.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The amount of time before the player can resurrect, in milliseconds.
</ul>
<hr><a name="GetDemoTimeRemaining"><h3>Function</h3><br><h2>GetDemoTimeRemaining() (Deprecated)</h2>
<h3>Description</h3>
<p>Returns the amount of time before a demo is over.</p>
<h3>Return Value</h3>
<ul>
<li><b>Float</b> - The amount of time remaining in the demo, in seconds.
</ul>
<hr><a name="GetDemoType"><h3>Function</h3><br><h2>GetDemoType() (Deprecated)</h2>
<h3>Description</h3>
<p>Returns the type of demo is running.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The type of demo that is currently running.
</ul>
<hr><a name="GetElderPoints"><h3>Function</h3><br><h2>GetElderPoints()</h2>
<h3>Description</h3>
<p>Returns the number of elder points the player has.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The number of elder points the player currently has.
</ul>
<hr><a name="GetForceRezTime"><h3>Function</h3><br><h2>GetForceRezTime()</h2>
<h3>Description</h3>
<p>Returns the amount of time before the player is forced to resurrect.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The amount of time before they are forced to resurrect, in millisenonds.
</ul>
<hr><a name="GetGameFloat"><h3>Function</h3><br><h2>GetGameFloat(strVarName, fDefault)</h2>
<h3>Description</h3>
<p>Searches for floats set up by the game client and returns the value for the specified float.</p>
<h3>Params</h3>
<ul>
<li><b>strVarName</b><b> (String)</b> - The name of the float that was passed to the client.
<li><b>fDefault</b><b> (Float)</b> - The default value that will be returned if no variable is found.  This value defaults to 0.0f if no value is passed in.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Float</b> - The value of the specified variable, or the default if no variable is found.
</ul>
<h3>Remarks</h3>
<p>There are currently no values that are accessible via this function.</p>
<hr><a name="GetGameInt"><h3>Function</h3><br><h2>GetGameInt(strVarName, nDefault)</h2>
<h3>Description</h3>
<p>Searches for integers set up by the game client and returns the value for the specified integer.</p>
<h3>Params</h3>
<ul>
<li><b>strVarName</b><b> (String)</b> - The name of the variable that the function is attempting to get the value of.
<li><b>nDefault</b><b> (Integer)</b> - The default value that should be returned if the variable is not found.  This defaults to 0.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The value of the specified variable, or the default value if the variable was not found.
</ul>
<h3>Remarks</h3>
<p>Currently, the only variable that works with this function is FrameCount, which displays the number of frames since the player logged in.</p>
<hr><a name="GetGameString"><h3>Function</h3><br><h2>GetGameString(strVarName, strDefault)</h2>
<h3>Description</h3>
<p>Searches for strings set up by the game client and returns the value for the specified string.</p>
<h3>Params</h3>
<ul>
<li><b>strVarName</b><b> (String)</b> - The name of the variable that the function is attempting to get the value of.
<li><b>strDefault</b><b> (String)</b> - The default string that the function should return if the variable could not be found.  This defaults to an empty string.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The value of the specified variable, or the default value if the variable could not be found.
</ul>
<h3>Remarks</h3>
<p>Currently, the only string that can be found here is ZoneName.  This returns the name of the subzone that the player is in.</p>
<hr><a name="GetItemInfo"><h3>Function</h3><br><h2>GetItemInfo(nInventoryIdx)</h2>
<h3>Description</h3>
<p>Returns information about the item at a specified inventory index.</p>
<h3>Params</h3>
<ul>
<li><b>nInventoryIdx</b><b> (Integer)</b> - The inventory slot where the item is found.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Table</b> - A table containing information about the item found at the specified inventory index.
<ul>
<li><b>itemId</b><b> (Integer)</b> - The item's unique id.
<li><b>name</b><b> (String)</b> - The name of the item.
<li><b>icon</b><b> (String)</b> - The file name of the item's icon.
<li><b>StackCount</b><b> (Integer)</b> - The number of items that are in the stack at the specified location.
<li><b>InventoryIndex</b><b> (Integer)</b> - The location in the player's inventory where the item can be found.  Yes, this is the same number that was passed in to the function.
</ul>
</ul>
<hr><a name="GetMapTrackedUnitData"><h3>Function</h3><br><h2>GetMapTrackedUnitData() (Deprecated)</h2>
<hr><a name="GetMouseOverUnit"><h3>Function</h3><br><h2>GetMouseOverUnit()</h2>
<h3>Description</h3>
<p>Returns the unit that the player's mouse is hovering over.</p>
<h3>Return Value</h3>
<ul>
<li><b><a href="../Classes/Unit.htm">Unit</a></b> - The unit that the player's mouse is hovering over.  If there is no unit there, this returns nil.
</ul>
<hr><a name="GetNthResolution"><h3>Function</h3><br><h2>GetNthResolution(nIndex)</h2>
<h3>Description</h3>
<p>Returns one of three potential resolution values, in string form.</p>
<h3>Params</h3>
<ul>
<li><b>nIndex</b><b> (Integer)</b> - The index of the resolution that is being polled.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The resolution value at the specified index.
</ul>
<h3>Usage/Example</h3>
<pre>The table that is polled has three resolutions that fill indexes 0-2.  These are:

0 = "1024x768"
1 = "1280x1024"
2 = "1600x1200"</pre>
<h3>Remarks</h3>
<p>This should not be used, as we have other ways of getting a more accurate look at the client's resolution.</p>
<hr><a name="GetPeriodicElderPoints"><h3>Function</h3><br><h2>GetPeriodicElderPoints()</h2>
<h3>Description</h3>
<p>Returns the number of elder points that the player has earned towards their daily maximum amount.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b>
</ul>
<hr><a name="GetQuestItem"><h3>Function</h3><br><h2>GetQuestItem(idQuest, nObjective)</h2>
<h3>Description</h3>
<p>Returns the id of the quest item associated with the specified quest objective.</p>
<h3>Params</h3>
<ul>
<li><b>idQuest</b><b> (Integer)</b> - The id number for the quest that is being polled.
<li><b>nObjective</b><b> (Integer)</b> - The quest objective number that is being polled.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The id number of the quest item that the specified objective requires.
</ul>
<hr><a name="GetQuestItemCount"><h3>Function</h3><br><h2>GetQuestItemCount()</h2>
<h3>Description</h3>
<p>Returns the number of quest items that the player has in their posession.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b>
</ul>
<hr><a name="GetResolutionCount"><h3>Function</h3><br><h2>GetResolutionCount() (Deprecated)</h2>
<h3>Description</h3>
<p>Returns the number 3.  No, seriously.  That's what it does.  Every.  Time.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - 3!
</ul>
<h3>Remarks</h3>
<p>This actually corresponds to the number of resolutions referenced in the GetNthResolution function.</p>
<hr><a name="GetResourceCooldownPercent"><h3>Function</h3><br><h2>GetResourceCooldownPercent() (Deprecated)</h2>
<hr><a name="GetRestXp"><h3>Function</h3><br><h2>GetRestXp()</h2>
<h3>Description</h3>
<p>Returns the amount of rest XP/EP the player has accumulated.</p>
<hr><a name="GetRestXpKillCreaturePool"><h3>Function</h3><br><h2>GetRestXpKillCreaturePool()</h2>
<h3>Description</h3>
<p>Returns the point where the player will run out of their rested XP/EP bonus given their current pool.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The amount of bonus EP the player will get before their rest bonus runs out.
</ul>
<hr><a name="GetRezCost"><h3>Function</h3><br><h2>GetRezCost()</h2>
<h3>Description</h3>
<p>The amount of copper required for the "Rez Here" resurrection option.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b>
</ul>
<hr><a name="GetRezIsDead"><h3>Function</h3><br><h2>GetRezIsDead() (Deprecated)</h2>
<h3>Description</h3>
<p>Returns whether or not the player is dead.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="GetRezOptionAcceptCasterRez"><h3>Function</h3><br><h2>GetRezOptionAcceptCasterRez()</h2>
<h3>Description</h3>
<p>Returns whether the player was resurrected by another player or not.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="GetRezOptionExitInstance"><h3>Function</h3><br><h2>GetRezOptionExitInstance()</h2>
<h3>Description</h3>
<p>Returns whether the player has the option to resurrect outside the instance or not.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="GetRezOptionHolocrypt"><h3>Function</h3><br><h2>GetRezOptionHolocrypt()</h2>
<h3>Description</h3>
<p>Returns whether the player has the option to resurrect at the nearest holocrypt or not.</p>
<hr><a name="GetRezOptionWakeHere"><h3>Function</h3><br><h2>GetRezOptionWakeHere()</h2>
<h3>Description</h3>
<p>Returns whether the player has the option to resurrect at their current location or not.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="GetUnit"><h3>Function</h3><br><h2>GetUnit(idUnit)</h2>
<h3>Description</h3>
<p>Returns the unit with the specified unit id.</p>
<h3>Params</h3>
<ul>
<li><b>idUnit</b><b> (Integer)</b> - The unit's id number.
</ul>
<h3>Return Value</h3>
<ul>
<li><b><a href="../Classes/Unit.htm">Unit</a></b> - The unit that the id belongs to.
</ul>
<hr><a name="GetWakeHereTime"><h3>Function</h3><br><h2>GetWakeHereTime()</h2>
<h3>Description</h3>
<p>The amount of time remaining until the player can resurrect at their current location.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The amount of time before the player can use the "Wake Here" resurrect option, in milliseconds.
</ul>
<hr><a name="GetXp"><h3>Function</h3><br><h2>GetXp()</h2>
<h3>Description</h3>
<p>Returns the amount of XP the player has earned.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b>
</ul>
<hr><a name="GetXpPercentToNextLevel"><h3>Function</h3><br><h2>GetXpPercentToNextLevel()</h2>
<h3>Description</h3>
<p>Calculates how much, percentage wise, the player has to earn before hitting the next level.</p>
<h3>Return Value</h3>
<ul>
<li><b>Float</b>
</ul>
<h3>Remarks</h3>
<p>This does a basic calculation of <br>
<br>
(XPToNextLevel - XPToCurrentLevel) / (CurrentXP - XPToCurrentLevel)</p>
<hr><a name="GetXpToCurrentLevel"><h3>Function</h3><br><h2>GetXpToCurrentLevel()</h2>
<h3>Description</h3>
<p>The amount of XP required to reach the player's current level.</p>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b>
</ul>
<hr><a name="GetXpToNextLevel"><h3>Function</h3><br><h2>GetXpToNextLevel()</h2>
<h3>Description</h3>
<p>The amount of XP required for the player to reach the next level.</p>
<hr><a name="Interaction_Result"><h3>Function</h3><br><h2>Interaction_Result() (Deprecated)</h2>
<h3>Description</h3>
<p>Depricated.  Used to poll whether we passed or failed the interaction result</p>
<hr><a name="InvokeOptionsScreen"><h3>Function</h3><br><h2>InvokeOptionsScreen()</h2>
<h3>Description</h3>
<p>Opens the Options UI.</p>
<hr><a name="IsActionBarSetVisible"><h3>Function</h3><br><h2>IsActionBarSetVisible(nBar)</h2>
<h3>Description</h3>
<p>Checks whether or not the specified ActionBarShortcut bar is active.<br>
</p>
<h3>Params</h3>
<ul>
<li><b>nBar</b><b> (Integer)</b> - The ActionBarShortuct bar that the function is checking.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether the bar is shown or not.
</ul>
<hr><a name="IsDemo"><h3>Function</h3><br><h2>IsDemo()</h2>
<h3>Description</h3>
<p>Returns whether the player is playing a demo version of the game.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="IsGameValid"><h3>Function</h3><br><h2>IsGameValid()</h2>
<h3>Description</h3>
<p>Returns whether or not the game is running.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b>
</ul>
<hr><a name="IsInGame"><h3>Function</h3><br><h2>IsInGame()</h2>
<h3>Description</h3>
<p>Checks if the current player is in the game or not.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether the current player is in the game or not.
</ul>
<hr><a name="IsInVehicle"><h3>Function</h3><br><h2>IsInVehicle() (Deprecated)</h2>
<h3>Description</h3>
<p>Checks if the player is in a vehicle or not.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether the player is in a vehicle or not.
</ul>
<hr><a name="IsRechargeVendor"><h3>Function</h3><br><h2>IsRechargeVendor() (Deprecated)</h2>
<h3>Description</h3>
<p>This returns false.  There's no check here.  It's just a given that this is not true.</p>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - False.
</ul>
<hr><a name="IsRepairVendor"><h3>Function</h3><br><h2>IsRepairVendor(unitVendor)</h2>
<h3>Description</h3>
<p>Checks if the vendor allows the player to repair.</p>
<h3>Params</h3>
<ul>
<li><b>unitVendor</b><b> (<a href="../Classes/Unit.htm">Unit</a>)</b> - The vendor that the player is checking.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Boolean</b> - Whether or not the vendor allows players to repair.
</ul>
<hr><a name="NextQuestItem"><h3>Function</h3><br><h2>NextQuestItem()</h2>
<h3>Description</h3>
<p>Cycles forward to the next quest item in the list.</p>
<hr><a name="Pet_GetStance"><h3>Function</h3><br><h2>Pet_GetStance(idUnit)</h2>
<h3>Description</h3>
<p>Returns the specified pet's stance.</p>
<h3>Params</h3>
<ul>
<li><b>idUnit</b><b> (Integer)</b> - The id number of the pet that is being checked.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>GameLib.CodeEnumPetStance</b> - The pet's current stance.
</ul>
<hr><a name="Pet_GetValidStances"><h3>Function</h3><br><h2>Pet_GetValidStances(idUnit)</h2>
<h3>Description</h3>
<p>Checks the list of stances available for the specified pet.</p>
<h3>Params</h3>
<ul>
<li><b>idUnit</b><b> (Integer)</b> - The id number of the pet that is being checked.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>Integer</b> - The bit flag for the stances that are available to the pet.
</ul>
<hr><a name="Pet_SetStance"><h3>Function</h3><br><h2>Pet_SetStance(idUnit, eStance)</h2>
<h3>Description</h3>
<p>Sets the stance for a specified unit.</p>
<h3>Params</h3>
<ul>
<li><b>idUnit</b><b> (Integer)</b> - The id number for the pet whose stance is being set.  Setting this to 0 will set the stance for all of the player's pets.
<li><b>eStance</b><b> (GameLib.CodeEnumPetStance)</b> - The stance that the pet will be set to.
</ul>
<hr><a name="PlayerTicket_GetErrorTypeList"><h3>Function</h3><br><h2>PlayerTicket_GetErrorTypeList()</h2>
<h3>Description</h3>
<p>Gets a list of categories for CS tickets, along with a localized name for the category.</p>
<h3>Return Value</h3>
<ul>
<li><b>Array of Table</b> - An array of tables containing the category IDs and localized names.
<ul>
<li><b>index</b><b> (Integer)</b> - The category's id number.
<li><b>localizedText</b><b> (String)</b> - The localized name of the category.
</ul>
</ul>
<hr><a name="PlayerTicket_GetSubtype"><h3>Function</h3><br><h2>PlayerTicket_GetSubtype()</h2>
<hr><a name="PreviousQuestItem"><h3>Function</h3><br><h2>PreviousQuestItem()</h2>
<h3>Description</h3>
<p>Cycles to the previous item in the quest item list.</p>
<hr><a name="Print"><h3>Function</h3><br><h2>Print(strOutput)</h2>
<h3>Description</h3>
<p>Sends text to the System chat channel.  This text will only be shown on the client that calls this function</p>
<h3>Params</h3>
<ul>
<li><b>strOutput</b><b> (String)</b> - The string that is output to the System channel.
</ul>
<h3>Usage/Example</h3>
<pre>Integers and floats can also be passed in as parameters, but other variable types are not output correctly.</pre>
<hr><a name="RechargeItemVendor"><h3>Function</h3><br><h2>RechargeItemVendor() (Deprecated)</h2>
<h3>Description</h3>
<p>Calls a function that does nothing.</p>
<hr><a name="RepairAllItemsVendor"><h3>Function</h3><br><h2>RepairAllItemsVendor()</h2>
<h3>Description</h3>
<p>Repairs all of the player's damaged items using thier own currency.  If the player is not at a vendor that can repair items, this function will do nothing.</p>
<h3>Usage/Example</h3>
<pre>Results from this attempt</pre>
<hr><a name="RepairItemVendor"><h3>Function</h3><br><h2>RepairItemVendor(nInventoryLocation)</h2>
<h3>Description</h3>
<p>Repairs the item in the specified inventory slot.</p>
<h3>Params</h3>
<ul>
<li><b>nInventoryLocation</b><b> (Integer)</b> - The index where the item can be found in the player's inventory.
</ul>
<hr><a name="ReportError"><h3>Function</h3><br><h2>ReportError()</h2>
<h3>Description</h3>
<p>Fires the InvokeErrorDialog event.</p>
<hr><a name="RequestReloadUI"><h3>Function</h3><br><h2>RequestReloadUI()</h2>
<h3>Description</h3>
<p>Reloads the UI.</p>
<hr><a name="SellItemToVendor"><h3>Function</h3><br><h2>SellItemToVendor(nInventoryLocation, nQuantity)</h2>
<h3>Description</h3>
<p>Sells the item at the specified inventory location to the vendor.  If the player is not interacting with a vendor, this function will do nothing.</p>
<h3>Params</h3>
<ul>
<li><b>nInventoryLocation</b><b> (Integer)</b> - The index where the item can be found within the player's inventory.
<li><b>nQuantity</b><b> (Integer)</b> - The number of items to sell to the vendor.
</ul>
<hr><a name="SellItemToVendorById"><h3>Function</h3><br><h2>SellItemToVendorById(idItem, nQuantity)</h2>
<h3>Description</h3>
<p>Sells the specified item to the vendor.  If the player is not interacting with a vendor, this function will do nothing.</p>
<h3>Params</h3>
<ul>
<li><b>idItem</b><b> (Integer)</b> - The unique ID of the item being sold.
<li><b>nQuantity</b><b> (Integer)</b> - The number of items being sold.
</ul>
<hr><a name="SetQuestItem"><h3>Function</h3><br><h2>SetQuestItem(idItem) (Deprecated)</h2>
<h3>Description</h3>
<p>Picks a specific quest item from a the list.</p>
<h3>Params</h3>
<ul>
<li><b>idItem</b><b> (Integer)</b> - The id of the quest item that was selected.
</ul>
<hr><a name="ShowInventory"><h3>Function</h3><br><h2>ShowInventory(bShow)</h2>
<h3>Description</h3>
<p>Fires the ShowInventory event with the specified value.</p>
<h3>Params</h3>
<ul>
<li><b>bShow</b><b> (Boolean)</b> - Whether the player's inventory should be shown or hidden.
</ul>
<hr><a name="String_GetString"><h3>Function</h3><br><h2>String_GetString(idString)</h2>
<h3>Description</h3>
<p>Returns a localized string using the specified string id.  </p>
<h3>Params</h3>
<ul>
<li><b>idString</b><b> (Integer)</b> - The id number for the string that this should return.
</ul>
<hr><a name="String_GetWeaselString"><h3>Function</h3><br><h2>String_GetWeaselString(idString, oParameter)</h2>
<h3>Description</h3>
<p>Concatinates localized strings that contain tokens with other parameters.</p>
<h3>Params</h3>
<ul>
<li><b>idString</b><b> (Integer)</b> - The id number of the base string.
<li><b>oParameter</b><b> (Any)</b> - The function can take in any number or type of parameter depending on what the string needs.  Every variable after the idString needs to match the type and order that the string is expected.
</ul>
<h3>Return Value</h3>
<ul>
<li><b>String</b> - The final string after the variables are added.
</ul>
<h3>Usage/Example</h3>
<pre>Localized strings can have a number of different tokens that are used to create specialized strings.  Input tokens always begin with $ and include the parameter number that goes in that location.
For example:
$1n will add the first parameter at this location and expects a string.
$5f will add the fifth parameter at this location and expects a floating point value.

Input token key:
n = string
c = integer
f[0-9] = floating point number that is limited to 0-9 decimal places.  If the number of decimal places is not set, it will not use a limit.

^ = capitalize the next string
~ = uncapitalize the next string

m = force pluralization of the string (note, this requires the string to have pluralization text, which is explained below)
+ = show the count and the pluralized name.  This requires a table with "count" (the number of the thing) and "name" (the string to pluralize) as variables within the table.
# = pluralize the string based on the "count", but do not show the count.  This requires a table with "count" (the number of the thing) and "name" (the string to pluralize) as variables within the table.
Example:

 EnumName: CRB_Knife
 string: knife{p:knives}
 
EnumName: CRB_Stab_Em_With_Your 
string: Stab ‘em with your $#(1) 
 
EnumName: CRB_Stab_Em_With_Your_Count
string: Stab ‘em with your $+(1)
 
Lua: 
local nNumberOfKnives = 1 

local tActor1 = 
{
   ["count"] = nNumberOfKnives, 
    ["name"] = Apollo.GetString("CRB_Knife") 
} 

Print(String_GetWeaselString(Apollo.GetString("CRB_Stab_Em_With_Your"), tActor1))
tActor1[“count”] = 2
 
Print(String_GetWeaselString(Apollo.GetString("CRB_Stab_Em_With_Your"), tActor1)) 
Print(String_GetWeaselString(Apollo.GetString(“CRB_Stab_Em_With_Your_Count”), tActor1))
 
Output:
Stab ‘em with your knife
Stab ‘em with your knives
Stab ‘em with your 2 knives</pre>
<hr><a name="ToggleAbilitiesWindow"><h3>Function</h3><br><h2>ToggleAbilitiesWindow()</h2>
<h3>Description</h3>
<p>Fires the ToggleAbilitiesWindow event.</p>
<hr><a name="ToggleCharacterWindow"><h3>Function</h3><br><h2>ToggleCharacterWindow()</h2>
<h3>Description</h3>
<p>Fires the ToggleCharacterWindow event.</p>
<hr><a name="ToggleInventory"><h3>Function</h3><br><h2>ToggleInventory()</h2>
<h3>Description</h3>
<p>Fires the ToggleInventory event.</p>
<hr><a name="ToggleTradeSkillsInventory"><h3>Function</h3><br><h2>ToggleTradeSkillsInventory()</h2>
<h3>Description</h3>
<p>Fires the ToggleTradeSkillsInventory event.</p>
	</body>
</html>
